/* A Bison parser, made by GNU Bison 2.5.  */

/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2011 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.5"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Copy the first part of user declarations.  */

/* Line 268 of yacc.c  */
#line 24 "sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Alter_table*_statement
#include "sql_truncate.h"                      // Truncate_statement
#include "sql_admin.h"                         // Analyze/Check..._table_stmt
#include "sql_partition_admin.h"               // Alter_table_*_partition_stmt
#include "sql_signal.h"
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable_t *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->dflt)
    it= spv->dflt;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_NO_WRITE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}



/* Line 268 of yacc.c  */
#line 779 "sql_yacc.tab.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYZE_SYM = 269,
     AND_AND_SYM = 270,
     AND_SYM = 271,
     ANY_SYM = 272,
     AS = 273,
     ASC = 274,
     ASCII_SYM = 275,
     ASENSITIVE_SYM = 276,
     AT_SYM = 277,
     AUTHORS_SYM = 278,
     AUTOEXTEND_SIZE_SYM = 279,
     AUTO_INC = 280,
     AVG_ROW_LENGTH = 281,
     AVG_SYM = 282,
     BACKUP_SYM = 283,
     BEFORE_SYM = 284,
     BEGIN_SYM = 285,
     BETWEEN_SYM = 286,
     BIGINT = 287,
     BINARY = 288,
     BINLOG_SYM = 289,
     BIN_NUM = 290,
     BIT_AND = 291,
     BIT_OR = 292,
     BIT_SYM = 293,
     BIT_XOR = 294,
     BLOB_SYM = 295,
     BLOCK_SYM = 296,
     BOOLEAN_SYM = 297,
     BOOL_SYM = 298,
     BOTH = 299,
     BTREE_SYM = 300,
     BY = 301,
     BYTE_SYM = 302,
     CACHE_SYM = 303,
     CALL_SYM = 304,
     CASCADE = 305,
     CASCADED = 306,
     CASE_SYM = 307,
     CAST_SYM = 308,
     CATALOG_NAME_SYM = 309,
     CHAIN_SYM = 310,
     CHANGE = 311,
     CHANGED = 312,
     CHARSET = 313,
     CHAR_SYM = 314,
     CHECKSUM_SYM = 315,
     CHECK_SYM = 316,
     CIPHER_SYM = 317,
     CLASS_ORIGIN_SYM = 318,
     CLIENT_SYM = 319,
     CLOSE_SYM = 320,
     COALESCE = 321,
     CODE_SYM = 322,
     COLLATE_SYM = 323,
     COLLATION_SYM = 324,
     COLUMNS = 325,
     COLUMN_SYM = 326,
     COLUMN_NAME_SYM = 327,
     COMMENT_SYM = 328,
     COMMITTED_SYM = 329,
     COMMIT_SYM = 330,
     COMPACT_SYM = 331,
     COMPLETION_SYM = 332,
     COMPRESSED_SYM = 333,
     GCS_SYM = 334,
     CONCURRENT = 335,
     CONDITION_SYM = 336,
     CONNECTION_SYM = 337,
     CONSISTENT_SYM = 338,
     CONSTRAINT = 339,
     CONSTRAINT_CATALOG_SYM = 340,
     CONSTRAINT_NAME_SYM = 341,
     CONSTRAINT_SCHEMA_SYM = 342,
     CONTAINS_SYM = 343,
     CONTEXT_SYM = 344,
     CONTINUE_SYM = 345,
     CONTRIBUTORS_SYM = 346,
     CONVERT_SYM = 347,
     COUNT_SYM = 348,
     CPU_SYM = 349,
     CREATE = 350,
     CROSS = 351,
     CUBE_SYM = 352,
     CURDATE = 353,
     CURRENT_USER = 354,
     CURSOR_SYM = 355,
     CURSOR_NAME_SYM = 356,
     CURTIME = 357,
     DATABASE = 358,
     DATABASES = 359,
     DATAFILE_SYM = 360,
     DATA_SYM = 361,
     DATETIME = 362,
     DATE_ADD_INTERVAL = 363,
     DATE_SUB_INTERVAL = 364,
     DATE_SYM = 365,
     DAY_HOUR_SYM = 366,
     DAY_MICROSECOND_SYM = 367,
     DAY_MINUTE_SYM = 368,
     DAY_SECOND_SYM = 369,
     DAY_SYM = 370,
     DEALLOCATE_SYM = 371,
     DECIMAL_NUM = 372,
     DECIMAL_SYM = 373,
     DECLARE_SYM = 374,
     DEFAULT = 375,
     DEFINER_SYM = 376,
     DELAYED_SYM = 377,
     DELAY_KEY_WRITE_SYM = 378,
     DELETE_SYM = 379,
     DESC = 380,
     DESCRIBE = 381,
     DES_KEY_FILE = 382,
     DETERMINISTIC_SYM = 383,
     DIRECTORY_SYM = 384,
     DISABLE_SYM = 385,
     DISCARD = 386,
     DISK_SYM = 387,
     DISTINCT = 388,
     DIV_SYM = 389,
     DOUBLE_SYM = 390,
     DO_SYM = 391,
     DROP = 392,
     DUAL_SYM = 393,
     DUMPFILE = 394,
     DUPLICATE_SYM = 395,
     DYNAMIC_SYM = 396,
     EACH_SYM = 397,
     ELSE = 398,
     ELSEIF_SYM = 399,
     ENABLE_SYM = 400,
     ENCLOSED = 401,
     END = 402,
     ENDS_SYM = 403,
     END_OF_INPUT = 404,
     ENGINES_SYM = 405,
     ENGINE_SYM = 406,
     ENUM = 407,
     EQ = 408,
     EQUAL_SYM = 409,
     ERROR_SYM = 410,
     ERRORS = 411,
     ESCAPED = 412,
     ESCAPE_SYM = 413,
     EVENTS_SYM = 414,
     EVENT_SYM = 415,
     EVERY_SYM = 416,
     EXECUTE_SYM = 417,
     EXISTS = 418,
     EXIT_SYM = 419,
     EXPANSION_SYM = 420,
     EXTENDED_SYM = 421,
     EXTENT_SIZE_SYM = 422,
     EXTRACT_SYM = 423,
     FALSE_SYM = 424,
     FAST_SYM = 425,
     FAULTS_SYM = 426,
     FETCH_SYM = 427,
     FILE_SYM = 428,
     FIRST_SYM = 429,
     FIXED_SYM = 430,
     FLOAT_NUM = 431,
     FLOAT_SYM = 432,
     FLUSH_SYM = 433,
     FORCE_SYM = 434,
     FOREIGN = 435,
     FOR_SYM = 436,
     FOUND_SYM = 437,
     FROM = 438,
     FULL = 439,
     FULLTEXT_SYM = 440,
     FUNCTION_SYM = 441,
     GE = 442,
     GENERAL = 443,
     GEOMETRYCOLLECTION = 444,
     GEOMETRY_SYM = 445,
     GET_FORMAT = 446,
     GLOBAL_SYM = 447,
     GRANT = 448,
     GRANTS = 449,
     GROUP_SYM = 450,
     GROUP_CONCAT_SYM = 451,
     GT_SYM = 452,
     HANDLER_SYM = 453,
     HASH_SYM = 454,
     HAVING = 455,
     HELP_SYM = 456,
     HEX_NUM = 457,
     HIGH_PRIORITY = 458,
     HOST_SYM = 459,
     HOSTS_SYM = 460,
     HOUR_MICROSECOND_SYM = 461,
     HOUR_MINUTE_SYM = 462,
     HOUR_SECOND_SYM = 463,
     HOUR_SYM = 464,
     IDENT = 465,
     IDENTIFIED_SYM = 466,
     IDENT_QUOTED = 467,
     IF = 468,
     IGNORE_SYM = 469,
     IGNORE_SERVER_IDS_SYM = 470,
     IMPORT = 471,
     INDEXES = 472,
     INDEX_SYM = 473,
     INFILE = 474,
     INITIAL_SIZE_SYM = 475,
     INNER_SYM = 476,
     INOUT_SYM = 477,
     INSENSITIVE_SYM = 478,
     INSERT = 479,
     INSERT_METHOD = 480,
     INSTALL_SYM = 481,
     INTERVAL_SYM = 482,
     INTO = 483,
     INT_SYM = 484,
     INVOKER_SYM = 485,
     IN_SYM = 486,
     IO_SYM = 487,
     IPC_SYM = 488,
     IS = 489,
     ISOLATION = 490,
     ISSUER_SYM = 491,
     ITERATE_SYM = 492,
     JOIN_SYM = 493,
     KEYS = 494,
     KEY_BLOCK_SIZE = 495,
     KEY_SYM = 496,
     KILL_SYM = 497,
     LANGUAGE_SYM = 498,
     LAST_SYM = 499,
     LE = 500,
     LEADING = 501,
     LEAVES = 502,
     LEAVE_SYM = 503,
     LEFT = 504,
     LESS_SYM = 505,
     LEVEL_SYM = 506,
     LEX_HOSTNAME = 507,
     LIKE = 508,
     LIMIT = 509,
     LINEAR_SYM = 510,
     LINES = 511,
     LINESTRING = 512,
     LIST_SYM = 513,
     LOAD = 514,
     LOCAL_SYM = 515,
     LOCATOR_SYM = 516,
     LOCKS_SYM = 517,
     LOCK_SYM = 518,
     LOGFILE_SYM = 519,
     LOGS_SYM = 520,
     LONGBLOB = 521,
     LONGTEXT = 522,
     LONG_NUM = 523,
     LONG_SYM = 524,
     LOOP_SYM = 525,
     LOW_PRIORITY = 526,
     LT = 527,
     MASTER_CONNECT_RETRY_SYM = 528,
     MASTER_HOST_SYM = 529,
     MASTER_LOG_FILE_SYM = 530,
     MASTER_LOG_POS_SYM = 531,
     MASTER_PASSWORD_SYM = 532,
     MASTER_PORT_SYM = 533,
     MASTER_SERVER_ID_SYM = 534,
     MASTER_SSL_CAPATH_SYM = 535,
     MASTER_SSL_CA_SYM = 536,
     MASTER_SSL_CERT_SYM = 537,
     MASTER_SSL_CIPHER_SYM = 538,
     MASTER_SSL_KEY_SYM = 539,
     MASTER_SSL_SYM = 540,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 541,
     MASTER_SYM = 542,
     MASTER_USER_SYM = 543,
     MASTER_HEARTBEAT_PERIOD_SYM = 544,
     MATCH = 545,
     MAX_CONNECTIONS_PER_HOUR = 546,
     MAX_QUERIES_PER_HOUR = 547,
     MAX_ROWS = 548,
     MAX_SIZE_SYM = 549,
     MAX_SYM = 550,
     MAX_UPDATES_PER_HOUR = 551,
     MAX_USER_CONNECTIONS_SYM = 552,
     MAX_VALUE_SYM = 553,
     MEDIUMBLOB = 554,
     MEDIUMINT = 555,
     MEDIUMTEXT = 556,
     MEDIUM_SYM = 557,
     MEMORY_SYM = 558,
     MERGE_SYM = 559,
     MESSAGE_TEXT_SYM = 560,
     MICROSECOND_SYM = 561,
     MIGRATE_SYM = 562,
     MINUTE_MICROSECOND_SYM = 563,
     MINUTE_SECOND_SYM = 564,
     MINUTE_SYM = 565,
     MIN_ROWS = 566,
     MIN_SYM = 567,
     MODE_SYM = 568,
     MODIFIES_SYM = 569,
     MODIFY_SYM = 570,
     MOD_SYM = 571,
     MONTH_SYM = 572,
     MULTILINESTRING = 573,
     MULTIPOINT = 574,
     MULTIPOLYGON = 575,
     MUTEX_SYM = 576,
     MYSQL_ERRNO_SYM = 577,
     NAMES_SYM = 578,
     NAME_SYM = 579,
     NATIONAL_SYM = 580,
     NATURAL = 581,
     NCHAR_STRING = 582,
     NCHAR_SYM = 583,
     NDBCLUSTER_SYM = 584,
     NE = 585,
     NEG = 586,
     NEW_SYM = 587,
     NEXT_SYM = 588,
     NODEGROUP_SYM = 589,
     NONE_SYM = 590,
     NOT2_SYM = 591,
     NOT_SYM = 592,
     NOW_SYM = 593,
     NO_SYM = 594,
     NO_WAIT_SYM = 595,
     NO_WRITE_TO_BINLOG = 596,
     NULL_SYM = 597,
     NUM = 598,
     NUMERIC_SYM = 599,
     NVARCHAR_SYM = 600,
     OFFSET_SYM = 601,
     OLD_PASSWORD = 602,
     ON = 603,
     ONE_SHOT_SYM = 604,
     ONE_SYM = 605,
     OPEN_SYM = 606,
     OPTIMIZE = 607,
     OPTIONS_SYM = 608,
     OPTION = 609,
     OPTIONALLY = 610,
     OR2_SYM = 611,
     ORDER_SYM = 612,
     OR_OR_SYM = 613,
     OR_SYM = 614,
     OUTER = 615,
     OUTFILE = 616,
     OUT_SYM = 617,
     OWNER_SYM = 618,
     PACK_KEYS_SYM = 619,
     PAGE_SYM = 620,
     PARAM_MARKER = 621,
     PARSER_SYM = 622,
     PARTIAL = 623,
     PARTITIONING_SYM = 624,
     PARTITIONS_SYM = 625,
     PARTITION_SYM = 626,
     PASSWORD = 627,
     PHASE_SYM = 628,
     PLUGINS_SYM = 629,
     PLUGIN_SYM = 630,
     POINT_SYM = 631,
     POLYGON = 632,
     PORT_SYM = 633,
     POSITION_SYM = 634,
     PRECISION = 635,
     PREPARE_SYM = 636,
     PRESERVE_SYM = 637,
     PREV_SYM = 638,
     PRIMARY_SYM = 639,
     PRIVILEGES = 640,
     PROCEDURE_SYM = 641,
     PROCESS = 642,
     PROCESSLIST_SYM = 643,
     PROFILE_SYM = 644,
     PROFILES_SYM = 645,
     PROXY_SYM = 646,
     PURGE = 647,
     QUARTER_SYM = 648,
     QUERY_SYM = 649,
     QUICK = 650,
     RANGE_SYM = 651,
     READS_SYM = 652,
     READ_ONLY_SYM = 653,
     READ_SYM = 654,
     READ_WRITE_SYM = 655,
     REAL = 656,
     REBUILD_SYM = 657,
     RECOVER_SYM = 658,
     REDOFILE_SYM = 659,
     REDO_BUFFER_SIZE_SYM = 660,
     REDUNDANT_SYM = 661,
     REFERENCES = 662,
     REGEXP = 663,
     RELAY = 664,
     RELAYLOG_SYM = 665,
     RELAY_LOG_FILE_SYM = 666,
     RELAY_LOG_POS_SYM = 667,
     RELAY_THREAD = 668,
     RELEASE_SYM = 669,
     RELOAD = 670,
     REMOVE_SYM = 671,
     RENAME = 672,
     REORGANIZE_SYM = 673,
     REPAIR = 674,
     REPEATABLE_SYM = 675,
     REPEAT_SYM = 676,
     REPLACE = 677,
     REPLICATION = 678,
     REQUIRE_SYM = 679,
     RESET_SYM = 680,
     RESIGNAL_SYM = 681,
     RESOURCES = 682,
     RESTORE_SYM = 683,
     RESTRICT = 684,
     RESUME_SYM = 685,
     RETURNS_SYM = 686,
     RETURN_SYM = 687,
     REVOKE = 688,
     RIGHT = 689,
     ROLLBACK_SYM = 690,
     ROLLUP_SYM = 691,
     ROUTINE_SYM = 692,
     ROWS_SYM = 693,
     ROW_FORMAT_SYM = 694,
     ROW_SYM = 695,
     RTREE_SYM = 696,
     SAVEPOINT_SYM = 697,
     SCHEDULE_SYM = 698,
     SCHEMA_NAME_SYM = 699,
     SECOND_MICROSECOND_SYM = 700,
     SECOND_SYM = 701,
     SECURITY_SYM = 702,
     SELECT_SYM = 703,
     SENSITIVE_SYM = 704,
     SEPARATOR_SYM = 705,
     SERIALIZABLE_SYM = 706,
     SERIAL_SYM = 707,
     SESSION_SYM = 708,
     SERVER_SYM = 709,
     SERVER_OPTIONS = 710,
     SET = 711,
     SET_VAR = 712,
     SHARE_SYM = 713,
     SHIFT_LEFT = 714,
     SHIFT_RIGHT = 715,
     SHOW = 716,
     SHUTDOWN = 717,
     SIGNAL_SYM = 718,
     SIGNED_SYM = 719,
     SIMPLE_SYM = 720,
     SLAVE = 721,
     SLOW = 722,
     SMALLINT = 723,
     SNAPSHOT_SYM = 724,
     SOCKET_SYM = 725,
     SONAME_SYM = 726,
     SOUNDS_SYM = 727,
     SOURCE_SYM = 728,
     SPATIAL_SYM = 729,
     SPECIFIC_SYM = 730,
     SQLEXCEPTION_SYM = 731,
     SQLSTATE_SYM = 732,
     SQLWARNING_SYM = 733,
     SQL_BIG_RESULT = 734,
     SQL_BUFFER_RESULT = 735,
     SQL_CACHE_SYM = 736,
     SQL_CALC_FOUND_ROWS = 737,
     SQL_NO_CACHE_SYM = 738,
     SQL_SMALL_RESULT = 739,
     SQL_SYM = 740,
     SQL_THREAD = 741,
     SSL_SYM = 742,
     STARTING = 743,
     STARTS_SYM = 744,
     START_SYM = 745,
     STATUS_SYM = 746,
     STDDEV_SAMP_SYM = 747,
     STD_SYM = 748,
     STOP_SYM = 749,
     STORAGE_SYM = 750,
     STRAIGHT_JOIN = 751,
     STRING_SYM = 752,
     SUBCLASS_ORIGIN_SYM = 753,
     SUBDATE_SYM = 754,
     SUBJECT_SYM = 755,
     SUBPARTITIONS_SYM = 756,
     SUBPARTITION_SYM = 757,
     SUBSTRING = 758,
     SUM_SYM = 759,
     SUPER_SYM = 760,
     SUSPEND_SYM = 761,
     SWAPS_SYM = 762,
     SWITCHES_SYM = 763,
     SYSDATE = 764,
     TABLES = 765,
     TABLESPACE = 766,
     TABLE_REF_PRIORITY = 767,
     TABLE_SYM = 768,
     TABLE_CHECKSUM_SYM = 769,
     TABLE_NAME_SYM = 770,
     TEMPORARY = 771,
     TEMPTABLE_SYM = 772,
     TERMINATED = 773,
     TEXT_STRING = 774,
     TEXT_SYM = 775,
     THAN_SYM = 776,
     THEN_SYM = 777,
     TIMESTAMP = 778,
     TIMESTAMP_ADD = 779,
     TIMESTAMP_DIFF = 780,
     TIME_SYM = 781,
     TINYBLOB = 782,
     TINYINT = 783,
     TINYTEXT = 784,
     TO_SYM = 785,
     TRAILING = 786,
     TRANSACTION_SYM = 787,
     TRIGGERS_SYM = 788,
     TRIGGER_SYM = 789,
     TRIM = 790,
     TRUE_SYM = 791,
     TRUNCATE_SYM = 792,
     TYPES_SYM = 793,
     TYPE_SYM = 794,
     UDF_RETURNS_SYM = 795,
     ULONGLONG_NUM = 796,
     UNCOMMITTED_SYM = 797,
     UNDEFINED_SYM = 798,
     UNDERSCORE_CHARSET = 799,
     UNDOFILE_SYM = 800,
     UNDO_BUFFER_SIZE_SYM = 801,
     UNDO_SYM = 802,
     UNICODE_SYM = 803,
     UNINSTALL_SYM = 804,
     UNION_SYM = 805,
     UNIQUE_SYM = 806,
     UNKNOWN_SYM = 807,
     UNLOCK_SYM = 808,
     UNSIGNED = 809,
     UNTIL_SYM = 810,
     UPDATE_SYM = 811,
     UPGRADE_SYM = 812,
     USAGE = 813,
     USER = 814,
     USE_FRM = 815,
     USE_SYM = 816,
     USING = 817,
     UTC_DATE_SYM = 818,
     UTC_TIMESTAMP_SYM = 819,
     UTC_TIME_SYM = 820,
     VALUES = 821,
     VALUE_SYM = 822,
     VARBINARY = 823,
     VARCHAR = 824,
     VARIABLES = 825,
     VARIANCE_SYM = 826,
     VARYING = 827,
     VAR_SAMP_SYM = 828,
     VIEW_SYM = 829,
     WAIT_SYM = 830,
     WARNINGS = 831,
     WEEK_SYM = 832,
     WHEN_SYM = 833,
     WHERE = 834,
     WHILE_SYM = 835,
     WITH = 836,
     WITH_CUBE_SYM = 837,
     WITH_ROLLUP_SYM = 838,
     WORK_SYM = 839,
     WRAPPER_SYM = 840,
     WRITE_SYM = 841,
     X509_SYM = 842,
     XA_SYM = 843,
     XML_SYM = 844,
     XOR = 845,
     YEAR_MONTH_SYM = 846,
     YEAR_SYM = 847,
     ZEROFILL = 848
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 293 of yacc.c  */
#line 730 "sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;



/* Line 293 of yacc.c  */
#line 1458 "sql_yacc.tab.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 343 of yacc.c  */
#line 778 "sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 343 of yacc.c  */
#line 1475 "sql_yacc.tab.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  574
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   49555

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  613
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  885
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2493
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4236

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   848

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   606,     2,     2,     2,   600,   595,     2,
     603,   604,   598,   597,   605,   596,   611,   599,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   612,   609,
       2,     2,     2,     2,   610,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   601,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   607,   594,   608,   602,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   127,   129,   131,   136,   138,   141,   142,   147,
     148,   151,   155,   157,   160,   161,   165,   166,   172,   174,
     178,   182,   186,   190,   194,   198,   202,   206,   210,   214,
     218,   222,   226,   230,   236,   238,   239,   241,   245,   247,
     251,   255,   259,   263,   264,   272,   273,   286,   287,   300,
     301,   314,   315,   322,   323,   327,   332,   337,   341,   344,
     355,   357,   361,   364,   367,   370,   373,   376,   379,   382,
     383,   397,   398,   405,   408,   409,   411,   415,   417,   418,
     421,   422,   425,   426,   428,   432,   437,   438,   441,   442,
     445,   447,   449,   451,   453,   455,   457,   459,   461,   463,
     465,   467,   469,   471,   472,   476,   478,   479,   482,   483,
     486,   489,   492,   495,   498,   502,   506,   508,   510,   512,
     515,   519,   523,   524,   529,   530,   534,   535,   537,   541,
     543,   544,   546,   550,   552,   553,   557,   558,   560,   564,
     566,   571,   572,   574,   576,   578,   579,   583,   586,   590,
     591,   595,   596,   602,   608,   609,   617,   623,   624,   627,
     629,   631,   633,   637,   639,   641,   643,   647,   648,   650,
     652,   654,   656,   659,   661,   665,   667,   669,   670,   672,
     673,   676,   680,   686,   688,   690,   692,   694,   696,   698,
     700,   702,   704,   706,   708,   710,   712,   714,   716,   720,
     722,   726,   727,   730,   732,   734,   736,   738,   740,   742,
     744,   746,   748,   750,   752,   754,   756,   757,   763,   764,
     767,   768,   772,   773,   776,   779,   782,   785,   786,   793,
     796,   797,   800,   802,   804,   808,   809,   810,   811,   819,
     820,   823,   826,   828,   830,   831,   832,   841,   842,   849,
     851,   854,   856,   859,   860,   861,   868,   869,   870,   877,
     878,   881,   882,   888,   889,   891,   892,   898,   899,   902,
     903,   909,   914,   915,   916,   925,   926,   934,   936,   938,
     940,   942,   944,   947,   952,   958,   959,   964,   969,   974,
     978,   982,   985,   988,   989,   992,   994,   997,  1001,  1003,
    1005,  1007,  1009,  1011,  1014,  1018,  1020,  1022,  1024,  1026,
    1028,  1030,  1032,  1034,  1036,  1038,  1041,  1045,  1047,  1049,
    1051,  1053,  1055,  1057,  1059,  1062,  1066,  1068,  1070,  1072,
    1074,  1076,  1078,  1080,  1082,  1084,  1087,  1091,  1093,  1095,
    1097,  1100,  1103,  1106,  1108,  1110,  1112,  1114,  1117,  1121,
    1125,  1129,  1133,  1137,  1141,  1145,  1149,  1154,  1155,  1157,
    1159,  1161,  1163,  1165,  1168,  1172,  1175,  1180,  1186,  1187,
    1193,  1194,  1195,  1201,  1202,  1210,  1212,  1213,  1215,  1216,
    1221,  1222,  1223,  1227,  1233,  1239,  1240,  1245,  1248,  1251,
    1254,  1257,  1258,  1260,  1261,  1263,  1265,  1269,  1271,  1276,
    1282,  1288,  1289,  1292,  1293,  1294,  1302,  1303,  1313,  1315,
    1319,  1321,  1323,  1324,  1327,  1328,  1332,  1334,  1338,  1339,
    1346,  1348,  1349,  1350,  1356,  1357,  1362,  1364,  1366,  1368,
    1372,  1374,  1378,  1379,  1380,  1386,  1388,  1392,  1394,  1396,
    1397,  1401,  1403,  1407,  1408,  1413,  1415,  1416,  1418,  1421,
    1423,  1427,  1432,  1436,  1440,  1444,  1449,  1454,  1458,  1459,
    1460,  1467,  1468,  1470,  1471,  1473,  1475,  1478,  1480,  1482,
    1483,  1485,  1487,  1490,  1492,  1493,  1497,  1498,  1500,  1502,
    1505,  1507,  1510,  1514,  1518,  1522,  1526,  1530,  1534,  1538,
    1542,  1546,  1550,  1554,  1558,  1562,  1566,  1567,  1574,  1576,
    1578,  1582,  1587,  1592,  1595,  1598,  1601,  1605,  1609,  1614,
    1619,  1621,  1623,  1625,  1627,  1629,  1631,  1633,  1635,  1637,
    1639,  1641,  1643,  1645,  1648,  1650,  1652,  1654,  1656,  1658,
    1660,  1664,  1666,  1668,  1671,  1674,  1682,  1691,  1700,  1709,
    1718,  1721,  1722,  1724,  1729,  1730,  1732,  1735,  1736,  1741,
    1745,  1749,  1753,  1755,  1758,  1760,  1762,  1766,  1769,  1773,
    1776,  1779,  1781,  1785,  1789,  1792,  1796,  1798,  1800,  1802,
    1804,  1806,  1809,  1811,  1813,  1815,  1818,  1822,  1825,  1829,
    1832,  1835,  1839,  1843,  1847,  1848,  1855,  1856,  1863,  1866,
    1868,  1870,  1872,  1874,  1876,  1878,  1880,  1882,  1884,  1886,
    1888,  1891,  1894,  1896,  1899,  1901,  1904,  1908,  1911,  1913,
    1915,  1917,  1919,  1921,  1923,  1925,  1928,  1929,  1931,  1933,
    1939,  1940,  1942,  1945,  1947,  1949,  1951,  1953,  1957,  1961,
    1965,  1969,  1970,  1972,  1973,  1975,  1976,  1978,  1981,  1983,
    1985,  1988,  1991,  1996,  1998,  2002,  2005,  2007,  2010,  2013,
    2016,  2019,  2022,  2024,  2027,  2029,  2031,  2033,  2035,  2037,
    2038,  2041,  2043,  2045,  2047,  2049,  2051,  2052,  2055,  2057,
    2059,  2060,  2062,  2064,  2067,  2070,  2072,  2075,  2078,  2079,
    2081,  2083,  2085,  2089,  2091,  2095,  2096,  2098,  2099,  2101,
    2107,  2108,  2112,  2116,  2118,  2119,  2122,  2125,  2128,  2129,
    2133,  2137,  2144,  2151,  2153,  2155,  2158,  2161,  2164,  2166,
    2169,  2172,  2174,  2176,  2177,  2179,  2181,  2183,  2185,  2186,
    2188,  2190,  2192,  2193,  2195,  2198,  2199,  2201,  2202,  2204,
    2205,  2207,  2209,  2212,  2214,  2217,  2219,  2222,  2225,  2228,
    2232,  2235,  2237,  2239,  2241,  2243,  2247,  2249,  2251,  2253,
    2258,  2261,  2263,  2268,  2269,  2271,  2272,  2275,  2277,  2281,
    2282,  2289,  2290,  2296,  2304,  2305,  2311,  2312,  2318,  2319,
    2325,  2326,  2331,  2332,  2343,  2347,  2352,  2356,  2360,  2368,
    2369,  2373,  2375,  2380,  2381,  2385,  2386,  2389,  2390,  2392,
    2393,  2396,  2399,  2402,  2405,  2407,  2409,  2411,  2415,  2420,
    2421,  2428,  2433,  2434,  2440,  2441,  2448,  2453,  2457,  2459,
    2462,  2464,  2466,  2467,  2473,  2474,  2478,  2481,  2482,  2488,
    2489,  2490,  2497,  2499,  2503,  2505,  2507,  2511,  2514,  2518,
    2521,  2526,  2527,  2534,  2535,  2536,  2545,  2550,  2555,  2559,
    2563,  2566,  2569,  2576,  2582,  2586,  2592,  2594,  2596,  2598,
    2599,  2601,  2602,  2604,  2605,  2607,  2609,  2610,  2613,  2615,
    2616,  2618,  2620,  2622,  2623,  2629,  2633,  2634,  2640,  2644,
    2648,  2649,  2653,  2654,  2657,  2659,  2663,  2664,  2666,  2668,
    2669,  2672,  2674,  2678,  2679,  2685,  2686,  2688,  2690,  2691,
    2698,  2699,  2701,  2703,  2706,  2708,  2710,  2712,  2713,  2719,
    2722,  2723,  2729,  2730,  2732,  2734,  2737,  2739,  2741,  2743,
    2745,  2747,  2750,  2751,  2757,  2758,  2760,  2762,  2763,  2768,
    2773,  2777,  2783,  2785,  2789,  2793,  2794,  2801,  2803,  2805,
    2807,  2811,  2814,  2818,  2820,  2822,  2823,  2830,  2832,  2834,
    2836,  2840,  2844,  2849,  2850,  2857,  2858,  2861,  2862,  2867,
    2868,  2871,  2873,  2876,  2881,  2884,  2888,  2891,  2895,  2896,
    2900,  2901,  2902,  2909,  2912,  2914,  2916,  2919,  2922,  2931,
    2936,  2937,  2939,  2942,  2944,  2946,  2948,  2950,  2951,  2954,
    2959,  2963,  2965,  2967,  2971,  2976,  2977,  2978,  2979,  2982,
    2985,  2987,  2989,  2990,  2993,  2997,  3001,  3005,  3008,  3012,
    3017,  3021,  3026,  3030,  3035,  3037,  3041,  3046,  3050,  3054,
    3061,  3063,  3069,  3076,  3082,  3090,  3097,  3106,  3112,  3119,
    3124,  3129,  3135,  3139,  3144,  3146,  3150,  3154,  3158,  3162,
    3166,  3170,  3176,  3182,  3186,  3190,  3194,  3198,  3202,  3206,
    3208,  3210,  3212,  3214,  3216,  3218,  3220,  3222,  3224,  3226,
    3228,  3230,  3232,  3234,  3236,  3238,  3240,  3242,  3244,  3246,
    3248,  3250,  3254,  3256,  3258,  3260,  3262,  3266,  3269,  3272,
    3275,  3278,  3282,  3286,  3292,  3299,  3304,  3309,  3317,  3320,
    3327,  3333,  3340,  3347,  3352,  3357,  3363,  3368,  3375,  3378,
    3383,  3388,  3393,  3404,  3411,  3420,  3427,  3432,  3437,  3444,
    3449,  3454,  3459,  3466,  3471,  3479,  3487,  3495,  3502,  3509,
    3516,  3523,  3527,  3532,  3539,  3548,  3551,  3554,  3559,  3568,
    3577,  3584,  3591,  3594,  3599,  3606,  3613,  3622,  3631,  3638,
    3647,  3654,  3657,  3662,  3671,  3680,  3683,  3686,  3689,  3694,
    3699,  3704,  3709,  3713,  3722,  3727,  3734,  3739,  3744,  3749,
    3756,  3765,  3772,  3777,  3784,  3786,  3793,  3798,  3803,  3808,
    3813,  3818,  3825,  3830,  3831,  3837,  3844,  3847,  3851,  3852,
    3857,  3858,  3862,  3863,  3865,  3867,  3871,  3876,  3881,  3887,
    3892,  3897,  3902,  3908,  3913,  3914,  3915,  3923,  3928,  3934,
    3939,  3945,  3950,  3955,  3960,  3965,  3970,  3976,  3977,  3986,
    3987,  3991,  3995,  3997,  4002,  4003,  4005,  4006,  4009,  4010,
    4012,  4013,  4017,  4020,  4024,  4027,  4029,  4032,  4034,  4037,
    4039,  4041,  4043,  4046,  4047,  4049,  4051,  4055,  4057,  4061,
    4063,  4067,  4068,  4070,  4071,  4074,  4079,  4085,  4087,  4089,
    4091,  4093,  4098,  4100,  4104,  4108,  4112,  4113,  4120,  4121,
    4128,  4129,  4138,  4143,  4144,  4153,  4154,  4165,  4172,  4173,
    4182,  4183,  4194,  4201,  4203,  4206,  4209,  4210,  4215,  4219,
    4225,  4228,  4229,  4230,  4238,  4240,  4241,  4242,  4249,  4250,
    4254,  4255,  4256,  4262,  4263,  4265,  4266,  4268,  4269,  4272,
    4276,  4280,  4282,  4284,  4285,  4293,  4294,  4302,  4304,  4307,
    4308,  4309,  4312,  4313,  4316,  4317,  4319,  4321,  4323,  4325,
    4329,  4331,  4335,  4337,  4339,  4341,  4343,  4345,  4347,  4349,
    4351,  4353,  4355,  4357,  4359,  4361,  4363,  4365,  4367,  4369,
    4371,  4373,  4375,  4377,  4379,  4381,  4383,  4385,  4386,  4388,
    4390,  4391,  4394,  4395,  4397,  4398,  4399,  4403,  4404,  4405,
    4409,  4412,  4413,  4414,  4419,  4424,  4427,  4428,  4430,  4432,
    4436,  4440,  4442,  4445,  4446,  4448,  4449,  4454,  4459,  4462,
    4463,  4465,  4467,  4468,  4470,  4471,  4473,  4476,  4478,  4482,
    4486,  4488,  4490,  4492,  4494,  4496,  4497,  4500,  4502,  4504,
    4506,  4508,  4510,  4512,  4514,  4516,  4518,  4520,  4522,  4524,
    4526,  4528,  4530,  4532,  4534,  4536,  4538,  4540,  4542,  4544,
    4546,  4547,  4548,  4555,  4556,  4558,  4562,  4564,  4568,  4569,
    4572,  4576,  4578,  4581,  4583,  4584,  4588,  4589,  4590,  4598,
    4601,  4603,  4604,  4608,  4609,  4617,  4618,  4625,  4630,  4637,
    4642,  4647,  4652,  4653,  4660,  4665,  4670,  4676,  4683,  4688,
    4690,  4694,  4696,  4698,  4702,  4704,  4705,  4708,  4709,  4711,
    4712,  4713,  4722,  4723,  4724,  4731,  4732,  4734,  4736,  4738,
    4740,  4742,  4745,  4747,  4749,  4751,  4755,  4760,  4761,  4765,
    4769,  4771,  4774,  4777,  4778,  4782,  4783,  4789,  4793,  4795,
    4799,  4801,  4805,  4807,  4809,  4810,  4812,  4813,  4818,  4819,
    4821,  4825,  4827,  4829,  4831,  4832,  4833,  4840,  4841,  4842,
    4854,  4858,  4860,  4864,  4868,  4870,  4874,  4875,  4877,  4878,
    4883,  4884,  4891,  4892,  4898,  4899,  4906,  4908,  4912,  4915,
    4920,  4921,  4924,  4925,  4928,  4930,  4932,  4934,  4935,  4940,
    4941,  4943,  4944,  4946,  4948,  4952,  4954,  4956,  4959,  4962,
    4965,  4967,  4969,  4971,  4973,  4974,  4978,  4979,  4983,  4986,
    4991,  4996,  5000,  5005,  5010,  5012,  5016,  5020,  5027,  5030,
    5033,  5034,  5041,  5042,  5049,  5055,  5058,  5060,  5062,  5064,
    5070,  5076,  5079,  5082,  5084,  5089,  5093,  5096,  5100,  5103,
    5106,  5108,  5112,  5117,  5121,  5125,  5128,  5131,  5135,  5139,
    5143,  5147,  5151,  5155,  5159,  5163,  5165,  5167,  5169,  5171,
    5173,  5174,  5176,  5177,  5180,  5181,  5183,  5185,  5187,  5188,
    5191,  5192,  5195,  5196,  5199,  5202,  5203,  5208,  5209,  5214,
    5216,  5218,  5219,  5221,  5223,  5224,  5226,  5228,  5229,  5234,
    5235,  5236,  5242,  5244,  5245,  5249,  5253,  5255,  5258,  5261,
    5264,  5267,  5270,  5273,  5276,  5278,  5280,  5282,  5284,  5286,
    5288,  5290,  5292,  5293,  5295,  5296,  5300,  5304,  5306,  5307,
    5311,  5313,  5316,  5317,  5319,  5320,  5324,  5328,  5331,  5334,
    5338,  5339,  5341,  5343,  5346,  5347,  5348,  5349,  5350,  5372,
    5374,  5376,  5377,  5379,  5380,  5382,  5384,  5385,  5387,  5389,
    5390,  5393,  5396,  5398,  5402,  5407,  5411,  5415,  5416,  5419,
    5422,  5424,  5428,  5432,  5433,  5438,  5439,  5443,  5445,  5447,
    5448,  5452,  5455,  5459,  5461,  5463,  5466,  5467,  5470,  5474,
    5476,  5482,  5484,  5486,  5489,  5492,  5494,  5496,  5498,  5500,
    5502,  5505,  5508,  5510,  5512,  5514,  5516,  5518,  5520,  5522,
    5525,  5528,  5531,  5534,  5537,  5539,  5541,  5543,  5545,  5547,
    5549,  5551,  5555,  5561,  5563,  5565,  5567,  5569,  5571,  5575,
    5580,  5586,  5588,  5594,  5598,  5601,  5603,  5607,  5610,  5613,
    5618,  5620,  5622,  5624,  5626,  5628,  5630,  5632,  5634,  5636,
    5638,  5640,  5642,  5644,  5646,  5650,  5653,  5655,  5657,  5659,
    5661,  5663,  5665,  5667,  5669,  5671,  5673,  5675,  5677,  5679,
    5681,  5683,  5685,  5687,  5689,  5691,  5693,  5695,  5697,  5699,
    5701,  5703,  5705,  5707,  5709,  5711,  5713,  5715,  5717,  5719,
    5721,  5723,  5725,  5727,  5729,  5731,  5733,  5735,  5737,  5739,
    5741,  5743,  5745,  5747,  5749,  5751,  5753,  5755,  5757,  5759,
    5761,  5763,  5765,  5767,  5769,  5771,  5773,  5775,  5777,  5779,
    5781,  5783,  5785,  5787,  5789,  5791,  5793,  5795,  5797,  5799,
    5801,  5803,  5805,  5807,  5809,  5811,  5813,  5815,  5817,  5819,
    5821,  5823,  5825,  5827,  5829,  5831,  5833,  5835,  5837,  5839,
    5841,  5843,  5845,  5847,  5849,  5851,  5853,  5855,  5857,  5859,
    5861,  5863,  5865,  5867,  5869,  5871,  5873,  5875,  5877,  5879,
    5881,  5883,  5885,  5887,  5889,  5891,  5893,  5895,  5897,  5899,
    5901,  5903,  5905,  5907,  5909,  5911,  5913,  5915,  5917,  5919,
    5921,  5923,  5925,  5927,  5929,  5931,  5933,  5935,  5937,  5939,
    5941,  5943,  5945,  5947,  5949,  5951,  5953,  5955,  5957,  5959,
    5961,  5963,  5965,  5967,  5969,  5971,  5973,  5975,  5977,  5979,
    5981,  5983,  5985,  5987,  5989,  5991,  5993,  5995,  5997,  5999,
    6001,  6003,  6005,  6007,  6009,  6011,  6013,  6015,  6017,  6019,
    6021,  6023,  6025,  6027,  6029,  6031,  6033,  6035,  6037,  6039,
    6041,  6043,  6045,  6047,  6049,  6051,  6053,  6055,  6057,  6059,
    6061,  6063,  6065,  6067,  6069,  6071,  6073,  6075,  6077,  6079,
    6081,  6083,  6085,  6087,  6089,  6091,  6093,  6095,  6097,  6099,
    6101,  6103,  6105,  6107,  6109,  6111,  6113,  6115,  6117,  6119,
    6121,  6123,  6125,  6127,  6129,  6131,  6133,  6135,  6137,  6139,
    6141,  6143,  6145,  6147,  6149,  6151,  6153,  6155,  6157,  6159,
    6161,  6163,  6165,  6167,  6169,  6171,  6173,  6175,  6177,  6179,
    6181,  6183,  6185,  6187,  6189,  6191,  6193,  6195,  6197,  6199,
    6201,  6203,  6205,  6207,  6209,  6211,  6213,  6215,  6217,  6219,
    6221,  6223,  6225,  6227,  6229,  6231,  6233,  6235,  6237,  6239,
    6241,  6243,  6245,  6247,  6249,  6251,  6253,  6255,  6257,  6259,
    6261,  6263,  6265,  6267,  6269,  6271,  6273,  6275,  6277,  6279,
    6281,  6283,  6285,  6287,  6289,  6291,  6293,  6295,  6297,  6299,
    6301,  6303,  6305,  6307,  6309,  6311,  6312,  6317,  6318,  6320,
    6322,  6326,  6327,  6330,  6332,  6334,  6336,  6338,  6339,  6341,
    6342,  6344,  6346,  6348,  6349,  6352,  6355,  6358,  6360,  6363,
    6368,  6374,  6379,  6386,  6389,  6393,  6397,  6401,  6407,  6409,
    6413,  6417,  6420,  6423,  6426,  6428,  6430,  6435,  6440,  6442,
    6444,  6446,  6448,  6450,  6451,  6456,  6458,  6460,  6462,  6466,
    6470,  6472,  6474,  6477,  6480,  6481,  6485,  6490,  6494,  6495,
    6503,  6505,  6508,  6510,  6512,  6514,  6516,  6518,  6520,  6521,
    6527,  6529,  6531,  6533,  6535,  6537,  6541,  6548,  6555,  6562,
    6570,  6576,  6580,  6589,  6598,  6607,  6614,  6615,  6617,  6619,
    6622,  6623,  6625,  6627,  6631,  6632,  6636,  6637,  6641,  6642,
    6646,  6647,  6651,  6653,  6655,  6657,  6659,  6661,  6663,  6665,
    6667,  6669,  6671,  6673,  6676,  6679,  6681,  6685,  6688,  6691,
    6694,  6697,  6700,  6703,  6706,  6709,  6711,  6713,  6716,  6717,
    6719,  6723,  6725,  6728,  6731,  6734,  6736,  6740,  6744,  6746,
    6748,  6752,  6754,  6758,  6763,  6769,  6774,  6781,  6783,  6784,
    6788,  6792,  6794,  6796,  6797,  6800,  6803,  6806,  6809,  6810,
    6813,  6814,  6818,  6821,  6823,  6826,  6829,  6832,  6835,  6838,
    6839,  6843,  6844,  6846,  6847,  6851,  6854,  6855,  6857,  6860,
    6861,  6863,  6868,  6873,  6879,  6882,  6886,  6887,  6889,  6890,
    6895,  6896,  6898,  6900,  6901,  6903,  6904,  6907,  6910,  6912,
    6913,  6915,  6917,  6920,  6924,  6927,  6928,  6935,  6939,  6940,
    6941,  6942,  6944,  6947,  6949,  6951,  6953,  6955,  6957,  6959,
    6961,  6963,  6965,  6968,  6971,  6975,  6977,  6979,  6981,  6983,
    6985,  6987,  6989,  6991,  6993,  6995,  6997,  6999,  7001,  7002,
    7006,  7008,  7011,  7013,  7016,  7020,  7024,  7028,  7029,  7033,
    7037,  7038,  7046,  7047,  7051,  7053,  7057,  7058,  7062,  7065,
    7070,  7071,  7075,  7080,  7085,  7086,  7087,  7088,  7105,  7114,
    7122,  7123,  7124,  7125,  7126,  7127,  7143,  7144,  7145,  7146,
    7147,  7160,  7165,  7170,  7174,  7179,  7183,  7186,  7188,  7192,
    7198,  7200,  7202,  7203,  7205,  7207,  7208,  7211,  7212,  7213,
    7217,  7218,  7221,  7227
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     614,     0,    -1,   149,    -1,    -1,   617,   615,   609,   616,
      -1,   617,   149,    -1,    -1,   149,    -1,   618,    -1,  1426,
      -1,   960,    -1,  1017,    -1,  1019,    -1,   667,    -1,   630,
      -1,  1020,    -1,  1009,    -1,  1432,    -1,   637,    -1,   619,
      -1,  1256,    -1,  1288,    -1,  1208,    -1,  1210,    -1,   623,
      -1,  1294,    -1,  1400,    -1,  1391,    -1,   628,    -1,  1220,
      -1,  1496,    -1,  1313,    -1,  1316,    -1,  1383,    -1,  1025,
      -1,  1033,    -1,   810,    -1,  1040,    -1,   621,    -1,  1309,
      -1,  1435,    -1,  1028,    -1,  1012,    -1,  1223,    -1,  1303,
      -1,   702,    -1,  1398,    -1,  1433,    -1,  1434,    -1,  1052,
      -1,  1366,    -1,   695,    -1,  1274,    -1,   998,    -1,  1001,
      -1,  1267,    -1,  1497,    -1,  1389,    -1,  1248,    -1,  1315,
      -1,  1488,    -1,   620,   381,  1360,    -1,   116,    -1,   137,
      -1,   381,  1360,   183,   622,    -1,  1357,    -1,   610,  1362,
      -1,    -1,   162,  1360,   624,   625,    -1,    -1,   562,   626,
      -1,   626,   605,   627,    -1,   627,    -1,   610,  1362,    -1,
      -1,   201,   629,  1362,    -1,    -1,    56,   287,   530,   631,
     632,    -1,   633,    -1,   632,   605,   633,    -1,   274,   153,
    1357,    -1,   288,   153,  1357,    -1,   277,   153,  1357,    -1,
     278,   153,  1188,    -1,   273,   153,  1188,    -1,   285,   153,
    1188,    -1,   281,   153,  1357,    -1,   280,   153,  1357,    -1,
     282,   153,  1357,    -1,   283,   153,  1357,    -1,   284,   153,
    1357,    -1,   286,   153,  1188,    -1,   289,   153,  1345,    -1,
     215,   153,   603,   634,   604,    -1,   636,    -1,    -1,   635,
      -1,   634,   605,   635,    -1,  1188,    -1,   275,   153,  1357,
      -1,   276,   153,  1190,    -1,   411,   153,  1357,    -1,   412,
     153,  1188,    -1,    -1,    95,   861,   513,   864,  1353,   638,
     799,    -1,    -1,    95,   938,   218,  1360,   942,   348,  1353,
     639,   603,   955,   604,   943,    -1,    -1,    95,   939,   218,
    1360,   941,   348,  1353,   640,   603,   955,   604,   944,    -1,
      -1,    95,   940,   218,  1360,   941,   348,  1353,   641,   603,
     955,   604,   945,    -1,    -1,    95,   103,   864,  1360,   642,
     858,    -1,    -1,    95,   643,  1454,    -1,    95,   559,   660,
    1416,    -1,    95,   264,   195,   762,    -1,    95,   511,   759,
      -1,    95,   644,    -1,   454,  1362,   180,   106,   585,  1362,
     353,   603,   645,   604,    -1,   646,    -1,   645,   605,   646,
      -1,   559,  1357,    -1,   204,  1357,    -1,   103,  1357,    -1,
     363,  1357,    -1,   372,  1357,    -1,   470,  1357,    -1,   378,
    1188,    -1,    -1,  1069,   160,   864,   661,   648,   348,   443,
     649,   654,   651,   656,   136,   657,    -1,    -1,   161,  1073,
    1160,   650,   652,   653,    -1,    22,  1073,    -1,    -1,   145,
      -1,   130,   348,   466,    -1,   130,    -1,    -1,   489,  1073,
      -1,    -1,   148,  1073,    -1,    -1,   655,    -1,   348,    77,
     382,    -1,   348,    77,   337,   382,    -1,    -1,    73,  1357,
      -1,    -1,   658,   659,    -1,   708,    -1,   710,    -1,   706,
      -1,   727,    -1,   745,    -1,   747,    -1,   742,    -1,   712,
      -1,   714,    -1,   715,    -1,   716,    -1,   717,    -1,   719,
      -1,    -1,  1360,   611,  1360,    -1,  1360,    -1,    -1,   662,
     664,    -1,    -1,   663,   665,    -1,    73,  1357,    -1,   243,
     485,    -1,   339,   485,    -1,    88,   485,    -1,   397,   485,
     106,    -1,   314,   485,   106,    -1,   666,    -1,   664,    -1,
     128,    -1,  1079,   128,    -1,   485,   447,   121,    -1,   485,
     447,   230,    -1,    -1,    49,   661,   668,   669,    -1,    -1,
     603,   670,   604,    -1,    -1,   671,    -1,   671,   605,  1073,
      -1,  1073,    -1,    -1,   673,    -1,   673,   605,   675,    -1,
     675,    -1,    -1,  1360,   674,   910,    -1,    -1,   677,    -1,
     677,   605,   678,    -1,   678,    -1,   679,   674,  1360,   910,
      -1,    -1,   231,    -1,   362,    -1,   222,    -1,    -1,   680,
     705,   609,    -1,   705,   609,    -1,   681,   705,   609,    -1,
      -1,   682,   683,   609,    -1,    -1,   119,   703,   684,   910,
     704,    -1,   119,  1360,    81,   181,   691,    -1,    -1,   119,
     688,   198,   181,   685,   689,   705,    -1,   119,  1360,   100,
     181,   686,    -1,    -1,   687,  1052,    -1,   164,    -1,    90,
      -1,   690,    -1,   689,   605,   690,    -1,   694,    -1,  1188,
      -1,   692,    -1,   477,   693,  1358,    -1,    -1,   567,    -1,
     691,    -1,  1360,    -1,   478,    -1,  1079,   182,    -1,   476,
      -1,   463,   696,   698,    -1,  1360,    -1,   692,    -1,    -1,
     696,    -1,    -1,   456,   699,    -1,   701,   153,   700,    -1,
     699,   605,   701,   153,   700,    -1,  1344,    -1,  1100,    -1,
    1349,    -1,    63,    -1,   498,    -1,    85,    -1,    87,    -1,
      86,    -1,    54,    -1,   444,    -1,   515,    -1,    72,    -1,
     101,    -1,   305,    -1,   322,    -1,   426,   697,   698,    -1,
    1360,    -1,   703,   605,  1360,    -1,    -1,   120,  1073,    -1,
     708,    -1,   710,    -1,   706,    -1,   727,    -1,   745,    -1,
     747,    -1,   742,    -1,   712,    -1,   714,    -1,   715,    -1,
     716,    -1,   717,    -1,   719,    -1,    -1,   213,   707,   722,
     147,   213,    -1,    -1,   709,   618,    -1,    -1,   432,   711,
    1073,    -1,    -1,   713,   751,    -1,   248,  1361,    -1,   237,
    1361,    -1,   351,  1360,    -1,    -1,   172,   720,  1360,   228,
     718,   721,    -1,    65,  1360,    -1,    -1,   333,   183,    -1,
     183,    -1,  1360,    -1,   721,   605,  1360,    -1,    -1,    -1,
      -1,   723,  1073,   522,   724,   681,   725,   726,    -1,    -1,
     144,   722,    -1,   143,   681,    -1,   728,    -1,   731,    -1,
      -1,    -1,    52,   729,  1073,   730,   733,   741,   147,    52,
      -1,    -1,    52,   732,   734,   741,   147,    52,    -1,   735,
      -1,   733,   735,    -1,   738,    -1,   734,   738,    -1,    -1,
      -1,   578,   736,  1073,   737,   522,   681,    -1,    -1,    -1,
     578,   739,  1073,   740,   522,   681,    -1,    -1,   143,   681,
      -1,    -1,  1361,   612,   743,   751,   744,    -1,    -1,  1361,
      -1,    -1,  1361,   612,   746,   749,   744,    -1,    -1,   748,
     749,    -1,    -1,    30,   750,   682,   680,   147,    -1,   270,
     681,   147,   270,    -1,    -1,    -1,   580,   752,  1073,   136,
     753,   681,   147,   580,    -1,    -1,   421,   681,   555,   754,
    1073,   147,   421,    -1,    29,    -1,     8,    -1,   224,    -1,
     556,    -1,   124,    -1,   784,   786,    -1,   784,    56,   781,
     765,    -1,   784,     6,   781,   760,   769,    -1,    -1,   561,
     264,   195,  1360,    -1,   784,     6,   781,   772,    -1,   784,
     137,   781,   772,    -1,   785,   764,   775,    -1,   785,   764,
     778,    -1,     6,   782,    -1,     6,   783,    -1,    -1,   766,
     767,    -1,   768,    -1,   767,   768,    -1,   767,   605,   768,
      -1,   787,    -1,   788,    -1,   789,    -1,   770,    -1,   771,
      -1,   770,   771,    -1,   770,   605,   771,    -1,   787,    -1,
     788,    -1,   789,    -1,   790,    -1,   793,    -1,   795,    -1,
     797,    -1,   794,    -1,   773,    -1,   774,    -1,   773,   774,
      -1,   773,   605,   774,    -1,   787,    -1,   788,    -1,   789,
      -1,   795,    -1,   797,    -1,   776,    -1,   777,    -1,   776,
     777,    -1,   776,   605,   777,    -1,   787,    -1,   791,    -1,
     792,    -1,   793,    -1,   795,    -1,   797,    -1,   794,    -1,
     779,    -1,   780,    -1,   779,   780,    -1,   779,   605,   780,
      -1,   787,    -1,   795,    -1,   797,    -1,   105,  1357,    -1,
     545,  1357,    -1,   404,  1357,    -1,  1360,    -1,  1360,    -1,
     398,    -1,   400,    -1,   337,     4,    -1,   220,  1240,   798,
      -1,    24,  1240,   798,    -1,   294,  1240,   798,    -1,   167,
    1240,   798,    -1,   546,  1240,   798,    -1,   405,  1240,   798,
      -1,   334,  1240,  1189,    -1,    73,  1240,  1357,    -1,  1281,
     151,  1240,   872,    -1,    -1,   797,    -1,   575,    -1,   340,
      -1,  1189,    -1,   210,    -1,   603,   800,    -1,   865,   805,
     802,    -1,   253,  1353,    -1,   603,   253,  1353,   604,    -1,
     878,   604,   865,   805,   802,    -1,    -1,   805,   854,   604,
     801,  1439,    -1,    -1,    -1,  1324,   857,   854,   803,  1436,
      -1,    -1,  1324,   857,   603,   854,   604,   804,  1439,    -1,
     806,    -1,    -1,   807,    -1,    -1,   371,   809,   808,   812,
      -1,    -1,    -1,   371,   811,   812,    -1,    46,   813,   822,
     823,   830,    -1,   815,   241,   603,   816,   604,    -1,    -1,
     815,   199,   814,   820,    -1,   396,   820,    -1,   396,   819,
      -1,   258,   820,    -1,   258,   819,    -1,    -1,   255,    -1,
      -1,   817,    -1,   818,    -1,   817,   605,   818,    -1,  1360,
      -1,    70,   603,   816,   604,    -1,   603,  1069,   828,  1070,
     604,    -1,   603,  1069,   828,  1070,   604,    -1,    -1,   370,
    1189,    -1,    -1,    -1,   502,    46,   815,   199,   821,   824,
     829,    -1,    -1,   502,    46,   815,   241,   603,   826,   604,
     825,   829,    -1,   827,    -1,   826,   605,   827,    -1,  1360,
      -1,  1076,    -1,    -1,   501,  1189,    -1,    -1,   603,   831,
     604,    -1,   832,    -1,   831,   605,   832,    -1,    -1,   371,
     833,   834,   835,   851,   846,    -1,  1360,    -1,    -1,    -1,
     566,   250,   521,   836,   838,    -1,    -1,   566,   231,   837,
     839,    -1,   298,    -1,   841,    -1,   841,    -1,   603,   840,
     604,    -1,   841,    -1,   840,   605,   841,    -1,    -1,    -1,
     603,   842,   844,   843,   604,    -1,   845,    -1,   844,   605,
     845,    -1,   298,    -1,  1076,    -1,    -1,   603,   847,   604,
      -1,   848,    -1,   847,   605,   848,    -1,    -1,   502,   849,
     850,   851,    -1,  1362,    -1,    -1,   852,    -1,   852,   853,
      -1,   853,    -1,   511,  1240,  1362,    -1,  1281,   151,  1240,
     872,    -1,   334,  1240,  1189,    -1,   293,  1240,  1191,    -1,
     311,  1240,  1191,    -1,   106,   129,  1240,  1357,    -1,   218,
     129,  1240,  1357,    -1,    73,  1240,  1357,    -1,    -1,    -1,
     448,   855,  1063,  1067,   856,   876,    -1,    -1,    18,    -1,
      -1,   859,    -1,   860,    -1,   859,   860,    -1,   871,    -1,
     870,    -1,    -1,   862,    -1,   863,    -1,   863,   862,    -1,
     516,    -1,    -1,   213,  1079,   163,    -1,    -1,   867,    -1,
     868,    -1,   868,   866,    -1,   868,    -1,   868,   867,    -1,
     868,   605,   867,    -1,   151,  1240,   872,    -1,   293,  1240,
    1190,    -1,   311,  1240,  1190,    -1,    26,  1240,  1188,    -1,
     372,  1240,  1357,    -1,    73,  1240,  1357,    -1,    25,  1240,
    1190,    -1,   364,  1240,  1188,    -1,   364,  1240,   120,    -1,
      60,  1240,  1188,    -1,   514,  1240,  1188,    -1,   123,  1240,
    1188,    -1,   439,  1240,   874,    -1,    -1,   550,  1240,   869,
     603,  1302,   604,    -1,   870,    -1,   871,    -1,   225,  1240,
     875,    -1,   106,   129,  1240,  1357,    -1,   218,   129,  1240,
    1357,    -1,   511,  1360,    -1,   495,   132,    -1,   495,   303,
      -1,    82,  1240,  1357,    -1,   240,  1240,  1188,    -1,   921,
     912,  1240,   914,    -1,   921,    68,  1240,   920,    -1,  1362,
      -1,  1362,    -1,   120,    -1,   175,    -1,   141,    -1,    78,
      -1,   406,    -1,    76,    -1,    79,    -1,   339,    -1,   174,
      -1,   244,    -1,  1183,    -1,  1062,  1066,    -1,   497,    -1,
     401,    -1,   118,    -1,   229,    -1,   879,    -1,   880,    -1,
     879,   605,   880,    -1,   881,    -1,   882,    -1,   887,   883,
      -1,   887,   927,    -1,   933,   957,   942,   603,   955,   604,
     943,    -1,   939,   936,   957,   941,   603,   955,   604,   944,
      -1,   940,   936,   957,   941,   603,   955,   604,   945,    -1,
     885,   934,   957,   942,   603,   955,   604,   943,    -1,   885,
     180,   241,   957,   603,   955,   604,   927,    -1,   885,   884,
      -1,    -1,   884,    -1,    61,   603,  1073,   604,    -1,    -1,
     886,    -1,    84,   957,    -1,    -1,  1352,   888,   889,   907,
      -1,   897,   905,   901,    -1,   898,   906,   901,    -1,   177,
     899,   901,    -1,    38,    -1,    38,   904,    -1,    43,    -1,
      42,    -1,   893,   904,   924,    -1,   893,   924,    -1,   894,
     904,   925,    -1,   894,   925,    -1,    33,   904,    -1,    33,
      -1,   895,   904,   924,    -1,   896,   904,   925,    -1,   568,
     904,    -1,   592,   905,   901,    -1,   110,    -1,   526,    -1,
     523,    -1,   107,    -1,   527,    -1,    40,   905,    -1,   892,
      -1,   299,    -1,   266,    -1,   269,   568,    -1,   269,   895,
     924,    -1,   529,   924,    -1,   520,   905,   924,    -1,   301,
     924,    -1,   267,   924,    -1,   118,   899,   901,    -1,   344,
     899,   901,    -1,   175,   899,   901,    -1,    -1,   152,   890,
     603,   959,   604,   924,    -1,    -1,   456,   891,   603,   959,
     604,   924,    -1,   269,   924,    -1,   452,    -1,   190,    -1,
     189,    -1,   376,    -1,   319,    -1,   257,    -1,   318,    -1,
     377,    -1,   320,    -1,    59,    -1,   328,    -1,   325,    59,
      -1,   893,   572,    -1,   569,    -1,   325,   569,    -1,   345,
      -1,   328,   569,    -1,   325,    59,   572,    -1,   328,   572,
      -1,   229,    -1,   528,    -1,   468,    -1,   300,    -1,    32,
      -1,   401,    -1,   135,    -1,   135,   380,    -1,    -1,   904,
      -1,   900,    -1,   603,   343,   605,   343,   604,    -1,    -1,
     902,    -1,   902,   903,    -1,   903,    -1,   464,    -1,   554,
      -1,   593,    -1,   603,   268,   604,    -1,   603,   541,   604,
      -1,   603,   117,   604,    -1,   603,   343,   604,    -1,    -1,
     904,    -1,    -1,   900,    -1,    -1,   908,    -1,   908,   909,
      -1,   909,    -1,   342,    -1,  1079,   342,    -1,   120,   911,
      -1,   348,   556,   338,  1072,    -1,    25,    -1,   452,   120,
     567,    -1,   926,   241,    -1,   551,    -1,   551,   241,    -1,
      73,  1357,    -1,    68,   918,    -1,   889,   919,    -1,   338,
    1072,    -1,  1343,    -1,    59,   456,    -1,    58,    -1,  1362,
      -1,    33,    -1,   913,    -1,   120,    -1,    -1,   912,   914,
      -1,  1362,    -1,    33,    -1,   916,    -1,   120,    -1,  1362,
      -1,    -1,    68,   920,    -1,   918,    -1,   120,    -1,    -1,
     120,    -1,    20,    -1,    33,    20,    -1,    20,    33,    -1,
     548,    -1,   548,    33,    -1,    33,   548,    -1,    -1,   922,
      -1,   923,    -1,    47,    -1,   912,   913,   925,    -1,    33,
      -1,    33,   912,   913,    -1,    -1,    33,    -1,    -1,   384,
      -1,   407,  1353,   928,   930,   931,    -1,    -1,   603,   929,
     604,    -1,   929,   605,  1360,    -1,  1360,    -1,    -1,   290,
     184,    -1,   290,   368,    -1,   290,   465,    -1,    -1,   348,
     556,   932,    -1,   348,   124,   932,    -1,   348,   556,   932,
     348,   124,   932,    -1,   348,   124,   932,   348,   556,   932,
      -1,   429,    -1,    50,    -1,   456,   342,    -1,   339,     5,
      -1,   456,   120,    -1,   935,    -1,   384,   241,    -1,   551,
     936,    -1,   241,    -1,   218,    -1,    -1,   935,    -1,   239,
      -1,   218,    -1,   217,    -1,    -1,   551,    -1,   185,    -1,
     474,    -1,    -1,   941,    -1,   941,   949,    -1,    -1,   946,
      -1,    -1,   948,    -1,    -1,   947,    -1,   951,    -1,   946,
     951,    -1,   952,    -1,   947,   952,    -1,   953,    -1,   948,
     953,    -1,   562,   954,    -1,   539,   954,    -1,   240,  1240,
    1188,    -1,    73,  1357,    -1,   950,    -1,   949,    -1,   950,
      -1,   950,    -1,   581,   367,  1356,    -1,    45,    -1,   441,
      -1,   199,    -1,   955,   605,   956,  1181,    -1,   956,  1181,
      -1,  1360,    -1,  1360,   603,   343,   604,    -1,    -1,  1352,
      -1,    -1,   611,  1360,    -1,  1341,    -1,   959,   605,  1341,
      -1,    -1,    13,   994,   513,  1353,   961,   972,    -1,    -1,
      13,   103,   971,   962,   859,    -1,    13,   103,  1360,   557,
     106,   129,   324,    -1,    -1,    13,   386,   661,   963,   662,
      -1,    -1,    13,   186,   661,   964,   662,    -1,    -1,    13,
    1462,  1457,   965,  1464,    -1,    -1,    13,  1457,   966,  1464,
      -1,    -1,    13,  1457,   160,   661,   967,   968,   969,   651,
     656,   970,    -1,    13,   511,   761,    -1,    13,   264,   195,
     763,    -1,    13,   511,   758,    -1,    13,   511,   757,    -1,
      13,   454,  1362,   353,   603,   645,   604,    -1,    -1,   348,
     443,   649,    -1,   655,    -1,   348,   443,   649,   655,    -1,
      -1,   417,   530,   661,    -1,    -1,   136,   657,    -1,    -1,
    1360,    -1,    -1,   131,   511,    -1,   216,   511,    -1,   987,
     806,    -1,   987,   976,    -1,   976,    -1,   807,    -1,   978,
      -1,   137,   371,   985,    -1,   402,   371,  1027,   977,    -1,
      -1,   352,   371,  1027,   977,   973,  1027,    -1,    14,   371,
    1027,   977,    -1,    -1,    61,   371,   977,   974,  1022,    -1,
      -1,   419,   371,  1027,   977,   975,  1014,    -1,    66,   371,
    1027,  1189,    -1,   537,   371,   977,    -1,   981,    -1,   416,
     369,    -1,    12,    -1,   985,    -1,    -1,     6,   371,  1027,
     979,   980,    -1,    -1,   603,   831,   604,    -1,   370,  1189,
      -1,    -1,   418,   371,  1027,   982,   983,    -1,    -1,    -1,
     985,   984,   228,   603,   831,   604,    -1,   986,    -1,   985,
     605,   986,    -1,  1360,    -1,   989,    -1,   987,   605,   989,
      -1,     6,   993,    -1,   988,   881,   996,    -1,     6,   882,
      -1,   988,   603,   878,   604,    -1,    -1,    56,   993,  1352,
     990,   887,   996,    -1,    -1,    -1,   315,   993,  1352,   991,
     889,   907,   992,   996,    -1,   137,   993,  1352,   995,    -1,
     137,   180,   241,   957,    -1,   137,   384,   241,    -1,   137,
     935,  1352,    -1,   130,   239,    -1,   145,   239,    -1,    13,
     993,  1352,   456,   120,  1343,    -1,    13,   993,  1352,   137,
     120,    -1,   417,   997,  1353,    -1,    92,   530,   912,   914,
     919,    -1,   866,    -1,   179,    -1,  1174,    -1,    -1,    71,
      -1,    -1,   214,    -1,    -1,   429,    -1,    50,    -1,    -1,
       8,  1360,    -1,   174,    -1,    -1,   530,    -1,   153,    -1,
      18,    -1,    -1,   490,   466,  1003,   999,  1007,    -1,   494,
     466,  1003,    -1,    -1,   466,   490,  1003,  1000,  1007,    -1,
     466,   494,  1003,    -1,   490,   532,  1002,    -1,    -1,   581,
      83,   469,    -1,    -1,  1004,  1005,    -1,  1006,    -1,  1005,
     605,  1006,    -1,    -1,   486,    -1,   413,    -1,    -1,   555,
    1008,    -1,   636,    -1,  1008,   605,   636,    -1,    -1,    60,
    1385,  1010,  1214,  1011,    -1,    -1,   395,    -1,   166,    -1,
      -1,   419,  1027,  1385,  1013,  1214,  1014,    -1,    -1,  1015,
      -1,  1016,    -1,  1016,  1015,    -1,   395,    -1,   166,    -1,
     560,    -1,    -1,    14,  1027,  1385,  1018,  1214,    -1,    34,
    1357,    -1,    -1,    61,  1385,  1021,  1214,  1022,    -1,    -1,
    1023,    -1,  1024,    -1,  1024,  1023,    -1,   395,    -1,   170,
      -1,   302,    -1,   166,    -1,    57,    -1,   181,   557,    -1,
      -1,   352,  1027,  1385,  1026,  1214,    -1,    -1,   341,    -1,
     260,    -1,    -1,   417,  1385,  1029,  1031,    -1,   417,   559,
     660,  1030,    -1,  1363,   530,  1363,    -1,  1030,   605,  1363,
     530,  1363,    -1,  1032,    -1,  1031,   605,  1032,    -1,  1353,
     530,  1353,    -1,    -1,    48,   218,  1034,  1035,   231,  1039,
      -1,  1036,    -1,  1038,    -1,  1037,    -1,  1036,   605,  1037,
      -1,  1353,  1048,    -1,  1353,  1046,  1048,    -1,  1360,    -1,
     120,    -1,    -1,   259,   218,   228,    48,  1041,  1042,    -1,
    1045,    -1,  1043,    -1,  1044,    -1,  1043,   605,  1044,    -1,
    1353,  1048,  1051,    -1,  1353,  1046,  1048,  1051,    -1,    -1,
     371,   809,  1047,   603,   977,   604,    -1,    -1,  1049,  1050,
      -1,    -1,   935,   603,  1156,   604,    -1,    -1,   214,   247,
      -1,  1053,    -1,   448,  1056,    -1,   603,  1054,   604,  1439,
      -1,   448,  1058,    -1,   603,  1054,   604,    -1,   448,  1135,
      -1,   603,  1055,   604,    -1,    -1,  1058,  1057,  1436,    -1,
      -1,    -1,  1059,  1063,  1067,  1060,  1061,  1066,    -1,  1177,
    1183,    -1,  1203,    -1,  1062,    -1,  1203,  1062,    -1,  1062,
    1203,    -1,   183,  1117,  1166,  1171,  1168,  1177,  1183,  1194,
      -1,   183,   138,  1166,  1183,    -1,    -1,  1064,    -1,  1064,
    1065,    -1,  1065,    -1,  1453,    -1,   483,    -1,   481,    -1,
      -1,   181,   556,    -1,   263,   231,   458,   313,    -1,  1067,
     605,  1068,    -1,  1068,    -1,   598,    -1,  1069,  1347,  1070,
      -1,  1069,  1073,  1070,  1071,    -1,    -1,    -1,    -1,    18,
    1360,    -1,    18,  1357,    -1,  1360,    -1,  1357,    -1,    -1,
     603,   604,    -1,  1073,  1077,  1073,    -1,  1073,   590,  1073,
      -1,  1073,  1078,  1073,    -1,   337,  1073,    -1,  1074,   234,
     536,    -1,  1074,   234,  1079,   536,    -1,  1074,   234,   169,
      -1,  1074,   234,  1079,   169,    -1,  1074,   234,   552,    -1,
    1074,   234,  1079,   552,    -1,  1074,    -1,  1074,   234,   342,
      -1,  1074,   234,  1079,   342,    -1,  1074,   154,  1075,    -1,
    1074,  1081,  1075,    -1,  1074,  1081,  1082,   603,  1448,   604,
      -1,  1075,    -1,  1076,   231,   603,  1448,   604,    -1,  1076,
    1079,   231,   603,  1448,   604,    -1,  1076,   231,   603,  1073,
     604,    -1,  1076,   231,   603,  1073,   605,  1110,   604,    -1,
    1076,  1079,   231,   603,  1073,   604,    -1,  1076,  1079,   231,
     603,  1073,   605,  1110,   604,    -1,  1076,    31,  1076,    16,
    1075,    -1,  1076,  1079,    31,  1076,    16,  1075,    -1,  1076,
     472,   253,  1076,    -1,  1076,   253,  1083,  1170,    -1,  1076,
    1079,   253,  1083,  1170,    -1,  1076,   408,  1076,    -1,  1076,
    1079,   408,  1076,    -1,  1076,    -1,  1076,   594,  1076,    -1,
    1076,   595,  1076,    -1,  1076,   459,  1076,    -1,  1076,   460,
    1076,    -1,  1076,   597,  1076,    -1,  1076,   596,  1076,    -1,
    1076,   597,   227,  1073,  1160,    -1,  1076,   596,   227,  1073,
    1160,    -1,  1076,   598,  1076,    -1,  1076,   599,  1076,    -1,
    1076,   600,  1076,    -1,  1076,   134,  1076,    -1,  1076,   316,
    1076,    -1,  1076,   601,  1076,    -1,  1083,    -1,   359,    -1,
     356,    -1,    16,    -1,    15,    -1,   337,    -1,   336,    -1,
     606,    -1,   336,    -1,   153,    -1,   187,    -1,   197,    -1,
     245,    -1,   272,    -1,   330,    -1,    12,    -1,    17,    -1,
    1349,    -1,  1084,    -1,  1085,    -1,  1088,    -1,  1086,    -1,
    1083,    68,  1362,    -1,  1344,    -1,  1342,    -1,  1100,    -1,
    1096,    -1,  1083,   358,  1083,    -1,   597,  1083,    -1,   596,
    1083,    -1,   602,  1083,    -1,  1080,  1083,    -1,   603,  1448,
     604,    -1,   603,  1073,   604,    -1,   603,  1073,   605,  1110,
     604,    -1,   440,   603,  1073,   605,  1110,   604,    -1,   163,
     603,  1448,   604,    -1,   607,  1360,  1073,   608,    -1,   290,
    1111,     9,   603,  1076,  1090,   604,    -1,    33,  1083,    -1,
      53,   603,  1073,    18,  1108,   604,    -1,    52,  1113,  1115,
    1114,   147,    -1,    92,   603,  1073,   605,  1108,   604,    -1,
      92,   603,  1073,   562,   913,   604,    -1,   120,   603,  1349,
     604,    -1,   566,   603,  1350,   604,    -1,   227,  1073,  1160,
     597,  1073,    -1,    59,   603,  1110,   604,    -1,    59,   603,
    1110,   562,   913,   604,    -1,    99,  1072,    -1,   110,   603,
    1073,   604,    -1,   115,   603,  1073,   604,    -1,   209,   603,
    1073,   604,    -1,   224,   603,  1073,   605,  1073,   605,  1073,
     605,  1073,   604,    -1,   227,   603,  1073,   605,  1073,   604,
      -1,   227,   603,  1073,   605,  1073,   605,  1110,   604,    -1,
     249,   603,  1073,   605,  1073,   604,    -1,   310,   603,  1073,
     604,    -1,   317,   603,  1073,   604,    -1,   434,   603,  1073,
     605,  1073,   604,    -1,   446,   603,  1073,   604,    -1,   526,
     603,  1073,   604,    -1,   523,   603,  1073,   604,    -1,   523,
     603,  1073,   605,  1073,   604,    -1,   535,   603,  1073,   604,
      -1,   535,   603,   246,  1073,   183,  1073,   604,    -1,   535,
     603,   531,  1073,   183,  1073,   604,    -1,   535,   603,    44,
    1073,   183,  1073,   604,    -1,   535,   603,   246,   183,  1073,
     604,    -1,   535,   603,   531,   183,  1073,   604,    -1,   535,
     603,    44,   183,  1073,   604,    -1,   535,   603,  1073,   183,
    1073,   604,    -1,   559,   603,   604,    -1,   592,   603,  1073,
     604,    -1,     7,   603,  1073,   605,  1073,   604,    -1,     7,
     603,  1073,   605,   227,  1073,  1160,   604,    -1,    98,  1072,
      -1,   102,  1072,    -1,   102,   603,  1073,   604,    -1,   108,
     603,  1073,   605,   227,  1073,  1160,   604,    -1,   109,   603,
    1073,   605,   227,  1073,  1160,   604,    -1,   168,   603,  1160,
     183,  1073,   604,    -1,   191,   603,  1162,   605,  1073,   604,
      -1,   338,  1072,    -1,   338,   603,  1073,   604,    -1,   379,
     603,  1076,   231,  1073,   604,    -1,   499,   603,  1073,   605,
    1073,   604,    -1,   499,   603,  1073,   605,   227,  1073,  1160,
     604,    -1,   503,   603,  1073,   605,  1073,   605,  1073,   604,
      -1,   503,   603,  1073,   605,  1073,   604,    -1,   503,   603,
    1073,   183,  1073,   181,  1073,   604,    -1,   503,   603,  1073,
     183,  1073,   604,    -1,   509,  1072,    -1,   509,   603,  1073,
     604,    -1,   524,   603,  1161,   605,  1073,   605,  1073,   604,
      -1,   525,   603,  1161,   605,  1073,   605,  1073,   604,    -1,
     563,  1072,    -1,   565,  1072,    -1,   564,  1072,    -1,    20,
     603,  1073,   604,    -1,    58,   603,  1073,   604,    -1,    66,
     603,  1110,   604,    -1,    69,   603,  1073,   604,    -1,   103,
     603,   604,    -1,   213,   603,  1073,   605,  1073,   605,  1073,
     604,    -1,   306,   603,  1073,   604,    -1,   316,   603,  1073,
     605,  1073,   604,    -1,   347,   603,  1073,   604,    -1,   372,
     603,  1073,   604,    -1,   393,   603,  1073,   604,    -1,   421,
     603,  1073,   605,  1073,   604,    -1,   422,   603,  1073,   605,
    1073,   605,  1073,   604,    -1,   537,   603,  1073,   605,  1073,
     604,    -1,   577,   603,  1073,   604,    -1,   577,   603,  1073,
     605,  1073,   604,    -1,  1087,    -1,    88,   603,  1073,   605,
    1073,   604,    -1,   189,   603,  1110,   604,    -1,   257,   603,
    1110,   604,    -1,   318,   603,  1110,   604,    -1,   319,   603,
    1110,   604,    -1,   320,   603,  1110,   604,    -1,   376,   603,
    1073,   605,  1073,   604,    -1,   377,   603,  1110,   604,    -1,
      -1,  1356,   603,  1089,  1093,   604,    -1,  1360,   611,  1360,
     603,  1109,   604,    -1,  1091,  1092,    -1,   231,    42,   313,
      -1,    -1,   231,   326,   243,   313,    -1,    -1,   581,   394,
     165,    -1,    -1,  1094,    -1,  1095,    -1,  1094,   605,  1095,
      -1,  1069,  1073,  1070,  1071,    -1,    27,   603,  1106,   604,
      -1,    27,   603,   133,  1106,   604,    -1,    36,   603,  1106,
     604,    -1,    37,   603,  1106,   604,    -1,    39,   603,  1106,
     604,    -1,    93,   603,  1165,   598,   604,    -1,    93,   603,
    1106,   604,    -1,    -1,    -1,    93,   603,   133,  1097,  1110,
    1098,   604,    -1,   312,   603,  1106,   604,    -1,   312,   603,
     133,  1106,   604,    -1,   295,   603,  1106,   604,    -1,   295,
     603,   133,  1106,   604,    -1,   493,   603,  1106,   604,    -1,
     571,   603,  1106,   604,    -1,   492,   603,  1106,   604,    -1,
     573,   603,  1106,   604,    -1,   504,   603,  1106,   604,    -1,
     504,   603,   133,  1106,   604,    -1,    -1,   196,   603,  1103,
    1099,  1110,  1105,  1104,   604,    -1,    -1,   610,  1101,  1102,
      -1,  1362,   457,  1073,    -1,  1362,    -1,   610,  1375,  1362,
     958,    -1,    -1,   133,    -1,    -1,   450,  1341,    -1,    -1,
    1178,    -1,    -1,  1165,  1107,  1073,    -1,    33,   905,    -1,
      59,   905,   924,    -1,   328,   905,    -1,   464,    -1,   464,
     229,    -1,   554,    -1,   554,   229,    -1,   110,    -1,   526,
      -1,   107,    -1,   118,   899,    -1,    -1,  1110,    -1,  1073,
      -1,  1110,   605,  1073,    -1,  1112,    -1,   603,  1112,   604,
      -1,  1349,    -1,  1112,   605,  1349,    -1,    -1,  1073,    -1,
      -1,   143,  1073,    -1,   578,  1073,   522,  1073,    -1,  1115,
     578,  1073,   522,  1073,    -1,  1129,    -1,  1120,    -1,  1119,
      -1,  1116,    -1,   607,  1360,  1116,   608,    -1,  1118,    -1,
    1119,   605,  1118,    -1,  1116,  1128,  1116,    -1,  1116,   496,
    1129,    -1,    -1,  1116,  1128,  1116,   348,  1121,  1073,    -1,
      -1,  1116,   496,  1129,   348,  1122,  1073,    -1,    -1,  1116,
    1128,  1116,   562,  1123,   603,  1159,   604,    -1,  1116,   326,
     238,  1129,    -1,    -1,  1116,   249,  1145,   238,  1116,   348,
    1124,  1073,    -1,    -1,  1116,   249,  1145,   238,  1129,  1125,
     562,   603,  1159,   604,    -1,  1116,   326,   249,  1145,   238,
    1129,    -1,    -1,  1116,   434,  1145,   238,  1116,   348,  1126,
    1073,    -1,    -1,  1116,   434,  1145,   238,  1129,  1127,   562,
     603,  1159,   604,    -1,  1116,   326,   434,  1145,   238,  1129,
      -1,   238,    -1,   221,   238,    -1,    96,   238,    -1,    -1,
    1130,  1353,  1164,  1154,    -1,  1144,  1143,  1140,    -1,   603,
    1143,  1131,   604,  1164,    -1,  1138,  1440,    -1,    -1,    -1,
    1131,   550,  1444,  1132,  1445,  1133,  1440,    -1,  1135,    -1,
      -1,    -1,  1136,  1451,  1067,  1137,   876,  1066,    -1,    -1,
    1143,  1139,  1119,    -1,    -1,    -1,  1141,  1063,  1067,  1142,
     876,    -1,    -1,   448,    -1,    -1,   360,    -1,    -1,   181,
     238,    -1,   181,   357,    46,    -1,   181,   195,    46,    -1,
     179,    -1,   214,    -1,    -1,  1147,   935,  1146,  1149,   603,
    1158,   604,    -1,    -1,   561,   935,  1146,  1150,   603,  1156,
     604,    -1,  1148,    -1,  1151,  1148,    -1,    -1,    -1,  1153,
    1151,    -1,    -1,  1155,  1152,    -1,    -1,  1158,    -1,  1360,
      -1,   384,    -1,  1157,    -1,  1158,   605,  1157,    -1,  1360,
      -1,  1159,   605,  1360,    -1,  1161,    -1,   111,    -1,   112,
      -1,   113,    -1,   114,    -1,   206,    -1,   207,    -1,   208,
      -1,   308,    -1,   309,    -1,   445,    -1,   591,    -1,   115,
      -1,   577,    -1,   209,    -1,   310,    -1,   317,    -1,   393,
      -1,   446,    -1,   306,    -1,   592,    -1,   110,    -1,   526,
      -1,   107,    -1,   523,    -1,    -1,    18,    -1,   153,    -1,
      -1,  1163,  1360,    -1,    -1,    12,    -1,    -1,    -1,   579,
    1167,  1073,    -1,    -1,    -1,   200,  1169,  1073,    -1,   158,
    1083,    -1,    -1,    -1,   195,    46,  1172,  1173,    -1,  1172,
     605,  1348,  1181,    -1,  1348,  1181,    -1,    -1,   582,    -1,
     583,    -1,   357,    46,  1175,    -1,  1175,   605,  1176,    -1,
    1176,    -1,  1350,  1181,    -1,    -1,  1178,    -1,    -1,   357,
      46,  1179,  1180,    -1,  1180,   605,  1348,  1181,    -1,  1348,
    1181,    -1,    -1,    19,    -1,   125,    -1,    -1,  1184,    -1,
      -1,  1184,    -1,   254,  1185,    -1,  1186,    -1,  1186,   605,
    1186,    -1,  1186,   346,  1186,    -1,  1360,    -1,  1342,    -1,
     541,    -1,   268,    -1,   343,    -1,    -1,   254,  1186,    -1,
     343,    -1,   202,    -1,   268,    -1,   541,    -1,   117,    -1,
     176,    -1,   343,    -1,   202,    -1,   268,    -1,   541,    -1,
    1192,    -1,   343,    -1,   541,    -1,   268,    -1,   117,    -1,
     176,    -1,   343,    -1,   541,    -1,   268,    -1,  1192,    -1,
    1193,    -1,   117,    -1,   176,    -1,    -1,    -1,   386,  1360,
    1195,   603,  1196,   604,    -1,    -1,  1197,    -1,  1197,   605,
    1198,    -1,  1198,    -1,  1069,  1073,  1070,    -1,    -1,  1200,
    1201,    -1,  1201,   605,  1202,    -1,  1202,    -1,   610,  1362,
      -1,  1362,    -1,    -1,   228,  1204,  1205,    -1,    -1,    -1,
     361,  1359,  1206,   915,  1207,  1325,  1328,    -1,   139,  1359,
      -1,  1199,    -1,    -1,   136,  1209,  1110,    -1,    -1,   137,
    1219,  1385,  1218,  1211,  1214,   995,    -1,    -1,   137,   218,
    1360,   348,  1353,  1212,    -1,   137,   103,  1218,  1360,    -1,
     137,   186,  1218,  1360,   611,  1360,    -1,   137,   186,  1218,
    1360,    -1,   137,   386,  1218,   661,    -1,   137,   559,   660,
    1415,    -1,    -1,   137,   574,  1218,  1213,  1214,   995,    -1,
     137,   160,  1218,   661,    -1,   137,   534,  1218,   661,    -1,
     137,   511,   784,   795,   796,    -1,   137,   264,   195,   785,
     795,   796,    -1,   137,   454,  1218,  1362,    -1,  1215,    -1,
    1214,   605,  1215,    -1,  1353,    -1,  1217,    -1,  1216,   605,
    1217,    -1,  1354,    -1,    -1,   213,   163,    -1,    -1,   516,
      -1,    -1,    -1,   224,  1221,  1226,   994,  1228,  1222,  1230,
    1246,    -1,    -1,    -1,   422,  1224,  1227,  1228,  1225,  1230,
      -1,    -1,   271,    -1,   122,    -1,   203,    -1,  1255,    -1,
     122,    -1,   228,  1229,    -1,  1229,    -1,  1215,    -1,  1233,
      -1,   603,   604,  1233,    -1,   603,  1232,   604,  1233,    -1,
      -1,   456,  1231,  1237,    -1,  1232,   605,  1346,    -1,  1346,
      -1,   566,  1236,    -1,   567,  1236,    -1,    -1,   854,  1234,
    1436,    -1,    -1,   603,   854,   604,  1235,  1439,    -1,  1236,
     605,  1241,    -1,  1241,    -1,  1237,   605,  1238,    -1,  1238,
      -1,  1350,  1239,  1245,    -1,   153,    -1,   457,    -1,    -1,
    1239,    -1,    -1,   603,  1242,  1243,   604,    -1,    -1,  1244,
      -1,  1244,   605,  1245,    -1,  1245,    -1,  1073,    -1,   120,
      -1,    -1,    -1,   348,   140,  1247,   241,   556,  1253,    -1,
      -1,    -1,   556,  1249,  1255,   994,  1117,   456,  1251,  1250,
    1166,  1177,  1187,    -1,  1251,   605,  1252,    -1,  1252,    -1,
    1350,  1239,  1245,    -1,  1253,   605,  1254,    -1,  1254,    -1,
    1350,  1239,  1245,    -1,    -1,   271,    -1,    -1,   124,  1257,
    1265,  1258,    -1,    -1,   183,  1353,  1259,  1166,  1177,  1187,
      -1,    -1,  1262,  1260,   183,  1117,  1166,    -1,    -1,   183,
    1216,  1261,   562,  1117,  1166,    -1,  1263,    -1,  1262,   605,
    1263,    -1,  1360,  1264,    -1,  1360,   611,  1360,  1264,    -1,
      -1,   611,   598,    -1,    -1,  1266,  1265,    -1,   395,    -1,
     271,    -1,   214,    -1,    -1,   537,  1269,  1268,  1215,    -1,
      -1,   513,    -1,    -1,  1271,    -1,  1272,    -1,  1271,   605,
    1272,    -1,    94,    -1,   303,    -1,    41,   232,    -1,    89,
     508,    -1,   365,   171,    -1,   233,    -1,   507,    -1,   473,
      -1,    12,    -1,    -1,   181,   394,   343,    -1,    -1,   461,
    1275,  1276,    -1,   104,  1287,    -1,  1283,   510,  1282,  1287,
      -1,  1283,   533,  1282,  1287,    -1,   159,  1282,  1287,    -1,
     513,   491,  1282,  1287,    -1,   351,   510,  1282,  1287,    -1,
     374,    -1,   151,   873,  1279,    -1,   151,    12,  1279,    -1,
    1283,    70,  1284,  1353,  1282,  1287,    -1,  1280,   265,    -1,
     466,   205,    -1,    -1,    34,   159,  1285,  1286,  1277,  1182,
      -1,    -1,   410,   159,  1285,  1286,  1278,  1182,    -1,   937,
    1284,  1353,  1282,  1166,    -1,  1281,   150,    -1,    23,    -1,
      91,    -1,   385,    -1,    93,   603,   598,   604,   576,    -1,
      93,   603,   598,   604,   156,    -1,   576,  1182,    -1,   156,
    1182,    -1,   390,    -1,   389,  1270,  1273,  1182,    -1,  1374,
     491,  1287,    -1,  1283,   388,    -1,  1374,   570,  1287,    -1,
     912,  1287,    -1,    69,  1287,    -1,   194,    -1,   194,   181,
    1363,    -1,    95,   103,   864,  1360,    -1,    95,   513,  1353,
      -1,    95,   574,  1353,    -1,   287,   491,    -1,   466,   491,
      -1,    95,   386,   661,    -1,    95,   186,   661,    -1,    95,
     534,   661,    -1,   386,   491,  1287,    -1,   186,   491,  1287,
      -1,   386,    67,   661,    -1,   186,    67,   661,    -1,    95,
     160,   661,    -1,   491,    -1,   321,    -1,   265,    -1,   287,
      -1,    33,    -1,    -1,   495,    -1,    -1,  1284,  1360,    -1,
      -1,   184,    -1,   183,    -1,   231,    -1,    -1,   231,  1357,
      -1,    -1,   183,  1190,    -1,    -1,   253,  1357,    -1,   579,
    1073,    -1,    -1,  1291,  1353,  1289,  1293,    -1,    -1,  1291,
    1292,  1290,  1052,    -1,   125,    -1,   126,    -1,    -1,   166,
      -1,   370,    -1,    -1,  1341,    -1,  1360,    -1,    -1,   178,
    1027,  1295,  1296,    -1,    -1,    -1,  1385,  1297,  1302,  1298,
    1299,    -1,  1300,    -1,    -1,   581,   399,   263,    -1,  1300,
     605,  1301,    -1,  1301,    -1,   155,   265,    -1,   151,   265,
      -1,   188,   265,    -1,   467,   265,    -1,    33,   265,    -1,
     409,   265,    -1,   394,    48,    -1,   205,    -1,   385,    -1,
     265,    -1,   491,    -1,   466,    -1,   287,    -1,   127,    -1,
     427,    -1,    -1,  1214,    -1,    -1,   425,  1304,  1305,    -1,
    1305,   605,  1306,    -1,  1306,    -1,    -1,   466,  1307,  1308,
      -1,   287,    -1,   394,    48,    -1,    -1,    12,    -1,    -1,
     392,  1310,  1311,    -1,  1280,   265,  1312,    -1,   530,  1357,
      -1,    29,  1073,    -1,   242,  1314,  1073,    -1,    -1,    82,
      -1,   394,    -1,   561,  1360,    -1,    -1,    -1,    -1,    -1,
     259,  1321,  1317,  1323,  1322,   219,  1359,  1318,  1324,   228,
     513,  1353,  1319,   915,  1320,  1331,  1325,  1328,  1332,  1334,
    1337,    -1,   106,    -1,   589,    -1,    -1,   260,    -1,    -1,
      80,    -1,   271,    -1,    -1,   422,    -1,   214,    -1,    -1,
      70,  1326,    -1,  1326,  1327,    -1,  1327,    -1,   518,    46,
    1341,    -1,   355,   146,    46,  1341,    -1,   146,    46,  1341,
      -1,   157,    46,  1341,    -1,    -1,   256,  1329,    -1,  1329,
    1330,    -1,  1330,    -1,   518,    46,  1341,    -1,   488,    46,
    1341,    -1,    -1,   438,   211,    46,  1341,    -1,    -1,   214,
     343,  1333,    -1,   256,    -1,   438,    -1,    -1,   603,  1335,
     604,    -1,   603,   604,    -1,  1335,   605,  1336,    -1,  1336,
      -1,  1350,    -1,   610,  1362,    -1,    -1,   456,  1338,    -1,
    1338,   605,  1339,    -1,  1339,    -1,  1350,  1239,  1069,  1245,
    1070,    -1,   519,    -1,   327,    -1,   544,   519,    -1,  1340,
    1358,    -1,  1358,    -1,   202,    -1,    35,    -1,   366,    -1,
    1344,    -1,   597,  1345,    -1,   596,  1345,    -1,  1340,    -1,
    1345,    -1,   342,    -1,   169,    -1,   536,    -1,   202,    -1,
      35,    -1,   544,   202,    -1,   544,    35,    -1,   110,  1340,
      -1,   526,  1340,    -1,   523,  1340,    -1,   343,    -1,   268,
      -1,   541,    -1,   117,    -1,   176,    -1,  1350,    -1,  1347,
      -1,  1360,   611,   598,    -1,  1360,   611,  1360,   611,   598,
      -1,  1073,    -1,  1360,    -1,  1351,    -1,  1360,    -1,  1351,
      -1,  1360,   611,  1360,    -1,   611,  1360,   611,  1360,    -1,
    1360,   611,  1360,   611,  1360,    -1,  1360,    -1,  1360,   611,
    1360,   611,  1360,    -1,  1360,   611,  1360,    -1,   611,  1360,
      -1,  1360,    -1,  1360,   611,  1360,    -1,   611,  1360,    -1,
    1360,  1264,    -1,  1360,   611,  1360,  1264,    -1,  1360,    -1,
     210,    -1,   212,    -1,   519,    -1,   519,    -1,   519,    -1,
    1356,    -1,  1364,    -1,  1356,    -1,  1365,    -1,  1360,    -1,
    1357,    -1,   252,    -1,  1362,    -1,  1362,   610,  1362,    -1,
      99,  1072,    -1,  1365,    -1,    20,    -1,    28,    -1,    30,
      -1,    47,    -1,    48,    -1,    58,    -1,    60,    -1,    65,
      -1,    73,    -1,    75,    -1,    88,    -1,   116,    -1,   136,
      -1,   147,    -1,   162,    -1,   178,    -1,   198,    -1,   201,
      -1,   204,    -1,   226,    -1,   243,    -1,   339,    -1,   351,
      -1,   353,    -1,   363,    -1,   367,    -1,   371,    -1,   378,
      -1,   381,    -1,   416,    -1,   419,    -1,   425,    -1,   428,
      -1,   435,    -1,   442,    -1,   447,    -1,   454,    -1,   464,
      -1,   470,    -1,   466,    -1,   471,    -1,   490,    -1,   494,
      -1,   537,    -1,   548,    -1,   549,    -1,   585,    -1,   588,
      -1,   557,    -1,     5,    -1,     7,    -1,     8,    -1,     9,
      -1,    10,    -1,    11,    -1,    17,    -1,    22,    -1,    23,
      -1,    25,    -1,    24,    -1,    26,    -1,    27,    -1,    34,
      -1,    38,    -1,    41,    -1,    43,    -1,    42,    -1,    45,
      -1,    51,    -1,    54,    -1,    55,    -1,    57,    -1,    62,
      -1,    64,    -1,    63,    -1,    66,    -1,    67,    -1,    69,
      -1,    72,    -1,    70,    -1,    74,    -1,    76,    -1,    77,
      -1,    78,    -1,    79,    -1,    80,    -1,    82,    -1,    83,
      -1,    85,    -1,    87,    -1,    86,    -1,    89,    -1,    91,
      -1,    94,    -1,    97,    -1,   101,    -1,   106,    -1,   105,
      -1,   107,    -1,   110,    -1,   115,    -1,   121,    -1,   123,
      -1,   127,    -1,   129,    -1,   130,    -1,   131,    -1,   132,
      -1,   139,    -1,   140,    -1,   141,    -1,   148,    -1,   152,
      -1,   151,    -1,   150,    -1,   155,    -1,   156,    -1,   158,
      -1,   160,    -1,   159,    -1,   161,    -1,   165,    -1,   166,
      -1,   167,    -1,   171,    -1,   170,    -1,   182,    -1,   145,
      -1,   184,    -1,   173,    -1,   174,    -1,   175,    -1,   188,
      -1,   190,    -1,   189,    -1,   191,    -1,   194,    -1,   192,
      -1,   199,    -1,   205,    -1,   209,    -1,   211,    -1,   215,
      -1,   230,    -1,   216,    -1,   217,    -1,   220,    -1,   232,
      -1,   233,    -1,   235,    -1,   236,    -1,   225,    -1,   240,
      -1,   244,    -1,   247,    -1,   250,    -1,   251,    -1,   257,
      -1,   258,    -1,   260,    -1,   262,    -1,   264,    -1,   265,
      -1,   293,    -1,   287,    -1,   289,    -1,   274,    -1,   278,
      -1,   275,    -1,   276,    -1,   288,    -1,   277,    -1,   279,
      -1,   273,    -1,   285,    -1,   281,    -1,   280,    -1,   282,
      -1,   283,    -1,   284,    -1,   291,    -1,   292,    -1,   294,
      -1,   296,    -1,   297,    -1,   302,    -1,   303,    -1,   304,
      -1,   305,    -1,   306,    -1,   307,    -1,   310,    -1,   311,
      -1,   315,    -1,   313,    -1,   317,    -1,   318,    -1,   319,
      -1,   320,    -1,   321,    -1,   322,    -1,   324,    -1,   323,
      -1,   325,    -1,   328,    -1,   329,    -1,   333,    -1,   332,
      -1,   340,    -1,   334,    -1,   335,    -1,   345,    -1,   346,
      -1,   347,    -1,   349,    -1,   350,    -1,   364,    -1,   365,
      -1,   368,    -1,   369,    -1,   370,    -1,   372,    -1,   373,
      -1,   375,    -1,   374,    -1,   376,    -1,   377,    -1,   382,
      -1,   383,    -1,   385,    -1,   387,    -1,   388,    -1,   389,
      -1,   390,    -1,   391,    -1,   393,    -1,   394,    -1,   395,
      -1,   398,    -1,   402,    -1,   403,    -1,   405,    -1,   404,
      -1,   406,    -1,   409,    -1,   410,    -1,   411,    -1,   412,
      -1,   413,    -1,   415,    -1,   418,    -1,   420,    -1,   423,
      -1,   427,    -1,   430,    -1,   431,    -1,   436,    -1,   437,
      -1,   438,    -1,   439,    -1,   440,    -1,   441,    -1,   443,
      -1,   444,    -1,   446,    -1,   452,    -1,   451,    -1,   453,
      -1,   465,    -1,   458,    -1,   462,    -1,   467,    -1,   469,
      -1,   472,    -1,   473,    -1,   481,    -1,   480,    -1,   483,
      -1,   486,    -1,   489,    -1,   491,    -1,   495,    -1,   497,
      -1,   498,    -1,   499,    -1,   500,    -1,   502,    -1,   501,
      -1,   505,    -1,   506,    -1,   507,    -1,   508,    -1,   515,
      -1,   510,    -1,   514,    -1,   511,    -1,   516,    -1,   517,
      -1,   520,    -1,   521,    -1,   532,    -1,   533,    -1,   523,
      -1,   524,    -1,   525,    -1,   526,    -1,   538,    -1,   539,
      -1,   540,    -1,   186,    -1,   542,    -1,   543,    -1,   546,
      -1,   545,    -1,   552,    -1,   555,    -1,   559,    -1,   560,
      -1,   570,    -1,   574,    -1,   567,    -1,   576,    -1,   575,
      -1,   577,    -1,   584,    -1,   587,    -1,   589,    -1,   592,
      -1,    -1,   456,  1368,  1367,  1369,    -1,    -1,   354,    -1,
    1370,    -1,  1369,   605,  1370,    -1,    -1,  1371,  1376,    -1,
    1373,    -1,   192,    -1,   260,    -1,   453,    -1,    -1,   349,
      -1,    -1,   192,    -1,   260,    -1,   453,    -1,    -1,   192,
     611,    -1,   260,   611,    -1,   453,   611,    -1,  1377,    -1,
    1373,  1378,    -1,  1372,  1379,  1239,  1382,    -1,  1372,   532,
     235,   251,  1380,    -1,   610,  1362,  1239,  1073,    -1,   610,
     610,  1375,  1379,  1239,  1382,    -1,   912,   917,    -1,   323,
    1239,  1073,    -1,   323,   914,   919,    -1,   372,  1239,  1381,
      -1,   372,   181,  1363,  1239,  1381,    -1,  1360,    -1,  1360,
     611,  1360,    -1,   120,   611,  1360,    -1,   399,   542,    -1,
     399,    74,    -1,   420,   399,    -1,   451,    -1,   519,    -1,
     372,   603,   519,   604,    -1,   347,   603,   519,   604,    -1,
    1073,    -1,   120,    -1,   348,    -1,    12,    -1,    33,    -1,
      -1,   263,  1385,  1384,  1386,    -1,   513,    -1,   510,    -1,
    1387,    -1,  1386,   605,  1387,    -1,  1353,  1164,  1388,    -1,
     399,    -1,   586,    -1,   271,   586,    -1,   399,   260,    -1,
      -1,   553,  1390,  1385,    -1,   198,  1353,   351,  1164,    -1,
     198,  1355,    65,    -1,    -1,   198,  1355,   399,  1392,  1393,
    1166,  1183,    -1,  1394,    -1,  1360,  1395,    -1,   174,    -1,
     333,    -1,   174,    -1,   333,    -1,   383,    -1,   244,    -1,
      -1,  1397,  1396,   603,  1244,   604,    -1,   153,    -1,   187,
      -1,   245,    -1,   197,    -1,   272,    -1,   433,   660,  1399,
      -1,  1403,   348,  1402,  1414,   183,  1416,    -1,  1403,   348,
     186,  1414,   183,  1416,    -1,  1403,   348,   386,  1414,   183,
    1416,    -1,    12,  1404,   605,   193,   354,   183,  1416,    -1,
     391,   348,  1363,   183,  1416,    -1,   193,   660,  1401,    -1,
    1403,   348,  1402,  1414,   530,  1416,  1421,  1422,    -1,  1403,
     348,   186,  1414,   530,  1416,  1421,  1422,    -1,  1403,   348,
     386,  1414,   530,  1416,  1421,  1422,    -1,   391,   348,  1363,
     530,  1416,  1423,    -1,    -1,   513,    -1,  1405,    -1,    12,
    1404,    -1,    -1,   385,    -1,  1406,    -1,  1405,   605,  1406,
      -1,    -1,   448,  1407,  1418,    -1,    -1,   224,  1408,  1418,
      -1,    -1,   556,  1409,  1418,    -1,    -1,   407,  1410,  1418,
      -1,   124,    -1,   558,    -1,   218,    -1,    13,    -1,    95,
      -1,   137,    -1,   162,    -1,   415,    -1,   462,    -1,   387,
      -1,   173,    -1,   193,   354,    -1,   461,   104,    -1,   505,
      -1,    95,   516,   510,    -1,   263,   510,    -1,   423,   466,
      -1,   423,    64,    -1,    95,   574,    -1,   461,   574,    -1,
      95,   437,    -1,    13,   437,    -1,    95,   559,    -1,   160,
      -1,   534,    -1,    95,   511,    -1,    -1,    16,    -1,  1413,
    1411,  1412,    -1,  1413,    -1,   500,   519,    -1,   236,   519,
      -1,    62,   519,    -1,   598,    -1,  1360,   611,   598,    -1,
     598,   611,   598,    -1,  1353,    -1,  1363,    -1,  1415,   605,
    1363,    -1,  1417,    -1,  1416,   605,  1417,    -1,  1363,   211,
      46,   519,    -1,  1363,   211,    46,   372,   519,    -1,  1363,
     211,   581,  1362,    -1,  1363,   211,   581,  1362,    18,  1357,
      -1,  1363,    -1,    -1,   603,  1419,   604,    -1,  1419,   605,
    1420,    -1,  1420,    -1,  1360,    -1,    -1,   424,  1412,    -1,
     424,   487,    -1,   424,   587,    -1,   424,   335,    -1,    -1,
     581,  1424,    -1,    -1,   581,   193,   354,    -1,  1424,  1425,
      -1,  1425,    -1,   193,   354,    -1,   292,  1188,    -1,   296,
    1188,    -1,   291,  1188,    -1,   297,  1188,    -1,    -1,    30,
    1427,  1428,    -1,    -1,   584,    -1,    -1,    16,   339,    55,
      -1,    16,    55,    -1,    -1,   414,    -1,   339,   414,    -1,
      -1,   442,    -1,    75,  1428,  1429,  1430,    -1,   435,  1428,
    1429,  1430,    -1,   435,  1428,   530,  1431,  1360,    -1,   442,
    1360,    -1,   414,   442,  1360,    -1,    -1,  1437,    -1,    -1,
     550,  1444,  1438,  1053,    -1,    -1,  1437,    -1,  1441,    -1,
      -1,  1441,    -1,    -1,  1442,  1443,    -1,  1178,  1182,    -1,
    1184,    -1,    -1,   133,    -1,    12,    -1,   448,  1134,    -1,
     603,  1055,   604,    -1,  1445,  1440,    -1,    -1,  1446,   550,
    1444,  1447,  1445,  1440,    -1,  1449,  1446,  1450,    -1,    -1,
      -1,    -1,  1452,    -1,  1452,  1453,    -1,  1453,    -1,   496,
      -1,   203,    -1,   133,    -1,   484,    -1,   479,    -1,   480,
      -1,   482,    -1,    12,    -1,  1459,  1455,    -1,  1458,  1456,
      -1,  1460,  1457,  1464,    -1,  1464,    -1,  1472,    -1,  1483,
      -1,  1477,    -1,   647,    -1,  1464,    -1,  1472,    -1,  1483,
      -1,  1477,    -1,  1476,    -1,   647,    -1,  1458,    -1,  1459,
      -1,    -1,   121,   153,  1363,    -1,  1461,    -1,  1461,  1462,
      -1,  1462,    -1,   359,   422,    -1,    11,   153,   543,    -1,
      11,   153,   304,    -1,    11,   153,   517,    -1,    -1,   485,
     447,   121,    -1,   485,   447,   230,    -1,    -1,  1463,   574,
    1353,  1465,  1466,    18,  1468,    -1,    -1,   603,  1467,   604,
      -1,  1360,    -1,  1467,   605,  1360,    -1,    -1,  1469,  1470,
    1471,    -1,   448,  1056,    -1,   603,  1054,   604,  1439,    -1,
      -1,   581,    61,   354,    -1,   581,    51,    61,   354,    -1,
     581,   260,    61,   354,    -1,    -1,    -1,    -1,   534,  1069,
     661,   755,   756,   348,  1069,  1473,  1353,   181,  1069,  1474,
     142,   440,  1475,   705,    -1,    10,  1069,   186,  1360,   431,
     877,   471,  1357,    -1,  1069,   186,  1360,   431,   877,   471,
    1357,    -1,    -1,    -1,    -1,    -1,    -1,  1069,   186,   661,
     603,  1478,   672,   604,  1479,   431,  1480,   910,  1481,   663,
    1482,   705,    -1,    -1,    -1,    -1,    -1,   386,  1069,   661,
    1484,   603,  1485,   676,   604,  1486,   663,  1487,   705,    -1,
     588,  1490,  1489,  1491,    -1,   588,   147,  1489,  1493,    -1,
     588,   381,  1489,    -1,   588,    75,  1489,  1492,    -1,   588,
     435,  1489,    -1,   588,   403,    -1,  1341,    -1,  1341,   605,
    1341,    -1,  1341,   605,  1341,   605,  1188,    -1,    30,    -1,
     490,    -1,    -1,   238,    -1,   430,    -1,    -1,   350,   373,
      -1,    -1,    -1,   506,  1494,  1495,    -1,    -1,   181,   307,
      -1,   226,   375,  1360,   471,  1357,    -1,   549,   375,  1360,
      -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1657,  1657,  1670,  1669,  1694,  1701,  1703,  1707,  1708,
    1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,
    1723,  1724,  1725,  1726,  1727,  1728,  1729,  1730,  1731,  1732,
    1733,  1734,  1735,  1736,  1737,  1738,  1739,  1740,  1741,  1742,
    1743,  1744,  1745,  1746,  1747,  1748,  1749,  1750,  1751,  1752,
    1753,  1754,  1755,  1756,  1757,  1758,  1759,  1760,  1761,  1762,
    1763,  1767,  1777,  1778,  1782,  1792,  1799,  1810,  1809,  1820,
    1822,  1826,  1827,  1831,  1844,  1843,  1863,  1862,  1876,  1877,
    1881,  1885,  1889,  1893,  1897,  1901,  1906,  1910,  1914,  1918,
    1922,  1926,  1932,  1963,  1968,  1971,  1973,  1974,  1978,  1992,
    1996,  2012,  2016,  2028,  2027,  2069,  2068,  2080,  2078,  2091,
    2089,  2101,  2100,  2113,  2112,  2120,  2124,  2128,  2132,  2139,
    2152,  2153,  2157,  2161,  2165,  2169,  2173,  2177,  2181,  2189,
    2188,  2220,  2219,  2226,  2233,  2234,  2240,  2246,  2256,  2262,
    2268,  2270,  2277,  2278,  2282,  2288,  2297,  2298,  2306,  2306,
    2364,  2365,  2366,  2367,  2368,  2369,  2370,  2371,  2372,  2373,
    2374,  2375,  2376,  2381,  2395,  2411,  2430,  2431,  2435,  2436,
    2441,  2443,  2445,  2447,  2449,  2451,  2453,  2459,  2460,  2461,
    2465,  2469,  2477,  2476,  2489,  2491,  2494,  2496,  2500,  2504,
    2511,  2513,  2517,  2518,  2523,  2542,  2568,  2570,  2574,  2575,
    2579,  2605,  2606,  2607,  2608,  2612,  2613,  2617,  2618,  2623,
    2626,  2653,  2652,  2717,  2733,  2732,  2786,  2812,  2812,  2835,
    2836,  2841,  2843,  2848,  2871,  2884,  2888,  2905,  2906,  2910,
    2914,  2923,  2930,  2937,  2947,  2962,  2985,  2991,  2992,  2998,
    3001,  3005,  3013,  3033,  3035,  3053,  3059,  3061,  3063,  3065,
    3067,  3069,  3071,  3073,  3075,  3077,  3079,  3081,  3086,  3101,
    3116,  3134,  3135,  3139,  3140,  3141,  3142,  3143,  3144,  3145,
    3146,  3147,  3148,  3149,  3150,  3151,  3156,  3155,  3162,  3162,
    3219,  3218,  3247,  3247,  3261,  3314,  3357,  3378,  3377,  3399,
    3418,  3420,  3421,  3425,  3445,  3468,  3470,  3486,  3468,  3505,
    3507,  3508,  3512,  3513,  3518,  3524,  3517,  3545,  3544,  3560,
    3561,  3565,  3566,  3571,  3575,  3570,  3596,  3600,  3595,  3619,
    3629,  3634,  3633,  3669,  3670,  3675,  3674,  3707,  3707,  3722,
    3721,  3757,  3769,  3771,  3768,  3798,  3797,  3818,  3820,  3825,
    3827,  3829,  3846,  3851,  3857,  3864,  3865,  3873,  3879,  3888,
    3894,  3900,  3901,  3905,  3905,  3910,  3911,  3912,  3916,  3917,
    3918,  3922,  3926,  3927,  3928,  3932,  3933,  3934,  3935,  3936,
    3937,  3938,  3939,  3943,  3947,  3948,  3949,  3953,  3954,  3955,
    3956,  3957,  3961,  3965,  3966,  3967,  3971,  3972,  3973,  3974,
    3975,  3976,  3977,  3981,  3985,  3986,  3987,  3991,  3992,  3993,
    3998,  4006,  4014,  4022,  4034,  4046,  4051,  4056,  4064,  4072,
    4080,  4088,  4096,  4104,  4112,  4125,  4138,  4151,  4153,  4157,
    4162,  4175,  4176,  4227,  4228,  4231,  4246,  4264,  4269,  4267,
    4274,  4276,  4275,  4279,  4278,  4284,  4321,  4322,  4327,  4326,
    4345,  4364,  4363,  4380,  4384,  4392,  4391,  4394,  4396,  4398,
    4400,  4405,  4406,  4411,  4412,  4416,  4417,  4421,  4440,  4450,
    4461,  4470,  4471,  4487,  4489,  4488,  4493,  4491,  4502,  4503,
    4507,  4525,  4541,  4542,  4558,  4573,  4595,  4596,  4601,  4600,
    4624,  4634,  4656,  4655,  4673,  4672,  4692,  4714,  4718,  4747,
    4759,  4760,  4765,  4776,  4764,  4801,  4802,  4806,  4819,  4840,
    4853,  4879,  4880,  4885,  4884,  4921,  4926,  4927,  4931,  4932,
    4936,  4938,  4944,  4946,  4948,  4950,  4952,  4954,  4964,  4979,
    4963,  4993,  4994,  4998,  4999,  5003,  5004,  5008,  5009,  5013,
    5014,  5018,  5019,  5023,  5027,  5028,  5031,  5033,  5037,  5038,
    5042,  5043,  5044,  5048,  5053,  5058,  5063,  5068,  5073,  5078,
    5083,  5098,  5104,  5109,  5114,  5119,  5125,  5124,  5150,  5151,
    5152,  5157,  5162,  5167,  5169,  5171,  5173,  5179,  5187,  5205,
    5222,  5245,  5259,  5260,  5261,  5262,  5263,  5264,  5265,  5269,
    5270,  5271,  5275,  5276,  5280,  5281,  5282,  5283,  5288,  5295,
    5296,  5300,  5301,  5305,  5306,  5313,  5318,  5324,  5330,  5336,
    5354,  5360,  5362,  5366,  5370,  5371,  5375,  5380,  5379,  5402,
    5403,  5404,  5405,  5410,  5414,  5419,  5424,  5428,  5433,  5438,
    5444,  5449,  5455,  5459,  5464,  5469,  5471,  5473,  5475,  5488,
    5490,  5495,  5500,  5512,  5517,  5522,  5527,  5529,  5531,  5533,
    5535,  5537,  5539,  5541,  5544,  5543,  5548,  5547,  5551,  5553,
    5562,  5563,  5564,  5569,  5570,  5571,  5572,  5573,  5577,  5581,
    5582,  5586,  5587,  5591,  5592,  5593,  5594,  5595,  5599,  5600,
    5601,  5602,  5603,  5607,  5612,  5614,  5620,  5621,  5623,  5628,
    5637,  5638,  5642,  5643,  5647,  5648,  5649,  5653,  5654,  5655,
    5656,  5659,  5660,  5664,  5665,  5669,  5670,  5674,  5675,  5679,
    5680,  5681,  5682,  5689,  5690,  5696,  5702,  5708,  5714,  5715,
    5732,  5753,  5759,  5764,  5765,  5769,  5777,  5781,  5782,  5786,
    5787,  5791,  5800,  5804,  5805,  5809,  5820,  5821,  5825,  5826,
    5830,  5831,  5836,  5837,  5841,  5848,  5857,  5865,  5876,  5877,
    5878,  5879,  5880,  5881,  5886,  5894,  5895,  5899,  5901,  5905,
    5917,  5918,  5922,  5929,  5942,  5943,  5945,  5947,  5953,  5958,
    5964,  5970,  5977,  5987,  5988,  5989,  5990,  5991,  5995,  5999,
    6000,  6004,  6005,  6009,  6010,  6014,  6015,  6016,  6020,  6021,
    6025,  6029,  6042,  6054,  6055,  6059,  6060,  6064,  6065,  6069,
    6070,  6074,  6075,  6079,  6080,  6084,  6085,  6089,  6090,  6094,
    6096,  6100,  6101,  6105,  6109,  6110,  6123,  6124,  6125,  6129,
    6130,  6134,  6140,  6154,  6155,  6159,  6160,  6164,  6165,  6173,
    6172,  6211,  6210,  6224,  6236,  6235,  6254,  6253,  6272,  6271,
    6290,  6284,  6304,  6303,  6336,  6341,  6346,  6351,  6356,  6366,
    6367,  6368,  6369,  6373,  6374,  6386,  6387,  6391,  6392,  6395,
    6397,  6398,  6399,  6401,  6403,  6404,  6413,  6414,  6418,  6427,
    6425,  6439,  6453,  6452,  6466,  6464,  6478,  6485,  6496,  6500,
    6507,  6511,  6516,  6515,  6531,  6533,  6538,  6546,  6545,  6561,
    6565,  6564,  6576,  6577,  6581,  6596,  6597,  6601,  6610,  6614,
    6619,  6624,  6623,  6634,  6643,  6633,  6658,  6667,  6671,  6680,
    6689,  6695,  6701,  6710,  6719,  6738,  6759,  6769,  6773,  6781,
    6782,  6786,  6787,  6791,  6792,  6793,  6797,  6798,  6799,  6803,
    6804,  6805,  6806,  6815,  6814,  6825,  6833,  6832,  6842,  6851,
    6860,  6861,  6868,  6868,  6874,  6875,  6879,  6880,  6881,  6885,
    6886,  6902,  6903,  6908,  6907,  6919,  6920,  6921,  6926,  6925,
    6947,  6948,  6952,  6953,  6957,  6958,  6959,  6964,  6963,  6985,
    6994,  6993,  7020,  7021,  7025,  7026,  7030,  7031,  7032,  7033,
    7034,  7035,  7040,  7039,  7061,  7062,  7063,  7068,  7067,  7073,
    7080,  7085,  7093,  7094,  7098,  7112,  7111,  7124,  7125,  7129,
    7130,  7134,  7144,  7154,  7155,  7160,  7159,  7170,  7171,  7175,
    7176,  7180,  7190,  7201,  7200,  7208,  7208,  7219,  7220,  7225,
    7226,  7235,  7244,  7245,  7249,  7254,  7259,  7264,  7269,  7268,
    7288,  7296,  7288,  7303,  7304,  7305,  7306,  7307,  7311,  7318,
    7325,  7327,  7338,  7339,  7343,  7344,  7372,  7402,  7404,  7410,
    7420,  7421,  7422,  7437,  7444,  7470,  7476,  7482,  7483,  7484,
    7485,  7486,  7490,  7491,  7496,  7547,  7554,  7597,  7603,  7609,
    7615,  7621,  7627,  7633,  7639,  7643,  7649,  7655,  7661,  7667,
    7673,  7677,  7683,  7693,  7699,  7707,  7713,  7723,  7729,  7738,
    7748,  7754,  7764,  7770,  7779,  7783,  7789,  7795,  7801,  7807,
    7813,  7819,  7825,  7831,  7837,  7843,  7849,  7855,  7861,  7867,
    7871,  7872,  7876,  7877,  7881,  7882,  7886,  7887,  7891,  7892,
    7893,  7894,  7895,  7896,  7900,  7901,  7905,  7906,  7907,  7908,
    7909,  7910,  7922,  7923,  7924,  7925,  7926,  7932,  7936,  7942,
    7948,  7954,  7960,  7962,  7969,  7976,  7982,  7984,  7993,  8000,
    8008,  8014,  8021,  8027,  8041,  8048,  8064,  8070,  8076,  8084,
    8090,  8096,  8102,  8108,  8123,  8135,  8141,  8147,  8153,  8159,
    8165,  8171,  8177,  8183,  8189,  8195,  8201,  8207,  8213,  8219,
    8225,  8231,  8239,  8260,  8267,  8273,  8280,  8287,  8294,  8301,
    8308,  8314,  8320,  8327,  8334,  8340,  8347,  8353,  8359,  8365,
    8371,  8377,  8395,  8405,  8411,  8417,  8424,  8431,  8446,  8452,
    8458,  8464,  8470,  8477,  8483,  8489,  8495,  8501,  8513,  8519,
    8525,  8531,  8537,  8549,  8555,  8571,  8577,  8584,  8591,  8598,
    8605,  8612,  8616,  8636,  8635,  8708,  8750,  8752,  8757,  8758,
    8762,  8763,  8767,  8768,  8772,  8779,  8787,  8813,  8819,  8825,
    8831,  8837,  8843,  8852,  8859,  8861,  8858,  8868,  8879,  8885,
    8891,  8897,  8903,  8909,  8915,  8921,  8927,  8934,  8933,  8952,
    8951,  8966,  8976,  8984,  9000,  9001,  9006,  9011,  9016,  9019,
    9032,  9031,  9048,  9050,  9052,  9054,  9056,  9058,  9060,  9062,
    9064,  9066,  9068,  9073,  9074,  9078,  9085,  9093,  9094,  9098,
    9105,  9113,  9114,  9118,  9119,  9123,  9131,  9142,  9143,  9152,
    9163,  9164,  9170,  9171,  9191,  9193,  9197,  9195,  9212,  9210,
    9228,  9226,  9233,  9242,  9240,  9258,  9257,  9267,  9278,  9276,
    9295,  9294,  9305,  9316,  9317,  9318,  9330,  9330,  9344,  9384,
    9435,  9439,  9444,  9436,  9456,  9476,  9484,  9476,  9493,  9492,
    9515,  9532,  9515,  9539,  9543,  9569,  9570,  9575,  9578,  9579,
    9580,  9584,  9585,  9590,  9589,  9595,  9594,  9602,  9603,  9606,
    9608,  9608,  9612,  9612,  9617,  9618,  9622,  9624,  9629,  9630,
    9634,  9645,  9658,  9659,  9660,  9661,  9662,  9663,  9664,  9665,
    9666,  9667,  9668,  9669,  9673,  9674,  9675,  9676,  9677,  9678,
    9679,  9680,  9681,  9685,  9686,  9687,  9688,  9691,  9693,  9694,
    9698,  9699,  9707,  9709,  9713,  9715,  9714,  9728,  9731,  9730,
    9745,  9751,  9766,  9768,  9772,  9774,  9779,  9780,  9800,  9825,
    9829,  9830,  9834,  9847,  9849,  9854,  9853,  9888,  9890,  9895,
    9896,  9897,  9902,  9908,  9912,  9913,  9917,  9924,  9931,  9938,
    9948,  9982,  9986,  9992,  9998, 10008, 10012, 10022, 10023, 10024,
   10025, 10026, 10027, 10031, 10032, 10033, 10034, 10035, 10039, 10040,
   10041, 10042, 10043, 10047, 10048, 10049, 10050, 10054, 10059, 10060,
   10063, 10066, 10065, 10096, 10097, 10101, 10102, 10106, 10118, 10118,
   10128, 10129, 10133, 10152, 10185, 10184, 10197, 10205, 10196, 10207,
   10219, 10231, 10230, 10248, 10247, 10258, 10258, 10274, 10281, 10304,
   10325, 10337, 10342, 10341, 10351, 10357, 10364, 10369, 10374, 10384,
   10385, 10389, 10400, 10401, 10405, 10416, 10417, 10421, 10422, 10430,
   10438, 10429, 10448, 10455, 10447, 10465, 10477, 10478, 10486, 10490,
   10491, 10502, 10503, 10507, 10516, 10517, 10518, 10520, 10519, 10530,
   10531, 10535, 10536, 10538, 10537, 10541, 10540, 10546, 10547, 10551,
   10552, 10556, 10566, 10567, 10571, 10572, 10577, 10576, 10590, 10591,
   10595, 10600, 10608, 10609, 10617, 10619, 10619, 10627, 10635, 10626,
   10657, 10658, 10662, 10670, 10671, 10675, 10685, 10686, 10693, 10692,
   10708, 10707, 10719, 10718, 10730, 10729, 10743, 10744, 10748, 10761,
   10777, 10778, 10782, 10783, 10787, 10788, 10789, 10794, 10793, 10815,
   10817, 10820, 10822, 10825, 10826, 10829, 10833, 10837, 10841, 10845,
   10849, 10853, 10857, 10861, 10869, 10872, 10882, 10881, 10894, 10901,
   10909, 10917, 10925, 10933, 10941, 10948, 10950, 10952, 10961, 10965,
   10970, 10969, 10975, 10974, 10979, 10988, 10995, 11000, 11005, 11010,
   11012, 11014, 11016, 11018, 11020, 11027, 11035, 11037, 11045, 11052,
   11059, 11069, 11076, 11082, 11091, 11099, 11103, 11107, 11114, 11121,
   11127, 11134, 11141, 11146, 11151, 11159, 11161, 11163, 11168, 11169,
   11172, 11174, 11178, 11179, 11183, 11184, 11188, 11189, 11193, 11194,
   11198, 11199, 11202, 11204, 11211, 11222, 11221, 11234, 11233, 11243,
   11244, 11248, 11249, 11250, 11254, 11255, 11256, 11271, 11270, 11283,
   11292, 11282, 11294, 11298, 11299, 11313, 11314, 11319, 11321, 11323,
   11325, 11327, 11329, 11331, 11333, 11335, 11337, 11339, 11341, 11346,
   11348, 11350, 11355, 11356, 11361, 11360, 11370, 11371, 11375, 11375,
   11377, 11378, 11382, 11383, 11388, 11387, 11398, 11402, 11406, 11418,
   11428, 11429, 11430, 11436, 11448, 11460, 11470, 11480, 11447, 11488,
   11489, 11493, 11494, 11498, 11499, 11511, 11515, 11516, 11517, 11520,
   11522, 11526, 11527, 11531, 11536, 11543, 11548, 11555, 11557, 11561,
   11562, 11566, 11571, 11579, 11580, 11583, 11585, 11593, 11595, 11599,
   11600, 11601, 11605, 11607, 11612, 11613, 11622, 11623, 11627, 11628,
   11632, 11645, 11669, 11681, 11692, 11711, 11719, 11731, 11746, 11767,
   11768, 11769, 11777, 11778, 11779, 11786, 11792, 11798, 11804, 11810,
   11839, 11867, 11868, 11869, 11873, 11883, 11893, 11899, 11908, 11923,
   11924, 11928, 11937, 11953, 11957, 12004, 12008, 12026, 12030, 12109,
   12134, 12165, 12166, 12182, 12192, 12196, 12202, 12208, 12218, 12224,
   12233, 12243, 12244, 12274, 12290, 12306, 12323, 12324, 12335, 12336,
   12347, 12348, 12349, 12353, 12370, 12392, 12407, 12408, 12409, 12410,
   12411, 12412, 12413, 12414, 12415, 12416, 12417, 12418, 12419, 12420,
   12421, 12422, 12423, 12424, 12425, 12426, 12427, 12428, 12429, 12430,
   12431, 12432, 12433, 12434, 12435, 12436, 12437, 12438, 12439, 12440,
   12441, 12442, 12443, 12444, 12445, 12446, 12447, 12448, 12449, 12450,
   12451, 12452, 12453, 12454, 12455, 12456, 12466, 12467, 12468, 12469,
   12470, 12471, 12472, 12473, 12474, 12475, 12476, 12477, 12478, 12479,
   12480, 12481, 12482, 12483, 12484, 12485, 12486, 12487, 12488, 12489,
   12490, 12491, 12492, 12493, 12494, 12495, 12496, 12497, 12498, 12499,
   12500, 12501, 12502, 12503, 12504, 12505, 12506, 12507, 12508, 12509,
   12510, 12511, 12512, 12513, 12514, 12515, 12516, 12517, 12518, 12519,
   12520, 12521, 12522, 12523, 12524, 12525, 12526, 12527, 12528, 12529,
   12530, 12531, 12532, 12533, 12534, 12535, 12536, 12537, 12538, 12539,
   12540, 12541, 12542, 12543, 12544, 12545, 12546, 12547, 12548, 12549,
   12550, 12551, 12552, 12553, 12554, 12555, 12556, 12557, 12558, 12559,
   12560, 12561, 12562, 12563, 12564, 12565, 12566, 12567, 12568, 12569,
   12570, 12571, 12572, 12573, 12574, 12575, 12576, 12577, 12578, 12579,
   12580, 12581, 12582, 12583, 12584, 12585, 12586, 12587, 12588, 12589,
   12590, 12591, 12592, 12593, 12594, 12595, 12596, 12597, 12598, 12599,
   12600, 12601, 12602, 12603, 12604, 12605, 12606, 12607, 12608, 12609,
   12610, 12611, 12612, 12613, 12614, 12615, 12616, 12617, 12618, 12619,
   12620, 12621, 12622, 12623, 12624, 12625, 12626, 12627, 12628, 12629,
   12630, 12631, 12632, 12633, 12634, 12635, 12636, 12637, 12638, 12639,
   12640, 12641, 12642, 12643, 12644, 12645, 12646, 12647, 12648, 12649,
   12650, 12651, 12652, 12653, 12654, 12655, 12656, 12657, 12658, 12659,
   12660, 12661, 12662, 12663, 12664, 12665, 12666, 12667, 12668, 12669,
   12670, 12671, 12672, 12673, 12674, 12675, 12676, 12677, 12678, 12679,
   12680, 12681, 12682, 12683, 12684, 12685, 12686, 12687, 12688, 12689,
   12690, 12691, 12692, 12693, 12694, 12695, 12696, 12697, 12698, 12699,
   12700, 12701, 12702, 12703, 12704, 12705, 12706, 12707, 12708, 12709,
   12710, 12711, 12712, 12713, 12714, 12715, 12716, 12717, 12718, 12719,
   12720, 12721, 12722, 12723, 12724, 12725, 12726, 12727, 12728, 12729,
   12730, 12731, 12732, 12733, 12734, 12735, 12736, 12737, 12738, 12739,
   12740, 12741, 12742, 12743, 12744, 12751, 12750, 12765, 12766, 12770,
   12771, 12775, 12775, 12857, 12858, 12859, 12860, 12864, 12865, 12869,
   12870, 12871, 12872, 12876, 12877, 12878, 12879, 12883, 12884, 12888,
   12930, 12949, 12960, 12973, 12987, 13002, 13021, 13048, 13061, 13088,
   13131, 13145, 13146, 13147, 13148, 13152, 13153, 13162, 13174, 13175,
   13176, 13182, 13188, 13200, 13199, 13215, 13216, 13220, 13221, 13225,
   13238, 13239, 13240, 13241, 13246, 13245, 13265, 13277, 13290, 13289,
   13322, 13323, 13327, 13328, 13332, 13333, 13334, 13335, 13337, 13336,
   13349, 13350, 13351, 13352, 13353, 13359, 13364, 13370, 13381, 13392,
   13396, 13406, 13411, 13418, 13430, 13442, 13451, 13453, 13457, 13458,
   13465, 13467, 13471, 13472, 13477, 13476, 13480, 13479, 13483, 13482,
   13486, 13485, 13488, 13489, 13490, 13491, 13492, 13493, 13494, 13495,
   13496, 13497, 13498, 13499, 13500, 13501, 13502, 13503, 13504, 13505,
   13506, 13507, 13508, 13509, 13510, 13511, 13512, 13513, 13517, 13518,
   13522, 13523, 13527, 13537, 13547, 13560, 13575, 13588, 13601, 13613,
   13618, 13626, 13631, 13639, 13668, 13675, 13683, 13691, 13697, 13701,
   13705, 13706, 13710, 13737, 13739, 13743, 13747, 13751, 13758, 13759,
   13763, 13764, 13768, 13769, 13773, 13774, 13780, 13786, 13792, 13802,
   13801, 13811, 13812, 13817, 13818, 13819, 13824, 13825, 13826, 13830,
   13831, 13835, 13847, 13856, 13866, 13875, 13889, 13890, 13895, 13894,
   13910, 13911, 13912, 13915, 13917, 13921, 13921, 13945, 13946, 13950,
   13951, 13952, 13956, 13960, 13967, 13970, 13968, 13984, 13991, 14012,
   14029, 14031, 14035, 14036, 14040, 14041, 14049, 14050, 14051, 14052,
   14058, 14064, 14074, 14076, 14078, 14083, 14084, 14085, 14086, 14087,
   14091, 14092, 14093, 14094, 14095, 14096, 14106, 14107, 14112, 14125,
   14138, 14140, 14142, 14147, 14152, 14154, 14156, 14162, 14163, 14165,
   14171, 14170, 14188, 14189, 14193, 14198, 14206, 14206, 14231, 14232,
   14237, 14238, 14240, 14242, 14260, 14266, 14271, 14253, 14333, 14351,
   14376, 14408, 14412, 14420, 14443, 14372, 14508, 14532, 14541, 14549,
   14507, 14570, 14574, 14578, 14582, 14586, 14590, 14597, 14604, 14611,
   14621, 14622, 14626, 14627, 14628, 14632, 14633, 14638, 14640, 14639,
   14645, 14646, 14650, 14660
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM",
  "ANY_SYM", "AS", "ASC", "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM",
  "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM",
  "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET", "CHAR_SYM", "CHECKSUM_SYM",
  "CHECK_SYM", "CIPHER_SYM", "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLOSE_SYM",
  "COALESCE", "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS",
  "COLUMN_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM",
  "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM",
  "GCS_SYM", "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM",
  "CONSISTENT_SYM", "CONSTRAINT", "CONSTRAINT_CATALOG_SYM",
  "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM",
  "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM", "CONVERT_SYM",
  "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CURDATE",
  "CURRENT_USER", "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME", "DATABASE",
  "DATABASES", "DATAFILE_SYM", "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL",
  "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM",
  "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM",
  "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFINER_SYM",
  "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM", "DESC", "DESCRIBE",
  "DES_KEY_FILE", "DETERMINISTIC_SYM", "DIRECTORY_SYM", "DISABLE_SYM",
  "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM",
  "DROP", "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM",
  "EACH_SYM", "ELSE", "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END",
  "ENDS_SYM", "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ",
  "EQUAL_SYM", "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM",
  "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM", "EXECUTE_SYM", "EXISTS",
  "EXIT_SYM", "EXPANSION_SYM", "EXTENDED_SYM", "EXTENT_SIZE_SYM",
  "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM", "FETCH_SYM",
  "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM",
  "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM", "FOUND_SYM", "FROM",
  "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GENERAL",
  "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT", "GLOBAL_SYM",
  "GRANT", "GRANTS", "GROUP_SYM", "GROUP_CONCAT_SYM", "GT_SYM",
  "HANDLER_SYM", "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM",
  "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM", "HOUR_MICROSECOND_SYM",
  "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT",
  "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INFILE",
  "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM",
  "INSERT", "INSERT_METHOD", "INSTALL_SYM", "INTERVAL_SYM", "INTO",
  "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM", "IPC_SYM", "IS",
  "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM", "KEYS",
  "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM",
  "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM",
  "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING",
  "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM",
  "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM",
  "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT", "MASTER_CONNECT_RETRY_SYM",
  "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM",
  "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM",
  "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM",
  "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMERIC_SYM", "NVARCHAR_SYM", "OFFSET_SYM",
  "OLD_PASSWORD", "ON", "ONE_SHOT_SYM", "ONE_SYM", "OPEN_SYM", "OPTIMIZE",
  "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM", "ORDER_SYM",
  "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM", "OWNER_SYM",
  "PACK_KEYS_SYM", "PAGE_SYM", "PARAM_MARKER", "PARSER_SYM", "PARTIAL",
  "PARTITIONING_SYM", "PARTITIONS_SYM", "PARTITION_SYM", "PASSWORD",
  "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM", "POLYGON",
  "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM", "PRESERVE_SYM",
  "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM", "PROCESS",
  "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM", "PURGE",
  "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM",
  "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM",
  "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM",
  "SQLWARNING_SYM", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM",
  "SQL_THREAD", "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM",
  "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM",
  "STRAIGHT_JOIN", "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM",
  "SUBJECT_SYM", "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING",
  "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM",
  "SYSDATE", "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB",
  "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM",
  "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM",
  "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM",
  "UNCOMMITTED_SYM", "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM",
  "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM", "WITH",
  "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM",
  "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM",
  "YEAR_SYM", "ZEROFILL", "'|'", "'&'", "'-'", "'+'", "'*'", "'/'", "'%'",
  "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'", "'}'", "';'", "'@'",
  "'.'", "':'", "$accept", "query", "$@1", "opt_end_of_input",
  "verb_clause", "statement", "deallocate", "deallocate_or_drop",
  "prepare", "prepare_src", "execute", "$@2", "execute_using",
  "execute_var_list", "execute_var_ident", "help", "$@3", "change", "$@4",
  "master_defs", "master_def", "ignore_server_id_list", "ignore_server_id",
  "master_file_def", "create", "$@5", "$@6", "$@7", "$@8", "$@9", "$@10",
  "server_def", "server_options_list", "server_option", "event_tail",
  "$@11", "ev_schedule_time", "$@12", "opt_ev_status", "ev_starts",
  "ev_ends", "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@13", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@14", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@15", "$@16", "sp_cursor_stmt", "$@17",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "sqlstate", "opt_value", "sp_hcond", "signal_stmt", "signal_value",
  "opt_signal_value", "opt_set_signal_information",
  "signal_information_item_list", "signal_allowed_expr",
  "signal_condition_information_item_name", "resignal_stmt",
  "sp_decl_idents", "sp_opt_default", "sp_proc_stmt", "sp_proc_stmt_if",
  "$@18", "sp_proc_stmt_statement", "$@19", "sp_proc_stmt_return", "$@20",
  "sp_proc_stmt_unlabeled", "$@21", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch",
  "$@22", "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list",
  "sp_if", "$@23", "$@24", "$@25", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "$@26", "$@27", "searched_case_stmt", "$@28",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@29", "$@30", "searched_when_clause", "$@31",
  "$@32", "else_clause_opt", "sp_labeled_control", "$@33", "sp_opt_label",
  "sp_labeled_block", "$@34", "sp_unlabeled_block", "$@35",
  "sp_block_content", "$@36", "sp_unlabeled_control", "$@37", "$@38",
  "$@39", "trg_action_time", "trg_event", "change_tablespace_access",
  "change_tablespace_info", "tablespace_info", "opt_logfile_group_name",
  "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@40", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create2",
  "create2a", "$@41", "create3", "$@42", "$@43", "opt_create_partitioning",
  "opt_partitioning", "partitioning", "$@44", "have_partitioning",
  "partition_entry", "$@45", "partition", "part_type_def", "$@46",
  "opt_linear", "part_field_list", "part_field_item_list",
  "part_field_item", "part_column_list", "part_func", "sub_part_func",
  "opt_num_parts", "opt_sub_part", "$@47", "$@48", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_num_subparts", "part_defs",
  "part_def_list", "part_definition", "$@49", "part_name",
  "opt_part_values", "$@50", "$@51", "part_func_max", "part_values_in",
  "part_value_list", "part_value_item", "$@52", "$@53",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@54", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@55", "$@56", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@57", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "$@58", "type", "$@59", "$@60",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@61", "$@62", "$@63", "$@64", "$@65", "$@66",
  "$@67", "ev_alter_on_schedule_completion", "opt_ev_rename_to",
  "opt_ev_sql_stmt", "ident_or_empty", "alter_commands", "$@68", "$@69",
  "$@70", "remove_partitioning", "all_or_alt_part_name_list",
  "add_partition_rule", "$@71", "add_part_extra", "reorg_partition_rule",
  "$@72", "reorg_parts_rule", "$@73", "alt_part_name_list",
  "alt_part_name_item", "alter_list", "add_column", "alter_list_item",
  "$@74", "$@75", "$@76", "opt_column", "opt_ignore", "opt_restrict",
  "opt_place", "opt_to", "slave", "$@77", "$@78", "start",
  "start_transaction_opts", "slave_thread_opts", "$@79",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@80", "opt_checksum_type", "repair",
  "$@81", "opt_mi_repair_type", "mi_repair_types", "mi_repair_type",
  "analyze", "$@82", "binlog_base64_event", "check", "$@83",
  "opt_mi_check_type", "mi_check_types", "mi_check_type", "optimize",
  "$@84", "opt_no_write_to_binlog", "rename", "$@85", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@86",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@87",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@88", "cache_keys_spec", "$@89",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "$@90",
  "select_part2", "$@91", "$@92", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "optional_braces", "expr", "bool_pri",
  "predicate", "bit_expr", "or", "and", "not", "not2", "comp_op",
  "all_or_any", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@93", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "$@94", "$@95", "$@96",
  "variable", "$@97", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "in_sum_expr", "$@98",
  "cast_type", "opt_expr_list", "expr_list", "ident_list_arg",
  "ident_list", "opt_expr", "opt_else", "when_list", "table_ref",
  "join_table_list", "esc_table_ref", "derived_table_list", "join_table",
  "$@99", "$@100", "$@101", "$@102", "$@103", "$@104", "$@105",
  "normal_join", "table_factor", "$@106", "select_derived_union", "$@107",
  "$@108", "select_init2_derived", "select_part2_derived", "$@109",
  "$@110", "select_derived", "$@111", "select_derived2", "$@112", "$@113",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@114",
  "$@115", "index_hints_list", "opt_index_hints_list", "$@116",
  "opt_key_definition", "$@117", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@118", "having_clause", "$@119", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@120", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_clause", "$@121", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@122",
  "select_var_list", "select_var_ident", "into", "$@123",
  "into_destination", "$@124", "$@125", "do", "$@126", "drop", "$@127",
  "$@128", "$@129", "table_list", "table_name", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "insert", "$@130",
  "$@131", "replace", "$@132", "$@133", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "$@134", "fields", "insert_values", "$@135", "$@136", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@137", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@138", "update", "$@139", "$@140", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@141", "single_multi", "$@142", "$@143", "$@144", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@145", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@146", "show_param",
  "$@147", "$@148", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@149", "$@150", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "$@151",
  "flush_options", "$@152", "$@153", "opt_with_read_lock",
  "flush_options_list", "flush_option", "opt_table_list", "reset", "$@154",
  "reset_options", "reset_option", "$@155", "slave_reset_options", "purge",
  "$@156", "purge_options", "purge_option", "kill", "kill_option", "use",
  "load", "$@157", "$@158", "$@159", "$@160", "data_or_xml", "opt_local",
  "load_data_lock", "opt_duplicate", "opt_field_term", "field_term_list",
  "field_term", "opt_line_term", "line_term_list", "line_term",
  "opt_xml_rows_identified_by", "opt_ignore_lines", "lines_or_rows",
  "opt_field_or_var_spec", "fields_or_vars", "field_or_var",
  "opt_load_data_set_spec", "load_data_set_list", "load_data_set_elem",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "$@161", "opt_option", "option_value_list", "option_type_value",
  "$@162", "option_type", "option_type2", "opt_var_type",
  "opt_var_ident_type", "ext_option_value", "sys_option_value",
  "option_value", "internal_variable_name", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@163",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@164", "handler", "$@165", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@166",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@167", "$@168", "$@169",
  "$@170", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "grant_user",
  "opt_column_list", "column_list", "column_list_id", "require_clause",
  "grant_options", "opt_grant_option", "grant_option_list", "grant_option",
  "begin", "$@171", "opt_work", "opt_chain", "opt_release",
  "opt_savepoint", "commit", "rollback", "savepoint", "release",
  "union_clause", "union_list", "$@172", "union_opt",
  "opt_union_order_or_limit", "union_order_or_limit", "$@173",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@174", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@175",
  "view_list_opt", "view_list", "view_select", "$@176", "view_select_aux",
  "view_check_option", "trigger_tail", "$@177", "$@178", "$@179",
  "udf_tail", "sf_tail", "$@180", "$@181", "$@182", "$@183", "$@184",
  "sp_tail", "$@185", "$@186", "$@187", "$@188", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@189", "opt_migrate", "install", "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   124,    38,    45,    43,    42,    47,
      37,    94,   126,    40,    41,    44,    33,   123,   125,    59,
      64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   613,   614,   615,   614,   614,   616,   616,   617,   617,
     618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
     618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
     618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
     618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
     618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
     618,   619,   620,   620,   621,   622,   622,   624,   623,   625,
     625,   626,   626,   627,   629,   628,   631,   630,   632,   632,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   634,   634,   634,   635,   636,
     636,   636,   636,   638,   637,   639,   637,   640,   637,   641,
     637,   642,   637,   643,   637,   637,   637,   637,   637,   644,
     645,   645,   646,   646,   646,   646,   646,   646,   646,   648,
     647,   650,   649,   649,   651,   651,   651,   651,   652,   652,
     653,   653,   654,   654,   655,   655,   656,   656,   658,   657,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   660,   661,   661,   662,   662,   663,   663,
     664,   664,   664,   664,   664,   664,   664,   665,   665,   665,
     666,   666,   668,   667,   669,   669,   670,   670,   671,   671,
     672,   672,   673,   673,   674,   675,   676,   676,   677,   677,
     678,   679,   679,   679,   679,   680,   680,   681,   681,   682,
     682,   684,   683,   683,   685,   683,   683,   687,   686,   688,
     688,   689,   689,   690,   691,   691,   692,   693,   693,   694,
     694,   694,   694,   694,   695,   696,   696,   697,   697,   698,
     698,   699,   699,   700,   700,   700,   701,   701,   701,   701,
     701,   701,   701,   701,   701,   701,   701,   701,   702,   703,
     703,   704,   704,   705,   705,   705,   705,   705,   705,   705,
     705,   705,   705,   705,   705,   705,   707,   706,   709,   708,
     711,   710,   713,   712,   714,   715,   716,   718,   717,   719,
     720,   720,   720,   721,   721,   723,   724,   725,   722,   726,
     726,   726,   727,   727,   729,   730,   728,   732,   731,   733,
     733,   734,   734,   736,   737,   735,   739,   740,   738,   741,
     741,   743,   742,   744,   744,   746,   745,   748,   747,   750,
     749,   751,   752,   753,   751,   754,   751,   755,   755,   756,
     756,   756,   757,   758,   759,   760,   760,   761,   761,   762,
     763,   764,   764,   766,   765,   767,   767,   767,   768,   768,
     768,   769,   770,   770,   770,   771,   771,   771,   771,   771,
     771,   771,   771,   772,   773,   773,   773,   774,   774,   774,
     774,   774,   775,   776,   776,   776,   777,   777,   777,   777,
     777,   777,   777,   778,   779,   779,   779,   780,   780,   780,
     781,   782,   783,   784,   785,   786,   786,   786,   787,   788,
     789,   790,   791,   792,   793,   794,   795,   796,   796,   797,
     797,   798,   798,   799,   799,   799,   799,   800,   801,   800,
     802,   803,   802,   804,   802,   805,   806,   806,   808,   807,
     809,   811,   810,   812,   813,   814,   813,   813,   813,   813,
     813,   815,   815,   816,   816,   817,   817,   818,   819,   820,
     821,   822,   822,   823,   824,   823,   825,   823,   826,   826,
     827,   828,   829,   829,   830,   830,   831,   831,   833,   832,
     834,   835,   836,   835,   837,   835,   838,   838,   839,   839,
     840,   840,   842,   843,   841,   844,   844,   845,   845,   846,
     846,   847,   847,   849,   848,   850,   851,   851,   852,   852,
     853,   853,   853,   853,   853,   853,   853,   853,   855,   856,
     854,   857,   857,   858,   858,   859,   859,   860,   860,   861,
     861,   862,   862,   863,   864,   864,   865,   865,   866,   866,
     867,   867,   867,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   869,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   870,   871,
     872,   873,   874,   874,   874,   874,   874,   874,   874,   875,
     875,   875,   876,   876,   877,   877,   877,   877,   878,   879,
     879,   880,   880,   881,   881,   882,   882,   882,   882,   882,
     882,   883,   883,   884,   885,   885,   886,   888,   887,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   890,   889,   891,   889,   889,   889,
     892,   892,   892,   892,   892,   892,   892,   892,   893,   894,
     894,   895,   895,   896,   896,   896,   896,   896,   897,   897,
     897,   897,   897,   898,   898,   898,   899,   899,   899,   900,
     901,   901,   902,   902,   903,   903,   903,   904,   904,   904,
     904,   905,   905,   906,   906,   907,   907,   908,   908,   909,
     909,   909,   909,   909,   909,   909,   909,   909,   909,   909,
     910,   911,   911,   912,   912,   913,   913,   914,   914,   915,
     915,   916,   916,   917,   917,   918,   919,   919,   920,   920,
     921,   921,   922,   922,   922,   923,   923,   923,   924,   924,
     924,   924,   924,   924,   924,   925,   925,   926,   926,   927,
     928,   928,   929,   929,   930,   930,   930,   930,   931,   931,
     931,   931,   931,   932,   932,   932,   932,   932,   933,   934,
     934,   935,   935,   936,   936,   937,   937,   937,   938,   938,
     939,   940,   941,   942,   942,   943,   943,   944,   944,   945,
     945,   946,   946,   947,   947,   948,   948,   949,   949,   950,
     950,   951,   951,   952,   953,   953,   954,   954,   954,   955,
     955,   956,   956,   957,   957,   958,   958,   959,   959,   961,
     960,   962,   960,   960,   963,   960,   964,   960,   965,   960,
     966,   960,   967,   960,   960,   960,   960,   960,   960,   968,
     968,   968,   968,   969,   969,   970,   970,   971,   971,   972,
     972,   972,   972,   972,   972,   972,   972,   972,   972,   973,
     972,   972,   974,   972,   975,   972,   972,   972,   972,   976,
     977,   977,   979,   978,   980,   980,   980,   982,   981,   983,
     984,   983,   985,   985,   986,   987,   987,   988,   989,   989,
     989,   990,   989,   991,   992,   989,   989,   989,   989,   989,
     989,   989,   989,   989,   989,   989,   989,   989,   989,   993,
     993,   994,   994,   995,   995,   995,   996,   996,   996,   997,
     997,   997,   997,   999,   998,   998,  1000,   998,   998,  1001,
    1002,  1002,  1004,  1003,  1005,  1005,  1006,  1006,  1006,  1007,
    1007,  1008,  1008,  1010,  1009,  1011,  1011,  1011,  1013,  1012,
    1014,  1014,  1015,  1015,  1016,  1016,  1016,  1018,  1017,  1019,
    1021,  1020,  1022,  1022,  1023,  1023,  1024,  1024,  1024,  1024,
    1024,  1024,  1026,  1025,  1027,  1027,  1027,  1029,  1028,  1028,
    1030,  1030,  1031,  1031,  1032,  1034,  1033,  1035,  1035,  1036,
    1036,  1037,  1038,  1039,  1039,  1041,  1040,  1042,  1042,  1043,
    1043,  1044,  1045,  1047,  1046,  1049,  1048,  1050,  1050,  1051,
    1051,  1052,  1053,  1053,  1054,  1054,  1055,  1055,  1057,  1056,
    1059,  1060,  1058,  1061,  1061,  1061,  1061,  1061,  1062,  1062,
    1063,  1063,  1064,  1064,  1065,  1065,  1065,  1066,  1066,  1066,
    1067,  1067,  1067,  1068,  1068,  1069,  1070,  1071,  1071,  1071,
    1071,  1071,  1072,  1072,  1073,  1073,  1073,  1073,  1073,  1073,
    1073,  1073,  1073,  1073,  1073,  1074,  1074,  1074,  1074,  1074,
    1074,  1075,  1075,  1075,  1075,  1075,  1075,  1075,  1075,  1075,
    1075,  1075,  1075,  1075,  1075,  1076,  1076,  1076,  1076,  1076,
    1076,  1076,  1076,  1076,  1076,  1076,  1076,  1076,  1076,  1076,
    1077,  1077,  1078,  1078,  1079,  1079,  1080,  1080,  1081,  1081,
    1081,  1081,  1081,  1081,  1082,  1082,  1083,  1083,  1083,  1083,
    1083,  1083,  1083,  1083,  1083,  1083,  1083,  1083,  1083,  1083,
    1083,  1083,  1083,  1083,  1083,  1083,  1083,  1083,  1083,  1083,
    1083,  1083,  1083,  1083,  1083,  1083,  1084,  1084,  1084,  1084,
    1084,  1084,  1084,  1084,  1084,  1084,  1084,  1084,  1084,  1084,
    1084,  1084,  1084,  1084,  1084,  1084,  1084,  1084,  1084,  1084,
    1084,  1084,  1084,  1085,  1085,  1085,  1085,  1085,  1085,  1085,
    1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,
    1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,  1086,  1086,
    1086,  1086,  1086,  1086,  1086,  1086,  1086,  1086,  1086,  1086,
    1086,  1086,  1086,  1086,  1086,  1087,  1087,  1087,  1087,  1087,
    1087,  1087,  1087,  1089,  1088,  1088,  1090,  1090,  1091,  1091,
    1092,  1092,  1093,  1093,  1094,  1094,  1095,  1096,  1096,  1096,
    1096,  1096,  1096,  1096,  1097,  1098,  1096,  1096,  1096,  1096,
    1096,  1096,  1096,  1096,  1096,  1096,  1096,  1099,  1096,  1101,
    1100,  1102,  1102,  1102,  1103,  1103,  1104,  1104,  1105,  1105,
    1107,  1106,  1108,  1108,  1108,  1108,  1108,  1108,  1108,  1108,
    1108,  1108,  1108,  1109,  1109,  1110,  1110,  1111,  1111,  1112,
    1112,  1113,  1113,  1114,  1114,  1115,  1115,  1116,  1116,  1117,
    1118,  1118,  1119,  1119,  1120,  1120,  1121,  1120,  1122,  1120,
    1123,  1120,  1120,  1124,  1120,  1125,  1120,  1120,  1126,  1120,
    1127,  1120,  1120,  1128,  1128,  1128,  1130,  1129,  1129,  1129,
    1131,  1132,  1133,  1131,  1134,  1136,  1137,  1135,  1139,  1138,
    1141,  1142,  1140,  1143,  1144,  1145,  1145,  1146,  1146,  1146,
    1146,  1147,  1147,  1149,  1148,  1150,  1148,  1151,  1151,  1152,
    1153,  1152,  1155,  1154,  1156,  1156,  1157,  1157,  1158,  1158,
    1159,  1159,  1160,  1160,  1160,  1160,  1160,  1160,  1160,  1160,
    1160,  1160,  1160,  1160,  1161,  1161,  1161,  1161,  1161,  1161,
    1161,  1161,  1161,  1162,  1162,  1162,  1162,  1163,  1163,  1163,
    1164,  1164,  1165,  1165,  1166,  1167,  1166,  1168,  1169,  1168,
    1170,  1170,  1171,  1171,  1172,  1172,  1173,  1173,  1173,  1174,
    1175,  1175,  1176,  1177,  1177,  1179,  1178,  1180,  1180,  1181,
    1181,  1181,  1182,  1182,  1183,  1183,  1184,  1185,  1185,  1185,
    1186,  1186,  1186,  1186,  1186,  1187,  1187,  1188,  1188,  1188,
    1188,  1188,  1188,  1189,  1189,  1189,  1189,  1189,  1190,  1190,
    1190,  1190,  1190,  1191,  1191,  1191,  1191,  1192,  1193,  1193,
    1194,  1195,  1194,  1196,  1196,  1197,  1197,  1198,  1200,  1199,
    1201,  1201,  1202,  1202,  1204,  1203,  1206,  1207,  1205,  1205,
    1205,  1209,  1208,  1211,  1210,  1212,  1210,  1210,  1210,  1210,
    1210,  1210,  1213,  1210,  1210,  1210,  1210,  1210,  1210,  1214,
    1214,  1215,  1216,  1216,  1217,  1218,  1218,  1219,  1219,  1221,
    1222,  1220,  1224,  1225,  1223,  1226,  1226,  1226,  1226,  1227,
    1227,  1228,  1228,  1229,  1230,  1230,  1230,  1231,  1230,  1232,
    1232,  1233,  1233,  1234,  1233,  1235,  1233,  1236,  1236,  1237,
    1237,  1238,  1239,  1239,  1240,  1240,  1242,  1241,  1243,  1243,
    1244,  1244,  1245,  1245,  1246,  1247,  1246,  1249,  1250,  1248,
    1251,  1251,  1252,  1253,  1253,  1254,  1255,  1255,  1257,  1256,
    1259,  1258,  1260,  1258,  1261,  1258,  1262,  1262,  1263,  1263,
    1264,  1264,  1265,  1265,  1266,  1266,  1266,  1268,  1267,  1269,
    1269,  1270,  1270,  1271,  1271,  1272,  1272,  1272,  1272,  1272,
    1272,  1272,  1272,  1272,  1273,  1273,  1275,  1274,  1276,  1276,
    1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,
    1277,  1276,  1278,  1276,  1276,  1276,  1276,  1276,  1276,  1276,
    1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,
    1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,
    1276,  1276,  1276,  1276,  1276,  1279,  1279,  1279,  1280,  1280,
    1281,  1281,  1282,  1282,  1283,  1283,  1284,  1284,  1285,  1285,
    1286,  1286,  1287,  1287,  1287,  1289,  1288,  1290,  1288,  1291,
    1291,  1292,  1292,  1292,  1293,  1293,  1293,  1295,  1294,  1297,
    1298,  1296,  1296,  1299,  1299,  1300,  1300,  1301,  1301,  1301,
    1301,  1301,  1301,  1301,  1301,  1301,  1301,  1301,  1301,  1301,
    1301,  1301,  1302,  1302,  1304,  1303,  1305,  1305,  1307,  1306,
    1306,  1306,  1308,  1308,  1310,  1309,  1311,  1312,  1312,  1313,
    1314,  1314,  1314,  1315,  1317,  1318,  1319,  1320,  1316,  1321,
    1321,  1322,  1322,  1323,  1323,  1323,  1324,  1324,  1324,  1325,
    1325,  1326,  1326,  1327,  1327,  1327,  1327,  1328,  1328,  1329,
    1329,  1330,  1330,  1331,  1331,  1332,  1332,  1333,  1333,  1334,
    1334,  1334,  1335,  1335,  1336,  1336,  1337,  1337,  1338,  1338,
    1339,  1340,  1340,  1340,  1340,  1341,  1341,  1341,  1342,  1343,
    1343,  1343,  1344,  1344,  1344,  1344,  1344,  1344,  1344,  1344,
    1344,  1344,  1344,  1344,  1345,  1345,  1345,  1345,  1345,  1346,
    1346,  1347,  1347,  1348,  1349,  1349,  1350,  1350,  1351,  1351,
    1351,  1352,  1352,  1352,  1352,  1353,  1353,  1353,  1354,  1354,
    1355,  1356,  1356,  1357,  1358,  1359,  1360,  1360,  1361,  1361,
    1362,  1362,  1362,  1363,  1363,  1363,  1364,  1364,  1364,  1364,
    1364,  1364,  1364,  1364,  1364,  1364,  1364,  1364,  1364,  1364,
    1364,  1364,  1364,  1364,  1364,  1364,  1364,  1364,  1364,  1364,
    1364,  1364,  1364,  1364,  1364,  1364,  1364,  1364,  1364,  1364,
    1364,  1364,  1364,  1364,  1364,  1364,  1364,  1364,  1364,  1364,
    1364,  1364,  1364,  1364,  1364,  1364,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1367,  1366,  1368,  1368,  1369,
    1369,  1371,  1370,  1372,  1372,  1372,  1372,  1373,  1373,  1374,
    1374,  1374,  1374,  1375,  1375,  1375,  1375,  1376,  1376,  1377,
    1377,  1378,  1378,  1378,  1378,  1378,  1378,  1378,  1379,  1379,
    1379,  1380,  1380,  1380,  1380,  1381,  1381,  1381,  1382,  1382,
    1382,  1382,  1382,  1384,  1383,  1385,  1385,  1386,  1386,  1387,
    1388,  1388,  1388,  1388,  1390,  1389,  1391,  1391,  1392,  1391,
    1393,  1393,  1394,  1394,  1395,  1395,  1395,  1395,  1396,  1395,
    1397,  1397,  1397,  1397,  1397,  1398,  1399,  1399,  1399,  1399,
    1399,  1400,  1401,  1401,  1401,  1401,  1402,  1402,  1403,  1403,
    1404,  1404,  1405,  1405,  1407,  1406,  1408,  1406,  1409,  1406,
    1410,  1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,
    1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,
    1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,  1411,  1411,
    1412,  1412,  1413,  1413,  1413,  1414,  1414,  1414,  1414,  1415,
    1415,  1416,  1416,  1417,  1417,  1417,  1417,  1417,  1418,  1418,
    1419,  1419,  1420,  1421,  1421,  1421,  1421,  1421,  1422,  1422,
    1423,  1423,  1424,  1424,  1425,  1425,  1425,  1425,  1425,  1427,
    1426,  1428,  1428,  1429,  1429,  1429,  1430,  1430,  1430,  1431,
    1431,  1432,  1433,  1433,  1434,  1435,  1436,  1436,  1438,  1437,
    1439,  1439,  1439,  1440,  1440,  1442,  1441,  1443,  1443,  1444,
    1444,  1444,  1445,  1445,  1446,  1447,  1446,  1448,  1449,  1450,
    1451,  1451,  1452,  1452,  1453,  1453,  1453,  1453,  1453,  1453,
    1453,  1453,  1454,  1454,  1454,  1455,  1455,  1455,  1455,  1455,
    1456,  1456,  1456,  1456,  1456,  1456,  1457,  1457,  1458,  1459,
    1460,  1460,  1460,  1461,  1462,  1462,  1462,  1463,  1463,  1463,
    1465,  1464,  1466,  1466,  1467,  1467,  1469,  1468,  1470,  1470,
    1471,  1471,  1471,  1471,  1473,  1474,  1475,  1472,  1476,  1476,
    1478,  1479,  1480,  1481,  1482,  1477,  1484,  1485,  1486,  1487,
    1483,  1488,  1488,  1488,  1488,  1488,  1488,  1489,  1489,  1489,
    1490,  1490,  1491,  1491,  1491,  1492,  1492,  1493,  1494,  1493,
    1495,  1495,  1496,  1497
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     4,     1,     2,     0,     4,     0,
       2,     3,     1,     2,     0,     3,     0,     5,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     5,     1,     0,     1,     3,     1,     3,
       3,     3,     3,     0,     7,     0,    12,     0,    12,     0,
      12,     0,     6,     0,     3,     4,     4,     3,     2,    10,
       1,     3,     2,     2,     2,     2,     2,     2,     2,     0,
      13,     0,     6,     2,     0,     1,     3,     1,     0,     2,
       0,     2,     0,     1,     3,     4,     0,     2,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     3,     1,     0,     2,     0,     2,
       2,     2,     2,     2,     3,     3,     1,     1,     1,     2,
       3,     3,     0,     4,     0,     3,     0,     1,     3,     1,
       0,     1,     3,     1,     0,     3,     0,     1,     3,     1,
       4,     0,     1,     1,     1,     0,     3,     2,     3,     0,
       3,     0,     5,     5,     0,     7,     5,     0,     2,     1,
       1,     1,     3,     1,     1,     1,     3,     0,     1,     1,
       1,     1,     2,     1,     3,     1,     1,     0,     1,     0,
       2,     3,     5,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       3,     0,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     5,     0,     2,
       0,     3,     0,     2,     2,     2,     2,     0,     6,     2,
       0,     2,     1,     1,     3,     0,     0,     0,     7,     0,
       2,     2,     1,     1,     0,     0,     8,     0,     6,     1,
       2,     1,     2,     0,     0,     6,     0,     0,     6,     0,
       2,     0,     5,     0,     1,     0,     5,     0,     2,     0,
       5,     4,     0,     0,     8,     0,     7,     1,     1,     1,
       1,     1,     2,     4,     5,     0,     4,     4,     4,     3,
       3,     2,     2,     0,     2,     1,     2,     3,     1,     1,
       1,     1,     1,     2,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     3,     1,     1,     1,
       1,     1,     1,     1,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     3,     1,     1,     1,
       2,     2,     2,     1,     1,     1,     1,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     4,     0,     1,     1,
       1,     1,     1,     2,     3,     2,     4,     5,     0,     5,
       0,     0,     5,     0,     7,     1,     0,     1,     0,     4,
       0,     0,     3,     5,     5,     0,     4,     2,     2,     2,
       2,     0,     1,     0,     1,     1,     3,     1,     4,     5,
       5,     0,     2,     0,     0,     7,     0,     9,     1,     3,
       1,     1,     0,     2,     0,     3,     1,     3,     0,     6,
       1,     0,     0,     5,     0,     4,     1,     1,     1,     3,
       1,     3,     0,     0,     5,     1,     3,     1,     1,     0,
       3,     1,     3,     0,     4,     1,     0,     1,     2,     1,
       3,     4,     3,     3,     3,     4,     4,     3,     0,     0,
       6,     0,     1,     0,     1,     1,     2,     1,     1,     0,
       1,     1,     2,     1,     0,     3,     0,     1,     1,     2,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     0,     6,     1,     1,
       3,     4,     4,     2,     2,     2,     3,     3,     4,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     2,     2,     7,     8,     8,     8,     8,
       2,     0,     1,     4,     0,     1,     2,     0,     4,     3,
       3,     3,     1,     2,     1,     1,     3,     2,     3,     2,
       2,     1,     3,     3,     2,     3,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     2,     3,     2,     3,     2,
       2,     3,     3,     3,     0,     6,     0,     6,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     2,     1,     2,     3,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     1,     1,     5,
       0,     1,     2,     1,     1,     1,     1,     3,     3,     3,
       3,     0,     1,     0,     1,     0,     1,     2,     1,     1,
       2,     2,     4,     1,     3,     2,     1,     2,     2,     2,
       2,     2,     1,     2,     1,     1,     1,     1,     1,     0,
       2,     1,     1,     1,     1,     1,     0,     2,     1,     1,
       0,     1,     1,     2,     2,     1,     2,     2,     0,     1,
       1,     1,     3,     1,     3,     0,     1,     0,     1,     5,
       0,     3,     3,     1,     0,     2,     2,     2,     0,     3,
       3,     6,     6,     1,     1,     2,     2,     2,     1,     2,
       2,     1,     1,     0,     1,     1,     1,     1,     0,     1,
       1,     1,     0,     1,     2,     0,     1,     0,     1,     0,
       1,     1,     2,     1,     2,     1,     2,     2,     2,     3,
       2,     1,     1,     1,     1,     3,     1,     1,     1,     4,
       2,     1,     4,     0,     1,     0,     2,     1,     3,     0,
       6,     0,     5,     7,     0,     5,     0,     5,     0,     5,
       0,     4,     0,    10,     3,     4,     3,     3,     7,     0,
       3,     1,     4,     0,     3,     0,     2,     0,     1,     0,
       2,     2,     2,     2,     1,     1,     1,     3,     4,     0,
       6,     4,     0,     5,     0,     6,     4,     3,     1,     2,
       1,     1,     0,     5,     0,     3,     2,     0,     5,     0,
       0,     6,     1,     3,     1,     1,     3,     2,     3,     2,
       4,     0,     6,     0,     0,     8,     4,     4,     3,     3,
       2,     2,     6,     5,     3,     5,     1,     1,     1,     0,
       1,     0,     1,     0,     1,     1,     0,     2,     1,     0,
       1,     1,     1,     0,     5,     3,     0,     5,     3,     3,
       0,     3,     0,     2,     1,     3,     0,     1,     1,     0,
       2,     1,     3,     0,     5,     0,     1,     1,     0,     6,
       0,     1,     1,     2,     1,     1,     1,     0,     5,     2,
       0,     5,     0,     1,     1,     2,     1,     1,     1,     1,
       1,     2,     0,     5,     0,     1,     1,     0,     4,     4,
       3,     5,     1,     3,     3,     0,     6,     1,     1,     1,
       3,     2,     3,     1,     1,     0,     6,     1,     1,     1,
       3,     3,     4,     0,     6,     0,     2,     0,     4,     0,
       2,     1,     2,     4,     2,     3,     2,     3,     0,     3,
       0,     0,     6,     2,     1,     1,     2,     2,     8,     4,
       0,     1,     2,     1,     1,     1,     1,     0,     2,     4,
       3,     1,     1,     3,     4,     0,     0,     0,     2,     2,
       1,     1,     0,     2,     3,     3,     3,     2,     3,     4,
       3,     4,     3,     4,     1,     3,     4,     3,     3,     6,
       1,     5,     6,     5,     7,     6,     8,     5,     6,     4,
       4,     5,     3,     4,     1,     3,     3,     3,     3,     3,
       3,     5,     5,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     1,     1,     3,     2,     2,     2,
       2,     3,     3,     5,     6,     4,     4,     7,     2,     6,
       5,     6,     6,     4,     4,     5,     4,     6,     2,     4,
       4,     4,    10,     6,     8,     6,     4,     4,     6,     4,
       4,     4,     6,     4,     7,     7,     7,     6,     6,     6,
       6,     3,     4,     6,     8,     2,     2,     4,     8,     8,
       6,     6,     2,     4,     6,     6,     8,     8,     6,     8,
       6,     2,     4,     8,     8,     2,     2,     2,     4,     4,
       4,     4,     3,     8,     4,     6,     4,     4,     4,     6,
       8,     6,     4,     6,     1,     6,     4,     4,     4,     4,
       4,     6,     4,     0,     5,     6,     2,     3,     0,     4,
       0,     3,     0,     1,     1,     3,     4,     4,     5,     4,
       4,     4,     5,     4,     0,     0,     7,     4,     5,     4,
       5,     4,     4,     4,     4,     4,     5,     0,     8,     0,
       3,     3,     1,     4,     0,     1,     0,     2,     0,     1,
       0,     3,     2,     3,     2,     1,     2,     1,     2,     1,
       1,     1,     2,     0,     1,     1,     3,     1,     3,     1,
       3,     0,     1,     0,     2,     4,     5,     1,     1,     1,
       1,     4,     1,     3,     3,     3,     0,     6,     0,     6,
       0,     8,     4,     0,     8,     0,    10,     6,     0,     8,
       0,    10,     6,     1,     2,     2,     0,     4,     3,     5,
       2,     0,     0,     7,     1,     0,     0,     6,     0,     3,
       0,     0,     5,     0,     1,     0,     1,     0,     2,     3,
       3,     1,     1,     0,     7,     0,     7,     1,     2,     0,
       0,     2,     0,     2,     0,     1,     1,     1,     1,     3,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     1,     1,
       0,     2,     0,     1,     0,     0,     3,     0,     0,     3,
       2,     0,     0,     4,     4,     2,     0,     1,     1,     3,
       3,     1,     2,     0,     1,     0,     4,     4,     2,     0,
       1,     1,     0,     1,     0,     1,     2,     1,     3,     3,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     0,     6,     0,     1,     3,     1,     3,     0,     2,
       3,     1,     2,     1,     0,     3,     0,     0,     7,     2,
       1,     0,     3,     0,     7,     0,     6,     4,     6,     4,
       4,     4,     0,     6,     4,     4,     5,     6,     4,     1,
       3,     1,     1,     3,     1,     0,     2,     0,     1,     0,
       0,     8,     0,     0,     6,     0,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     3,     4,     0,     3,     3,
       1,     2,     2,     0,     3,     0,     5,     3,     1,     3,
       1,     3,     1,     1,     0,     1,     0,     4,     0,     1,
       3,     1,     1,     1,     0,     0,     6,     0,     0,    11,
       3,     1,     3,     3,     1,     3,     0,     1,     0,     4,
       0,     6,     0,     5,     0,     6,     1,     3,     2,     4,
       0,     2,     0,     2,     1,     1,     1,     0,     4,     0,
       1,     0,     1,     1,     3,     1,     1,     2,     2,     2,
       1,     1,     1,     1,     0,     3,     0,     3,     2,     4,
       4,     3,     4,     4,     1,     3,     3,     6,     2,     2,
       0,     6,     0,     6,     5,     2,     1,     1,     1,     5,
       5,     2,     2,     1,     4,     3,     2,     3,     2,     2,
       1,     3,     4,     3,     3,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     1,     1,     1,     1,     1,
       0,     1,     0,     2,     0,     1,     1,     1,     0,     2,
       0,     2,     0,     2,     2,     0,     4,     0,     4,     1,
       1,     0,     1,     1,     0,     1,     1,     0,     4,     0,
       0,     5,     1,     0,     3,     3,     1,     2,     2,     2,
       2,     2,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     0,     3,     3,     1,     0,     3,
       1,     2,     0,     1,     0,     3,     3,     2,     2,     3,
       0,     1,     1,     2,     0,     0,     0,     0,    21,     1,
       1,     0,     1,     0,     1,     1,     0,     1,     1,     0,
       2,     2,     1,     3,     4,     3,     3,     0,     2,     2,
       1,     3,     3,     0,     4,     0,     3,     1,     1,     0,
       3,     2,     3,     1,     1,     2,     0,     2,     3,     1,
       5,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     3,     5,     1,     1,     1,     1,     1,     3,     4,
       5,     1,     5,     3,     2,     1,     3,     2,     2,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     4,     0,     1,     1,
       3,     0,     2,     1,     1,     1,     1,     0,     1,     0,
       1,     1,     1,     0,     2,     2,     2,     1,     2,     4,
       5,     4,     6,     2,     3,     3,     3,     5,     1,     3,
       3,     2,     2,     2,     1,     1,     4,     4,     1,     1,
       1,     1,     1,     0,     4,     1,     1,     1,     3,     3,
       1,     1,     2,     2,     0,     3,     4,     3,     0,     7,
       1,     2,     1,     1,     1,     1,     1,     1,     0,     5,
       1,     1,     1,     1,     1,     3,     6,     6,     6,     7,
       5,     3,     8,     8,     8,     6,     0,     1,     1,     2,
       0,     1,     1,     3,     0,     3,     0,     3,     0,     3,
       0,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     3,     2,     2,     2,
       2,     2,     2,     2,     2,     1,     1,     2,     0,     1,
       3,     1,     2,     2,     2,     1,     3,     3,     1,     1,
       3,     1,     3,     4,     5,     4,     6,     1,     0,     3,
       3,     1,     1,     0,     2,     2,     2,     2,     0,     2,
       0,     3,     2,     1,     2,     2,     2,     2,     2,     0,
       3,     0,     1,     0,     3,     2,     0,     1,     2,     0,
       1,     4,     4,     5,     2,     3,     0,     1,     0,     4,
       0,     1,     1,     0,     1,     0,     2,     2,     1,     0,
       1,     1,     2,     3,     2,     0,     6,     3,     0,     0,
       0,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
       1,     2,     1,     2,     3,     3,     3,     0,     3,     3,
       0,     7,     0,     3,     1,     3,     0,     3,     2,     4,
       0,     3,     4,     4,     0,     0,     0,    16,     8,     7,
       0,     0,     0,     0,     0,    15,     0,     0,     0,     0,
      12,     4,     4,     3,     4,     3,     2,     1,     3,     5,
       1,     1,     0,     1,     1,     0,     2,     0,     0,     3,
       0,     2,     5,     3
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2428,   974,  2359,     0,     0,     0,     0,     0,     0,
    2361,   113,    62,  1578,  1689,  1690,  1491,  1517,     2,     0,
     974,   163,     0,    74,  1519,     0,  1740,     0,     0,   974,
     441,     0,  1734,     0,     0,   974,  1522,  1724,   237,   163,
    2361,     0,  1020,  2187,  1616,     0,     0,     0,     0,  1599,
       0,  2244,  1567,     0,     0,     0,     0,     3,     8,    19,
       0,    38,    24,    28,    14,    18,    13,    51,    45,    36,
      10,    53,    54,    16,    42,    11,    12,    15,    34,    41,
      35,    37,    49,  1011,    22,    23,    29,    43,    58,    20,
      55,    52,    21,  1691,    25,    44,    39,    31,    59,    32,
      50,    33,    57,    27,    46,    26,     9,    17,    47,    48,
      40,    60,    30,    56,     0,   847,     0,     0,   912,     0,
       0,     0,     0,     0,   830,  2426,  2427,  2428,   976,   975,
       0,  2361,  1843,   959,   985,  1906,  1907,  1908,  1909,  1910,
    1911,  1912,  1857,  1913,  1914,  1916,  1915,  1917,  1918,  1858,
    1859,  1919,  1920,  1921,  1923,  1922,  1924,  1860,  1861,  1925,
    1926,  1927,  1928,  1862,  1863,  1929,  1931,  1930,  1864,  1932,
    1933,  1934,  1936,  1935,  1865,  1937,  1866,  1938,  1939,  1940,
    1941,  1942,  1943,  1944,  1945,  1947,  1946,  1867,  1948,  1949,
    1950,  1951,  1952,  1954,  1953,  1955,  1956,  1957,  1868,  1958,
    1959,  1960,  1961,  1962,  1963,  1964,  1869,  1965,  1966,  1967,
    1984,  1870,  1968,  1971,  1970,  1969,  1972,  1973,  1974,  1976,
    1975,  1977,  1871,  1978,  1979,  1980,  1982,  1981,  1986,  1987,
    1988,  1872,  1983,  1985,  2166,  1989,  1991,  1990,  1992,  1994,
    1993,  1873,  1995,  1874,  1875,  1996,  1997,  1841,  1998,  1842,
    1999,  2001,  2002,  2003,  2008,  1876,  2000,  2004,  2005,  2006,
    2007,  2009,  1877,  2010,  2011,  2012,  2013,  2014,  2015,  2016,
    2017,  2018,  2019,  2030,  2023,  2025,  2026,  2028,  2024,  2029,
    2033,  2032,  2034,  2035,  2036,  2031,  2021,  2027,  2022,  2037,
    2038,  2020,  2039,  2040,  2041,  2042,  2043,  2044,  2045,  2046,
    2047,  2048,  2049,  2051,  2050,  2052,  2053,  2054,  2055,  2056,
    2057,  2059,  2058,  2060,  2061,  2062,  2064,  2063,  2066,  2067,
    1878,  2065,  2068,  2069,  2070,  2071,  2072,  1879,  1880,  1881,
    2073,  2074,  1882,  2075,  2076,  2077,  1883,  2078,  2079,  2081,
    2080,  2082,  2083,  1884,  1885,  2084,  2085,  2086,  2087,  2088,
    2089,  2090,  2091,  2092,  2093,  2094,  2095,  2096,  2097,  2099,
    2098,  2100,  2101,  2102,  2103,  2104,  2105,  2106,  1886,  2107,
    1887,  2108,  2109,  1888,  2110,  1889,  2111,  2112,  1890,  2113,
    2114,  2115,  2116,  2117,  2118,  1891,  2119,  2120,  2121,  1892,
    2123,  2122,  2124,  1893,  2126,  2127,  1894,  2125,  1896,  2128,
    2129,  1895,  1897,  2130,  2131,  2133,  2132,  2134,  2135,  2136,
    1898,  2137,  1899,  2138,  2139,  2140,  2141,  2142,  2144,  2143,
    2145,  2146,  2147,  2148,  2150,  2152,  2151,  2149,  2153,  2154,
    2155,  2156,  2159,  2160,  2161,  2162,  2157,  2158,  1900,  2163,
    2164,  2165,  2167,  2168,  2170,  2169,  1901,  1902,  2171,  2172,
    1905,  2173,  2174,  2177,  2175,  2176,  2179,  2178,  2180,  2181,
    1903,  2182,  1904,  2183,  2184,   182,  1846,   165,  1847,  1856,
       0,  2236,  2235,   943,   960,  2362,  2363,   534,   780,     0,
       0,   781,     0,   533,   779,   163,  2428,   118,     0,   530,
     531,     0,     0,     0,  1592,     0,  1515,  1515,  1515,     0,
       0,  1515,  1515,     0,  1518,  1515,   163,  1515,     0,    67,
    1697,     0,     0,     0,     0,  1840,     0,  1525,     0,  1741,
    1742,     0,  1749,     0,  1750,  1744,  2233,     0,     0,     0,
       0,     0,   163,   977,     0,  1576,     0,   227,   236,   238,
     239,   235,     0,  2363,  2374,  1012,  1018,  1030,  2188,  2185,
    1674,   239,   932,   932,   932,   930,   932,  1600,  1597,     0,
       0,  1576,  1743,  2480,     0,     0,     0,  2476,     0,  2481,
       0,  1020,     0,     0,     1,     5,     0,     0,  1979,  2077,
    1687,  1685,  1835,     0,   821,   848,     0,   826,     0,   824,
    1852,  1851,  1850,     0,   837,   836,   834,     0,   403,     0,
       0,  2437,   828,   957,  2360,     0,   184,     0,    76,     0,
       0,     0,  2366,     0,     0,     0,     0,   117,     0,     0,
       0,   114,  1045,  1045,  2428,  2430,  2432,   534,   532,     0,
       0,     0,  1596,  1595,  1594,     0,  1592,  1907,  1857,  1918,
       0,  1808,     0,     0,     0,  1291,     0,  1862,     0,  1932,
    1934,  1867,     0,     0,  1052,  1052,  1052,     0,     0,     0,
    1956,  1957,  1817,     0,     0,     0,  1805,  1818,  1991,  1992,
       0,  1807,  1997,     0,     0,     0,     0,  2014,  1815,     0,
       0,  2046,  2048,     0,     0,  2052,  2053,  2054,  2055,  1792,
    1107,     0,  1052,  1804,  1814,  2070,  1798,  2078,  2082,  2083,
       0,  2092,     0,     0,     0,  2117,  2121,     0,     0,  2141,
       0,     0,  1052,  1791,  2159,  2160,  2161,  2162,     0,  1806,
    1900,  1816,     0,  2173,  1052,  1052,  1052,     0,     0,     0,
    2180,  2184,     0,     0,     0,  2398,  1106,     0,  1259,     0,
    1285,  1064,  1070,  1084,     0,  1099,  1117,  1118,  1120,  1214,
    1119,  1125,  1124,  1492,  1802,  1123,  1122,  1803,  1116,  1825,
    1846,  1824,     0,     0,     0,     0,     0,     0,     0,     0,
    1670,     0,     0,  1502,  1515,    69,     0,  2280,  2295,  2296,
    2292,  2297,  2315,  2298,  2302,     0,  2294,  2286,     0,  2301,
       0,  2290,  2299,     0,  2284,     0,  2300,  2305,  2316,  2288,
    2293,  2271,     0,  2278,  2282,  1837,  1397,  2247,  2248,     0,
      75,  1527,  1528,  1526,   911,     0,  1739,     0,  1753,     0,
     972,   451,   442,     0,  1669,  1668,     0,  1735,  2375,     0,
       0,   948,  1530,  1577,     0,  1529,  1730,     0,  1728,  1725,
    1727,   228,     0,     0,   258,  2280,     0,  2265,     0,  2369,
    2366,  2376,  2411,  2406,  2405,  2408,  2409,  1036,  2410,  1035,
    2407,  2404,  1045,  1031,  1033,  1034,  2191,  1636,     0,   714,
       0,  1682,  1637,     0,     0,  1682,     0,  1432,  1672,  1675,
       0,  2200,  1650,   777,   776,   775,  2201,  1668,     0,  1624,
    1638,     0,  1601,  1643,     0,  2202,     0,  1671,     0,  1432,
    1682,     0,  1617,     0,     0,     0,     0,   234,   926,   936,
     928,   923,     0,   929,   925,     0,  2493,  2245,   911,  1797,
    1796,  1844,  2477,  1795,  2485,  2487,  2473,  2475,  2482,  1014,
       0,  2380,     6,    61,     0,  1694,  2435,  2436,  2434,   730,
       0,  1052,  1853,  2429,   166,   835,     0,   404,   166,     0,
       0,     0,     0,     0,   405,   406,   342,   819,   832,     0,
       0,   831,  2437,     0,     0,   987,   989,   988,  1005,   186,
     183,   164,     0,   945,  1509,  1511,   962,  2365,     0,     0,
    2367,  2371,  1105,  1104,     0,   111,   116,     0,     0,     0,
    2337,   115,  2331,  2433,  1045,  1045,  1045,  2425,     0,  2413,
    2420,  2421,  2424,  2423,  2422,  2419,     0,  2412,  2415,  2416,
    2418,  2417,  2437,  2431,     0,   782,   782,   782,     0,  1579,
    1582,  1586,  1590,  1593,     0,     0,  1402,  1138,  1402,  1402,
    1402,  1292,     0,     0,     0,     0,     0,     0,     0,     0,
    1402,     0,  1175,  1148,     0,  1176,     0,     0,     0,     0,
       0,  1811,     0,     0,  2398,     0,     0,     0,  1264,     0,
       0,     0,  2398,     0,     0,     0,     0,     0,  1287,  1289,
    1824,  1402,     0,     0,  1402,     0,     0,     0,     0,     0,
    1057,     0,  1182,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1402,  1402,     0,     0,  1402,     0,
    1191,     0,  1813,     0,     0,     0,  1812,     0,     0,  1810,
    1809,  1793,     0,  1195,  1197,  1196,     0,  1402,  1402,     0,
       0,  1128,  1127,  1129,     0,     0,     0,     0,     0,     0,
    1103,  1102,  1101,  1100,     0,     0,     0,  1108,     0,  1109,
    1110,     0,  1111,  1112,  1113,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1130,     0,     0,     0,  1794,  1223,
       0,  1516,  1497,  1504,  1499,     0,  1670,  1500,  1508,   417,
       0,  1505,  2329,  1501,     0,  1493,     0,    68,     0,  1720,
       0,     0,     0,  1714,  1716,  1719,  1715,     0,     0,  1721,
    1718,     0,  1717,  1698,  1702,  1706,  1699,  2281,  2279,  2313,
    2312,  2317,     0,  2314,  2310,  2303,  2338,  2307,     0,  2338,
    2309,  2308,  2338,  2304,  2311,  2338,  2276,     0,  1398,  1399,
       0,  2246,     0,  1836,     0,     0,   995,  1754,  1755,  1751,
    1397,  2234,  2237,     0,   452,     0,     0,   461,     0,     0,
      64,    65,     0,   979,     0,   978,   982,     0,     0,     0,
    1533,  1523,  1532,  1731,  1732,     0,   226,   251,   246,   254,
     248,   250,   249,   255,   256,   257,   252,   247,   253,   240,
       0,  2279,     0,  2276,  2370,     0,  2372,  2389,  1019,  2377,
    1042,  1021,  1041,     0,  1032,  2186,  2189,  2197,  1678,   713,
       0,     0,  1649,     0,   534,     0,     0,     0,     0,     0,
       0,  1618,     0,     0,   571,     0,  1642,  1433,  1676,  1677,
    1682,     0,     0,  1682,     0,  1655,  1672,     0,  1682,  1613,
       0,     0,  1605,  1610,  1606,     0,  1612,  1611,  1614,  1602,
    1603,  1678,  1629,  1656,  1672,  1641,  1648,     0,  1628,  1635,
       0,  1646,  1672,  1672,  1682,  1682,   939,   938,   937,   933,
     934,   939,     0,  1598,  1326,     0,     0,  2474,  2488,  2472,
    2483,  2484,  2471,  1015,  2381,  1013,  2382,     0,     7,     4,
    1688,  1686,  1695,  1696,   731,   730,   525,   528,   527,     0,
       0,  1855,     0,   827,     0,  1670,   825,     0,     0,  1670,
     353,  1670,   407,   730,   839,     0,     0,   829,   958,     0,
       0,   440,  1005,   991,  1007,     0,   187,   189,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    77,    78,    94,   947,
     946,     0,   944,   970,   969,   967,     0,   968,   966,   961,
     963,   964,  2364,  2368,   535,   730,  1670,     0,   345,     0,
       0,     0,     0,     0,   534,     0,     0,  2414,   103,   783,
       0,     0,     0,  1584,  1512,  1580,  1514,  1835,     0,     0,
       0,  1588,     0,     0,  1403,  1402,     0,  1270,     0,     0,
       0,     0,  1293,     0,     0,     0,     0,     0,     0,     0,
    1244,     0,  1270,  1053,     0,  1202,     0,     0,     0,     0,
       0,     0,  1373,  1374,  1375,  1376,  1384,  1377,  1378,  1379,
    1386,  1391,  1380,  1381,  1387,  1388,  1389,  1382,  1390,  1385,
    1383,  1392,     0,  1372,     0,  1395,  1393,  1396,  1394,     0,
    1265,  1257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1402,     0,     0,     0,  1402,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1402,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1171,     0,  1827,  1826,     0,     0,     0,     0,
    1132,     0,  1131,  1335,     0,  2383,  2399,     0,  2203,  1260,
    1262,     0,  1055,  1054,  1056,  1067,  1060,  1065,  1058,  1062,
       0,  1114,  1912,  1068,     0,     0,  1096,  2398,  1411,  1097,
    1082,  1087,  1088,     0,  1085,  1086,     0,  1090,     0,  1089,
    1093,  1094,  1095,  1098,     0,     0,     0,     0,  1121,  1126,
    1286,  1045,  1828,     0,  1495,   417,   420,   419,  1506,   418,
    1554,     0,   913,     0,     0,    70,    72,  1711,  1708,  1707,
    1709,  1713,  1712,  1710,     0,  1722,  2306,     0,  2287,     0,
    2291,  2285,  2289,     0,     0,  2277,     0,  2283,  1401,  1987,
    2063,     0,  1404,  2250,  1520,  2492,     0,  1752,     0,     0,
       0,   973,     0,  1045,   450,   449,   448,   447,     0,   463,
     445,     0,    66,     0,     0,  1736,     0,     0,     0,     0,
     950,  1531,     0,  1733,  1729,  1726,     0,     0,     0,     0,
       0,     0,     0,  2373,  2391,  2390,  2378,  1045,  1423,  1046,
    1046,  1824,  2191,  2194,  2195,  2198,  2196,     0,  2193,  2192,
    2207,     0,  1680,  1683,  1684,     0,     0,  1664,  1658,  1657,
    1653,  1659,  1654,  1667,  1666,  1665,  1626,  1625,  1443,  1444,
    1442,  1436,  1437,  1441,  1440,  1621,  1673,  1663,  1661,  1651,
    1682,  1662,  1660,  1607,  1608,  1609,     0,  1432,     0,  1680,
    1682,  1672,     0,  1682,  1682,  1645,  1647,     0,   927,   936,
     924,   931,  1344,  1343,     0,  1300,     0,  1302,  1299,  1298,
    1297,     0,  1343,  2478,  2486,  2490,     0,  1432,  2388,  2386,
     526,  1554,  1554,     0,  1854,     0,     0,     0,     0,     0,
       0,     0,   167,   176,     0,     0,   351,   352,  1554,   350,
     393,   394,   397,   398,   399,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   400,  1554,  1554,   347,   373,   374,
     377,   378,   379,   380,   381,   343,     0,   348,   909,   909,
       0,  1554,  1554,   909,  1554,     0,     0,  1554,  1554,     0,
       0,  1554,     0,     0,   909,     0,  1554,   907,     0,     0,
    1554,  1554,  1554,  1554,   909,     0,     0,  1554,   440,  1554,
       0,     0,   919,     0,     0,  1554,     0,     0,  1554,     0,
    1554,   855,   906,   538,   558,   559,   820,   854,   856,   868,
     436,     0,   885,   908,     0,   841,   843,  2438,  2439,  2440,
     994,   986,   993,   990,  1005,  1003,   992,   772,   771,     0,
    1006,   185,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1510,   971,   965,   112,   730,  1554,  1554,  1554,
    1554,   349,   382,   383,   386,   387,   388,   389,   392,   390,
     391,     0,     0,  1670,     0,     0,  2332,     0,  2466,     0,
       0,     0,   165,   536,     0,     0,   784,     0,     0,     0,
       0,     0,  1404,     0,  1838,  1587,  1326,  1591,  1590,     0,
    1198,     0,  1237,     0,  1239,  1240,  1241,     0,     0,     0,
       0,     0,  1199,     0,  1146,  1200,  1201,     0,     0,     0,
       0,  1243,     0,  1177,     0,     0,  1149,  1150,  1143,  1135,
       0,  1216,     0,     0,  1151,     0,     0,     0,     0,     0,
    1217,  1288,     0,  1290,  1828,     0,  1249,  1204,  1156,     0,
    1247,     0,  1157,  1218,  1219,  1220,  1183,  1206,  1207,     0,
    1222,     0,  1208,     0,     0,     0,     0,  1159,  1253,  1251,
       0,     0,     0,     0,  1255,  1192,  1161,     0,     0,     0,
    1160,     0,     0,     0,     0,     0,     0,     0,  1163,     0,
    1144,  1252,  1254,  1212,     0,  1172,     0,  2392,  1334,  2400,
    1335,     0,     0,  2394,  2384,  2389,  2397,  1136,     0,     0,
       0,     0,     0,  1829,  1061,  1066,  1059,  1063,  2398,     0,
       0,     0,     0,  1080,  1079,     0,     0,     0,  2398,  1411,
    1083,     0,     0,  1233,  1234,  1283,     0,  1498,  1496,  1507,
    1552,  1553,  1555,     0,  2330,   915,   914,  1503,   913,    73,
       0,  1705,  1723,  1700,  2342,     0,  2341,     0,  2325,  2328,
    1835,     0,     0,     0,  2260,  2254,  2261,  2263,  2257,  2262,
    2264,  2255,  2256,  2251,  2258,  1405,  1434,     0,   996,   998,
     999,   997,  1005,     0,     0,  2240,  2241,  2239,  2238,   453,
       0,  1468,  1469,  1454,  1455,  1453,  1456,   462,  1457,  1467,
       0,   474,     0,   453,  1738,  1737,     0,   980,   983,   984,
     955,   954,   956,   949,   951,   952,   518,  1537,     0,     0,
       0,  1543,  1524,  1534,     0,  1956,  2159,  2162,   241,   244,
     243,   245,     0,     0,     0,     0,     0,     0,  1040,  1326,
    1484,  1037,  1025,  1434,  1424,  1024,  1047,  1043,     0,  2190,
       0,  2157,  2218,     0,     0,     0,     0,     0,  2208,  1679,
       0,  1630,     0,  1652,     0,     0,  1623,     0,  1644,  1604,
    1632,  1622,  1404,  1672,  1619,  1620,   941,   940,   935,  1343,
    1326,     0,     0,  1323,  1345,     0,  1345,  1326,  1326,     0,
    1326,  1397,  1340,     0,     0,  2489,  1425,  2387,     0,     0,
     823,   170,   173,   171,     0,   172,     0,     0,   402,   401,
       0,  1670,   395,   124,   123,   125,   126,  1451,  1452,  1448,
    1449,  1447,  1450,   128,   127,   122,   838,     0,     0,     0,
    1670,   375,   354,   355,   358,   359,   360,   910,   813,   974,
     889,     0,   605,   813,   768,   773,   773,   887,     0,   974,
       0,     0,     0,     0,     0,   974,     0,     0,     0,  1554,
       0,   900,   850,     0,     0,     0,     0,     0,   901,     0,
     851,  1554,     0,     0,     0,     0,     0,   974,     0,     0,
     438,     0,   974,   869,   922,   921,   920,     0,   974,   974,
       0,   564,   565,   563,     0,     0,   556,   539,   730,   852,
     437,   853,   604,     0,   916,   601,   607,  1831,     0,     0,
       0,   134,  2442,     0,  1364,   188,    95,    84,    80,    99,
    1461,  1462,  1460,  1458,  1459,   100,    82,    83,    87,    86,
      88,    89,    90,    85,    91,    81,    92,   101,   102,    79,
       0,     0,     0,     0,  1670,   384,     0,     0,  1554,   344,
     361,   362,   365,   366,   367,   368,   369,   372,   370,   371,
       0,  2333,  2335,     0,     0,   338,   337,     0,   129,  2460,
       0,     0,   604,   104,   436,   537,   540,   806,   808,   807,
     798,   797,   105,   107,   109,  1513,  1590,  1326,  1423,  1836,
    1404,     0,  1589,     0,     0,  1238,  1271,     0,  1294,     0,
    1140,   691,   691,  1281,  1279,   676,   691,  1275,  1280,  1277,
       0,   716,     0,   715,     0,     0,     0,  1245,  1242,     0,
       0,     0,     0,  1268,     0,     0,     0,  1145,     0,  1228,
    1250,  1248,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1133,  1045,  2401,  2403,
    1016,     0,  2393,  2395,  2204,  2205,  2206,   815,  1261,     0,
    1077,  1073,     0,  1071,  1410,  1092,  1091,     0,     0,     0,
    1081,  1046,  1224,  1045,     0,  1284,  1830,   416,   570,  1494,
      71,  1703,  2339,     0,  2350,     0,     0,     0,     0,     0,
       0,     0,  2249,  1435,  1564,     0,  1005,  1009,  1845,  1745,
    2242,  2243,     0,   454,   455,   457,  1046,   471,   451,     0,
     443,   446,     0,     0,   953,  1030,     0,  1556,  1541,  1548,
    1542,     0,     0,     0,  1540,  1820,  1819,  1826,  2376,     0,
       0,  2270,     0,     0,     0,  2379,  1404,  1404,  1478,     0,
       0,  1022,  1027,  1023,  1026,     0,  1044,  1051,  1050,  1821,
    1828,     0,     0,     0,     0,   718,   717,   726,     0,     0,
       0,  2203,     0,   722,   724,   723,  2213,   721,  1681,  1432,
    1640,  1639,  1439,  1438,  1615,  1432,  1634,  1682,     0,     0,
    2383,  1338,     0,  1325,  1324,  1346,     0,  1326,  1345,  1345,
       0,  1305,  1304,  1568,  1571,     0,  1303,  1362,  1328,  1030,
    2479,  2491,     0,   729,   728,   569,   725,   568,   175,   174,
     180,   181,   422,   408,   421,   396,   121,   409,   410,   376,
       0,   356,   606,   814,   872,     0,     0,     0,   773,   600,
     813,   782,   774,   813,   813,     0,     0,   549,   546,   891,
     552,   870,   862,   871,   882,   884,     0,   548,   566,     0,
       0,   554,   813,   857,   898,   899,   913,   543,     0,   580,
     581,   579,   560,   567,   544,   545,   893,     0,  1419,  1421,
    1429,   551,   550,     0,   547,     0,   904,   877,     0,   577,
     575,   578,   572,   574,   573,   576,   555,   553,   867,     0,
     909,   909,   886,     0,   588,   589,   591,   592,  1834,     0,
     918,   888,     0,   593,   602,   594,     0,     0,     0,   144,
       0,     0,   840,     0,   137,   135,   146,     0,     0,     0,
    1367,     0,  1368,  1365,  1366,     0,    96,    98,   415,   414,
     413,   412,   385,     0,     0,     0,  1670,   363,  2334,     0,
       0,  2467,   341,   339,   340,     0,     0,   190,   586,   587,
     585,   584,     0,   425,     0,  1883,   423,     0,   435,     0,
    1756,   730,   541,     0,     0,     0,     0,  1404,  1445,  1839,
    1583,     0,  1173,  1295,     0,     0,   692,  1272,   738,     0,
    1282,   678,   677,  1274,  1276,  1278,  1139,  1147,  1215,  1142,
    1141,     0,     0,     0,  1180,  1181,  1266,  1269,     0,     0,
    1153,     0,  1155,     0,     0,  1230,  1205,  1221,  1184,  1209,
       0,  1158,  1134,     0,  1185,     0,  1190,  1188,     0,  1162,
       0,     0,  1169,     0,  1167,     0,  1168,     0,  1170,  1211,
    1213,  1336,  2402,  1017,     0,     0,  1263,  1069,     0,  1078,
    1075,     0,  1072,  1047,  1235,  1225,     0,  1701,  2340,     0,
    2275,  2327,  2326,  2343,  2343,  2343,     0,  1406,     0,  1521,
    1000,  1005,  1009,     0,  1001,  1756,   458,     0,     0,     0,
     478,     0,   476,   444,   981,  1045,  1538,  1550,     0,  1558,
       0,     0,  1535,  1545,     0,     0,     0,  1544,   242,     0,
    2267,  2268,  2266,  1434,  1412,     0,     0,  1490,     0,  1485,
    1038,     0,  1049,  1048,     0,  2220,     0,  2219,  2231,  2232,
    2229,  2230,  2228,  2209,     0,  2215,  2214,     0,     0,     0,
    2225,  2216,     0,     0,  1631,  1633,  1627,   942,  2389,  1397,
    1330,  1326,  1301,  1326,  1312,     0,     0,  1326,  1308,  1306,
    1310,     0,  1404,     0,  1327,  1359,  1045,  1823,  1426,  1429,
     357,   874,     0,   813,   769,   770,   782,     0,   782,   782,
       0,     0,   861,     0,   962,     0,   866,   726,   561,   897,
     896,   562,     0,   859,     0,  1430,  1431,  1422,   439,   858,
     879,   864,  1722,   890,   604,   917,   750,   672,   621,   612,
     691,   615,   614,   658,   629,   626,   676,   674,   644,   676,
     676,   651,   650,   668,   654,   634,   738,   738,   633,   671,
     738,   655,   653,   657,     0,   659,   676,   664,   652,   656,
     673,   649,   646,   670,   691,   628,   627,   630,   669,   738,
       0,   662,   691,   695,   632,   738,   745,     0,     0,   691,
     693,  1833,   145,   133,     0,     0,   842,   844,     0,     0,
     845,  2444,     0,  2446,     0,  1008,     0,    93,     0,     0,
     346,   411,   364,  2336,     0,   201,  1045,     0,     0,   191,
     193,   194,     0,     0,     0,   536,  1758,  1757,   424,   521,
     542,     0,     0,     0,  1590,  1585,     0,  1581,     0,  1296,
       0,     0,     0,     0,   732,   743,   741,   735,     0,   739,
     740,  1273,     0,  1246,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1137,     0,  1226,     0,     0,     0,     0,
       0,     0,  1166,  1164,  1165,  1434,  2383,   816,  1074,     0,
    1236,     0,     0,     0,  2348,  2348,  2348,  1563,  1562,     0,
    1561,  1565,  1002,  1010,     0,   456,   459,     0,     0,     0,
     475,     0,   519,     0,     0,     0,  1559,  1547,  2380,  1536,
    1539,  1828,  2269,  1029,     0,  1407,  1489,  1486,     0,  1479,
    1481,  1483,     0,  1822,     0,     0,  2224,  2210,   727,     0,
       0,     0,     0,  2211,  1331,  1329,  1339,     0,  1297,  1326,
    1326,     0,  1297,     0,     0,     0,  1570,  1423,  1572,  1363,
       0,  1341,     0,  1428,     0,     0,   873,     0,     0,     0,
       0,     0,     0,   903,     0,   916,   863,   883,   905,   695,
     974,  1420,   878,   880,   950,     0,   590,     0,   754,   620,
     613,   631,   680,   675,     0,   680,   680,   640,   658,   635,
       0,   738,   648,   639,   660,   663,   665,   667,   680,     0,
     738,   637,   624,   680,   703,     0,     0,     0,   699,     0,
     748,     0,   706,   608,   696,   698,     0,     0,   661,   738,
     617,   746,   745,   619,   738,   745,   680,     0,   694,   680,
       0,   131,   136,   147,   148,   833,  2443,     0,  2441,     0,
    1004,  1369,    97,     0,     0,   204,   202,   203,     0,   197,
     199,   194,  2454,     0,  2461,     0,     0,  2459,   426,   428,
     436,   522,     0,     0,  1429,   811,     0,     0,  1446,  1174,
     689,   687,   690,   688,   734,   733,   737,     0,   736,   745,
       0,  1178,  1179,  1267,  1258,  1203,     0,  1154,  1227,     0,
       0,  1210,  1186,  1189,  1187,  1193,  1194,  1037,  1037,   582,
    2396,  1076,  1704,  2351,     0,     0,  2347,  2345,     0,  2346,
    2344,  2318,     0,  2273,  2274,  2272,  2259,     0,     0,     0,
    1045,   464,     0,   481,   480,   477,  1434,  1549,  1551,  1557,
    1546,     0,  1408,  1423,   719,  1482,     0,  1039,  2222,  2221,
    2223,  2217,     0,     0,     0,     0,  1313,     0,  1317,  1322,
    1318,     0,  1309,  1307,     0,  1445,  1351,  1352,     0,     0,
    1357,  1361,  1434,  1429,   876,     0,   603,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   902,  1799,   892,
     894,   860,     0,   865,   557,     0,   753,     0,   758,   684,
     685,   686,   641,   681,   683,     0,   643,   611,   636,   666,
     642,     0,   638,   625,   709,   708,  1052,   701,   712,     0,
       0,   707,   697,   705,   700,   616,   618,   622,   623,   609,
       0,   610,  1832,   138,   846,   278,  2445,  1020,     0,  2450,
     119,  2458,  2468,   201,     0,     0,   142,     0,   192,   726,
     195,  2380,  1756,     0,   431,   785,     0,   810,     0,   787,
     789,   744,   742,     0,     0,  1229,  1231,  1337,   583,  2324,
    2323,  2322,  2319,     0,     0,     0,     0,     0,     0,  2349,
    2353,  1560,     0,     0,     0,   472,     0,   468,   470,     0,
     506,   520,  1416,  1429,     0,  1434,     0,  1487,  1480,  2227,
    2226,  2212,  1332,     0,     0,     0,     0,     0,  1370,  1569,
    1347,  1347,  1358,  1342,  1427,   875,     0,     0,   785,     0,
       0,  1801,  1800,   916,     0,   751,     0,   755,   756,   757,
       0,   749,   682,     0,   817,     0,   711,  1052,   704,     0,
     140,   304,     0,   290,   276,     0,     0,     0,   280,   149,
     152,   150,     0,   151,   157,     0,   158,   159,   160,   161,
     162,   153,   302,   303,   156,   154,   155,     0,  1848,     0,
    1849,  2448,     0,     0,  2447,   168,   198,     0,     0,   134,
     143,  2462,   710,   429,   427,     0,  2376,     0,  1554,   106,
     786,   802,   801,   791,  1429,     0,     0,   108,   788,   804,
     795,   110,   790,   803,   793,   679,  1152,  2320,  2354,  2357,
    2355,  2356,  2358,  2352,     0,  1746,  1046,     0,   465,   466,
       0,   484,     0,  1554,     0,     0,  1554,  1554,  1554,  1554,
     499,   507,   509,     0,  1417,  1418,     0,  1413,  1415,  1409,
    1470,   720,  1759,  2383,  1314,     0,  1319,     0,  1311,     0,
       0,  1355,  1353,     0,   785,   595,   787,   789,   895,     0,
     752,     0,     0,   738,     0,   738,   702,   139,     0,   132,
       0,     0,   289,   292,     0,     0,   295,   285,   284,   286,
       0,   279,   278,   278,   332,   283,   329,   328,   321,  2380,
       0,     0,     0,  2469,   200,  1045,   146,     0,   433,   432,
     800,     0,   792,   809,   812,     0,   796,   794,  1566,  1574,
       0,   719,     0,   473,   472,   469,     0,   482,     0,  1554,
    1554,     0,     0,     0,     0,     0,   479,   508,  1554,  1429,
       0,  1028,     0,  1767,  1333,     0,     0,  1371,     0,  1348,
       0,     0,     0,   599,   598,   596,   597,     0,   764,     0,
     763,     0,   760,   759,   645,   818,   647,   141,   305,   316,
     319,   311,   291,     0,     0,     0,   281,   278,     0,   265,
     263,   264,   270,   271,   272,   273,   274,   275,   266,   269,
     267,   268,   278,     0,   209,     0,     0,  2449,     0,  2451,
       0,   178,   177,   169,     0,   278,  2455,     0,  2463,  2380,
     799,   805,     0,     0,  1747,   460,   467,   492,   485,   488,
       0,   517,     0,     0,  1465,  1463,  1464,   513,  1466,   514,
     512,   510,   503,     0,   501,     0,  1414,  1471,     0,     0,
       0,     0,  1760,  1762,     0,  1488,  1316,  1321,  1350,  1349,
    1364,     0,   881,   766,   767,   765,     0,     0,     0,     0,
     278,   312,     0,   287,     0,     0,     0,     0,   207,   335,
       0,   205,   323,   323,  2452,  2453,   179,  2470,     0,   148,
     168,   434,  1573,  1575,  1773,   492,     0,   490,     0,   486,
     483,   487,   515,   516,     0,   500,     0,   511,     0,     0,
       0,     0,     0,  1761,     0,     0,  1768,  1770,     0,     0,
       0,     0,   313,   319,   309,   317,   278,     0,     0,   277,
     296,   331,   208,     0,   333,     0,   278,     0,   322,   324,
     326,     0,   130,  2464,     0,  1759,   489,     0,   497,   493,
     495,   498,   506,   505,   502,  1045,  1765,  1766,     0,  1763,
       0,     0,  1769,  1356,  1354,   762,   761,     0,   310,     0,
       0,   308,   288,   293,   278,     0,   278,   220,   219,     0,
     211,   259,   330,     0,   210,  2456,   278,     0,  1767,   491,
       0,     0,   504,     0,     0,  1474,  1476,  1764,  1772,  1771,
     314,     0,   278,     0,   278,     0,   278,     0,     0,     0,
       0,     0,   206,   278,  2465,     0,  1775,   496,   494,  1046,
    1472,  1045,     0,   306,   278,   294,   299,   336,     0,   214,
     260,   261,     0,   217,  2457,  1774,     0,  1779,  1477,  1475,
     278,   278,   295,   298,   334,     0,     0,   212,   213,   225,
     224,   216,     0,     0,     0,  1786,   278,   278,   300,   233,
     231,   278,   221,   229,   223,     0,   230,   262,   218,  1777,
    1778,  1776,  1781,     0,     0,  1783,  1784,     0,  1748,     0,
     215,   232,  1785,  1780,     0,  1787,  1789,     0,   222,  1782,
       0,  1045,  1788,     0,  1046,  1790
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    56,   576,  1379,    57,    58,    59,    60,    61,  1250,
      62,   775,  1187,  1665,  1666,    63,   516,    64,   972,  1436,
    1437,  2845,  2846,  1438,    65,  1993,  2883,  2884,  2885,  1455,
     486,   487,  1852,  1853,   997,  2866,  2832,  3593,  2836,  3700,
    3829,  3739,  1925,  3170,  3594,  3595,  3709,   511,  1991,  1393,
    3853,  1832,  3953,  1833,    66,   606,   970,  1415,  1416,  3188,
    3189,  3426,  3190,  3418,  3419,  3420,  3421,  4076,  3927,  4021,
    4077,  4149,  4185,  4191,  4192,  4119,  4201,  4202,  4203,  4189,
     842,  4204,    67,   539,   540,   844,  1279,  2238,  1280,    68,
    4120,  4187,  3928,  3929,  3836,  3930,  3712,  3931,  3840,  3932,
    3715,  3933,  3934,  3935,  3936,  4068,  3937,  3835,  4112,  3924,
    3925,  4114,  4166,  4183,  3938,  3722,  3830,  4008,  3723,  3831,
    4063,  3920,  4064,  4107,  4162,  3921,  4009,  4110,  4012,  3939,
    3945,  4078,  3940,  3946,  3941,  3727,  3847,  3944,  3845,  3943,
    4116,  4073,  2477,  2865,   594,   595,   617,  1983,   596,   986,
     945,  1395,  1865,  1866,  2342,  2343,  2459,  2460,  2461,  1857,
    1858,  1859,  1971,  1972,  1973,  1839,  1840,  1841,  1399,  1836,
    1837,   597,   946,   956,  1860,  1861,  1862,  2465,  1975,  1976,
    1977,  1978,  1863,  1658,  1864,  2733,  2483,  2876,  3611,  3198,
    3746,  3959,  2877,  2878,  2410,  2793,  2390,    69,   528,   822,
    1247,  2212,  1248,  2622,  2623,  2624,  1704,  1705,  3491,  1709,
    2211,  3645,  3874,  3646,  3647,  2626,  3778,  2630,  2991,  2992,
    3269,  3493,  3650,  3970,  3876,  4040,  3968,  4036,  3969,  4038,
    4131,  4089,  4090,  3886,  3983,  3984,  4044,  4092,  3790,  3791,
    3792,  2231,  2635,  3496,  3432,  1965,  1385,  1386,   488,   489,
     490,   614,  2484,  1912,  2485,  2486,  2809,  1914,  1915,  2597,
    1313,  2806,  2782,  3467,  2872,  2813,  2814,  2815,  2816,  2817,
    2823,  2749,  2351,  2352,  2415,  2826,  3609,  3354,  3369,  3154,
    3155,  3156,  3157,  3158,  3159,  3160,  2900,  2901,  3562,  3563,
    3564,  2896,  2897,  3399,  3383,  3384,  3385,  3610,  3577,  3218,
    2676,  2677,  3657,  2685,  2686,  2724,  3035,  2725,  1389,  3219,
    3220,  3221,  3393,  3386,  2825,  3348,  3555,  3558,  3691,  3912,
    2353,  2750,  2354,  2753,   901,   491,  2355,  2356,  1469,  1470,
    3749,  3757,  3761,  3750,  3762,  3758,  3751,  3752,  3753,  3764,
    3760,  2490,  3433,  3434,  2742,  2956,  3693,    70,  1403,   939,
     948,   944,   962,   601,  1404,  1926,  2421,  3405,   584,  1916,
    3340,  3084,  3344,  1917,  2762,  1918,  3071,  3326,  1919,  3100,
    3342,  3552,  2763,  2764,  1920,  1921,  1922,  3083,  3092,  3683,
    2357,   123,  2157,  2821,  2397,    71,  1361,  1356,    72,   913,
     908,   909,  1359,  1360,  1798,  2287,    73,   609,  1442,    74,
    1258,  2223,  2224,  2225,    75,   963,    76,    77,   610,  1449,
    1450,  1451,    78,  1243,   130,    79,   830,  1253,  1255,  1256,
      80,   605,   964,   965,   966,   967,  1931,    81,  1696,  2188,
    2189,  2190,  2191,  1412,  2423,  1413,  1414,  1940,  2984,    82,
      83,   573,  2112,   545,   851,   546,   547,  1738,  2251,  3468,
     862,   863,   864,  2661,  1291,  1292,  1293,  2256,  2666,  1042,
     740,   741,   742,   743,  1135,  1136,  3387,   744,  1145,  1624,
     745,   746,   747,   748,   749,   750,  1651,  2924,  2925,  3235,
    2142,  2143,  2144,   751,  2030,  2911,  2043,   752,  1128,  1609,
    1541,  3227,  2916,  1486,  2013,  2520,  2594,  2106,  1067,  1068,
    1032,  2020,  1492,  1805,  1806,  1807,  1808,  1809,  3314,  3313,
    3315,  3663,  3517,  3665,  3521,  2298,  1810,  1811,  2699,  3515,
    3803,  2107,  2108,  2109,  3245,  2700,  3051,  2718,  2719,  3532,
    2289,  1812,  2706,  3811,  3529,  3530,  3902,  3901,  3531,  3319,
    3320,  3064,  3065,  2841,  2842,  2843,  3667,  1532,  1533,  1539,
    1230,  1231,  1487,  2186,  2611,  3503,  3654,  2133,  3285,  3652,
    3797,  1923,  2788,  2789,  2253,  2254,  2722,  3068,  3097,  1316,
    3469,  2613,  1771,  1772,  3207,  4190,  2734,  2435,  3977,  2208,
    2209,  3891,  4048,  4134,  4135,  4136,  3017,  3018,  3289,  3290,
    2255,  2658,  3019,  3504,  3802,    84,   495,    85,  1663,  2148,
    1184,  2162,   974,  1473,  1474,   763,   508,    86,   517,  2187,
      87,   535,  1722,   814,   834,  1261,  1262,  2232,  2636,  2643,
    2233,  2648,  3278,  2638,  2996,  2997,  2152,  2153,  2639,  2999,
    3275,  3259,  3260,  2979,  3488,    88,   561,  3062,  2713,  2714,
    3868,  3869,   835,    89,   494,  1019,  2002,  1479,  2001,  1020,
    1021,  2004,   635,   636,    90,   915,   558,  1338,  1339,  1340,
    1787,    91,   550,   902,  2689,  2695,  1766,   826,  1180,  1320,
     905,  1321,  1752,  2271,  1302,    92,   935,   934,    93,   580,
    1381,    94,   776,  1203,  1675,  2601,  2967,  1204,  1205,  2163,
      95,   536,   839,   840,  1264,  1724,    96,   530,   827,  1715,
      97,   521,    98,    99,   818,  2985,  3871,  4034,   525,  1698,
    1239,  3199,  3893,  3992,  3993,  3995,  4056,  4057,  4085,  4177,
    4211,  4195,  4214,  4215,  4218,  4225,  4226,   754,   922,   755,
    3547,   756,   757,  2644,  2645,  3069,   758,  2646,   759,  2743,
     975,  1476,   514,   466,   591,   923,  2619,   761,  3729,   942,
     990,   468,   469,   100,   866,   549,  1295,  1296,  1297,  1747,
    1748,   906,  2121,  1749,  1750,  2268,  2263,  3297,  3041,  3033,
     101,   819,   473,  1241,  1242,  2197,   102,   560,   103,  1232,
    1692,  1693,  2183,  2610,  2184,   104,   847,   105,   801,  1686,
     802,  1208,   803,   804,  1222,  1216,  1225,  1219,  3633,  3480,
    3481,  2171,  1183,   991,   992,  1678,  2165,  2166,  3254,  3483,
    2970,  3639,  3640,   106,   131,   476,   612,   981,  1285,   107,
     108,   109,   110,  1288,  1374,  2247,  1375,  2113,  1376,  1377,
    1819,  1736,  1605,  1606,  2954,  1125,  1126,  2116,  2567,  2568,
     865,   621,  1007,   999,   124,   125,   126,   624,   625,   127,
     960,   961,  2422,  2838,  3172,  3408,  3409,  3599,  3734,  1001,
    3605,  4028,  4153,  1002,  1003,  2867,  3607,  3857,  4030,  4126,
    1004,  2474,  3185,  3735,  3955,   111,   924,   570,  1372,  1367,
    1369,  1815,  2305,   112,   113
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3598
static const int yypact[] =
{
    4337,  2535,    71, -3598,  -144,   171, 41931,   154,  1387,  1387,
     392,  3309, -3598, -3598, -3598, -3598, -3598,  3305, -3598, 41931,
      71, -3598, 22568, -3598, -3598,   715,   854,   148,  1387,    71,
   -3598, 41931, -3598,   692,  1431,    71, -3598, -3598, 37243, -3598,
     392, 41931, -3598,   788, -3598, 37243,  1094,  -101,   728,   717,
     891, -3598, -3598, 41931,  2005,  -124,  1282,  1318, -3598, -3598,
     936, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, 23158, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598,  1230, 41931,  1358, 41931, -3598,  1144,
   41931, 35485, 41931,   967,  1397, -3598, -3598,  1405, -3598, -3598,
    1387,   392, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598,   930, -3598, -3598,
    1033, -3598, -3598, -3598, -3598, -3598,  1582,  1412, -3598,  1466,
   35485, -3598, 41931, -3598, -3598, -3598,   239, -3598,  1170, -3598,
    1154,  1486,  1491,  1502,  1452, 10590,  1547,  1547,  1547, 41931,
    1576,  1547,  1547, 41931, -3598,  1547, -3598,  1547,  1387, -3598,
   -3598,  3985, 41931,  1438,   147,   -82, 35485,  1149, 41931, -3598,
   -3598, 10590, -3598,  1575, -3598, -3598, -3598,  1387,  1771,  1645,
     227, 41931, -3598, -3598,  1387,   180,  1234,  1269, -3598, -3598,
    1382, -3598,  4279,   158, -3598, -3598, -3598,  2404, -3598, -3598,
    5523,  1382, -3598, -3598, -3598,  1277, -3598, -3598, -3598, 41931,
    1387,  1592, -3598, -3598,   194,   194,   194, -3598,   194, -3598,
     194, -3598,  -124,  1263, -3598, -3598,  1264, 41931,   603,   909,
   -3598, -3598,  1291,   639, -3598,  1349, 32555, -3598, 41931, -3598,
   -3598, -3598, -3598,  1557, -3598, -3598, -3598,  1381, -3598, 22568,
   41931,  1427, -3598, -3598, -3598, 22568,  1337, 41931, -3598, 22568,
   22568,   215,   564,  1457, 41931, 41931,  1762, -3598,  1974, 32555,
    1535, -3598,   531,  1352,  1405,  1987, -3598,  1412, -3598, 41931,
   41931, 41931, -3598, -3598, -3598, 37829,  1452,  1401,  1403,  1406,
   14839, -3598,  1420,  1434,  1443, 10590,  1455,  1471,  1480,  1483,
    1496,  1511,  1515,  1522,  1531,  1531,  1536,  1548,  1560,  1581,
     978,  1583, -3598,  1585,  1595,  1607, -3598, -3598,  1617,  1619,
    1624, -3598,  1626,  1632,  1635, 11197,  1638,  1640, -3598, 19614,
    1643,  1646,  1659,  1662,  1664,  1676,  1698,  1709,  1711, -3598,
   -3598, 10590,  1725, -3598, -3598,  1727, -3598,  1736,  1738,  1743,
    1746,  1750,  1752,  1754,  1758,  1761,  1764,  1776,  1789,  1802,
    1806,  1810,  1824, -3598,  1137,  1831,  1834,  1308,  1838, -3598,
    1850, -3598,   208,  1853,  1531,  1531,  1531,  1859,  1862,  1866,
    1891,  1893, 14839, 14839, 14839, 10590, -3598, 41931, -3598, 41931,
    1194,  2598, -3598,  2838, 14839,   881, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598,  1395,  1570, -3598, -3598, -3598, -3598, -3598,
    1900,  1375,  1857, 41931, 41931, 41931,  1728, 41931, 41931, 35485,
    1599, 41931, 32555, -3598,  1547,  1598,  3031,  1769,  1744,  1671,
   -3598, -3598, -3598, -3598, -3598,  1841, -3598, -3598,  1668, -3598,
    1870, -3598, -3598,   193, -3598,    83, -3598, -3598, -3598, -3598,
   -3598, -3598,  1969,  1610, -3598, -3598,   125, -3598, -3598, 41931,
   -3598, -3598, -3598, -3598,  2160,  1980,  1194,  2443,   952, 22568,
   -3598,    58, -3598,  -190, -3598, -3598,  2248, -3598, -3598, 32555,
   22568, -3598, -3598, -3598, 20204, -3598, -3598,  2467, -3598,  1919,
   -3598, -3598,  1570,  3389, -3598,  1769,  2186, -3598,  2197,  2105,
     564,  1999, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598,  1955,  2404, -3598, -3598, -3598, -3598,  2415, -3598,
    2120,    -4, -3598,  1978,   780,    -4, 33141,  2350,   159, -3598,
     135, -3598,  2427, -3598, -3598, -3598, -3598,  2137,  2111, -3598,
   -3598,   400,  2132, -3598,  2491, -3598,    54, -3598,  2173,  2350,
      -4,   159, -3598,  2406,  2522,   478,  -156, -3598, -3598,   607,
   -3598, -3598,  2591, -3598, -3598, 22568, -3598, -3598,  2160, -3598,
   -3598, -3598,  2072, -3598,  2330,  2175, -3598, -3598,    66, -3598,
    2078,     1,  2534, -3598,   961, 33727, -3598, -3598, -3598,  2566,
    2581,  1531,  2083, -3598, -3598, -3598,  2682, -3598, -3598,  2093,
    2595,  2595,  2595,  2700, -3598, -3598, -3598, -3598, -3598,  2262,
    2136, -3598,  1427, 22568,  2482,  2109, -3598, -3598,  2345, 10590,
   -3598, -3598,  4708,    22, -3598, -3598,   189, -3598,  2667,  2309,
   -3598, -3598, -3598, -3598,  2567, -3598, -3598,  2682,  2625,  2595,
    2523,  2131, -3598, -3598, -3598, -3598, -3598, -3598,   214, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598,  1516, -3598, -3598, -3598,
   -3598, -3598,  1427, -3598, 22568, -3598, -3598, -3598, 22568, -3598,
    2134, -3598,  2124, -3598, 10590, 10590,   401,  2674,  2733,  2733,
    2733,  1194,  2168, 10590, 10590, 10590, 10590, 10590, 10590, 10590,
    1068,  2150, -3598, -3598,  8162, -3598,  2151, 10590, 10590,  2238,
   10590,  1570, 10590, 23748, -3598,  3738, 10590,   841,  2627, 10590,
   10590, 10590, 10590,  2520, 10590, 10590, 23748,  2749,  2157, -3598,
    2153,  1278, 10590, 10590,  1360, 10590, 10590, 10590, 10590, 10590,
   -3598,  8162, -3598, 10590, 10590, 10590, 10590, 14839, 10590, 10590,
   10590, 10590, 10590, 10590,  2733,  2733, 10590, 10590,  1418,  8162,
   -3598, 10590,  1570,  2646,  2646, 10590,  1570,  6948, 10590, -3598,
   -3598, -3598,  2163, -3598, -3598, -3598, 23748,  2733,  2733, 10590,
   10590,  2674,  2674,  2674,   142,  2165,   990, 10590, 24928,  2162,
   -3598, -3598, -3598, -3598, 10590, 10590, 10590, -3598, 14839, -3598,
   -3598,  1784, -3598, -3598, -3598, 11804, 14839, 14839,  2169, 14839,
   14839, 14839, 14839, 14839,  2524, 14839, 14839, 15446, 16053, 14839,
   14839, 14839, 14839,   168,  2674, 35485, 14839, 10590, -3598, -3598,
   41931, -3598, -3598, -3598,  2167, 22568,  1599, -3598, -3598,   572,
    2628, -3598, -3598,  2171, 22568, -3598,  2170, -3598,  2517, -3598,
    2519,  2525,  2536, -3598, -3598, -3598, -3598,  2740,  2537, -3598,
   -3598,  2538, -3598, -3598,  2195, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598,  2296, -3598, -3598, -3598,  2204, -3598, 32555,  2204,
   -3598, -3598,  2204, -3598, -3598,  2204,    46,  2730, -3598, -3598,
   41931, -3598, 42517, -3598, 20204,  -144, -3598, -3598, -3598,  2548,
     174,  2205, -3598, 22568, -3598,    84,    84,  2439,   152, 35485,
   -3598, -3598,   141,  2207,  2284,  2213, -3598,  2289, 22568, 22568,
   -3598, -3598, -3598, -3598,  2808,  1234, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,  2217,
    2670,  2219, 32555,   718, -3598, 41931, -3598,  1450, -3598, -3598,
   -3598,  2229, -3598, 10590, -3598,  2230, -3598,  1142,  2605, -3598,
    -144, 10590, -3598,  2240,  1412, 41931, 41931, 41931, 22568, 41931,
   22568, -3598,  1023,  1023, -3598, 30797, -3598, -3598, -3598, -3598,
      -4, 41931, 41931,    -4, 32555, -3598,   159, 41931,    -4, -3598,
    2607,  2334, -3598, -3598, -3598,  2676, -3598, -3598,  2669,  2247,
   -3598,  2605, -3598, -3598,   159, -3598, -3598, 22568, -3598, -3598,
     159, -3598,   159,   159,    -4,    -4,  2301, -3598, -3598,  2254,
   -3598,  2301,  2393, -3598,   874,   194,  2492, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598,  1044, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598,   203, -3598, -3598, -3598,   323,
    2744, -3598, 35485,  2055,   702,   -15,  2055,  1396,  -144,   274,
   -3598,   274, -3598,  3945,  2526,   945, 22568, -3598,  2270, 38415,
   22568, -3598, -3598, -3598,  1356,  2274,  2276,  1194,  2736,  2741,
    2743,  2745,  2746,  2748,  2752,  2754,  2757,  2759,  2761,  2762,
    2763,  2764,  2776,  2777,  2780,  2783,  2288, -3598, -3598, -3598,
   -3598, 22568, -3598, -3598, -3598, -3598,  2384, -3598, -3598, -3598,
   -3598,  1833, -3598, -3598, -3598,   213,  2351,  2317,  2377,   122,
   32555,  2756, 41931, 41931,  1412, 41931, 41931, -3598, -3598,  1153,
    2596,  2597,  2603,  2341, -3598, -3598, -3598,  1186, 41931,  2770,
   27281, -3598,   295,   621, -3598,  2733,  2354, -3598,  2355,  2358,
    2360, 10590,   197,   445,   820,  1414,  1320,   839,   302,   149,
   -3598,  2367,  2375, -3598,   886, -3598,   369,   379,   911,   976,
    2370,  2371, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598,  2793, -3598,  1327, -3598, -3598, -3598, -3598,  2373,
   -3598, -3598,   981,   424,   437,   202,  2382,   441,  1365,  1384,
    2385, 23748, 41931,  2733,  2376,   987,  1056,  2733,  2383,   443,
    1083,  1448,  1477,  1526,  1129,  1147,  1157,   449,  1537,  2990,
    1168,   462,   473,   487,   504,  1174,  2388,  2390,   549,   260,
    2733,  2394,  1200,   285,  2380,  2392,  1202,  8769,  9376,  9983,
     389,   563, -3598,  2397, -3598,  2153,  2400,  2403,   291,  1206,
   -3598, 10590, -3598, -3598,   993,  1190,  2458,   165,   878, -3598,
    2552, 41931,  2130,   219, -3598, -3598, -3598, -3598, -3598, -3598,
     844, -3598,  2407, -3598,  2414,  1571,  2419, 10590,   904,  2419,
    3646,  1909,  1909, 14839,  3377,  2774, 11197,  1366, 11197,  1366,
    2419,  2419,  2419, -3598, 14839,  2418, 14839, 14839, -3598,  2674,
    1194,  2421,   771, 41931, -3598,   572, -3598, -3598, -3598, -3598,
     105, 32555,   109, 22568, 35485,  2417, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598,  4139, 22568, -3598, 41931, -3598,  2493,
   -3598, -3598, -3598, 20794, 20794, -3598, 20794, -3598, -3598,   776,
     805,  3063,  2447, -3598, -3598, -3598, 22568, -3598,  2812,   670,
   22568,  2270,  2431, -3598, -3598, -3598, -3598, -3598,  2161,  2533,
   -3598,  2434, -3598, 10590,  -144, -3598, 32555, 32555, 22568, 22568,
     686, -3598,  1613, -3598, -3598, -3598,  3389, 16660,  2845,  2857,
   20794, 20794, 20794, -3598, -3598, -3598, -3598, -3598,  1162,  1194,
   -3598,  2430, -3598, -3598, -3598, -3598, -3598, 39001,   305, -3598,
   -3598,  -144,  2859, -3598,  1194,  2448, 41931, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598,   660, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
      -4, -3598, -3598, -3598, -3598, -3598,  2649,  2350,  2132,  2859,
      -4,   159, 22568,    -4,    -4, -3598, -3598,  1566, -3598,   607,
   -3598, -3598, -3598, -3598, 41931,  2775,  2601, -3598,  2451, -3598,
   -3598, 22568, -3598,  2454, -3598,  2881,  3019,  2350, -3598, -3598,
   -3598,   105,   105,  2742, -3598,  -144,  2583,  2585,  2588,  2590,
    2593,  2629, -3598, -3598,  -144,  -144, -3598, -3598,   105, -3598,
     853, -3598, -3598, -3598, -3598,  -144,  -144,  -144,  -144,  2589,
    -144,  -144,  1545, -3598, -3598,   105,   105, -3598,  1300, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598,  1034, -3598,  2245,  3003,
    2709,   105,   105,  3003,   105,  2713,  2714,   105,   105,  2556,
    2958,   105,  2860,  2582,  1473,  2861,   105, -3598,  2604,  2973,
     105,   105,   105,   105,  3003,  2737,  3068,   105, -3598,   105,
    2751,  2766,   155,  2755,  2765,   105,  1005, 41931,   105,  2767,
     105, -3598, -3598,  4260, -3598, -3598, -3598, -3598, -3598, -3598,
     714, 21386, -3598, -3598,   347, -3598,  2711, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,  2529,
   -3598, -3598, 10590,  2530,  2589,  -144,  -144,  1026,  -144,  2589,
    -144,  -144,  -144,  -144,  -144,  2589,  2589,  -144,  1097,  -144,
    2589,  4708, -3598, -3598, -3598, -3598,   253,   105,   105,   105,
     105, -3598,  2365, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, 35485,  2875,  2208,   685, 35485, -3598, 41931, -3598,   372,
   41931,  2539,  -128,  2909,   144,   144, -3598, 22568, 22568, 22568,
   41931,  2578,  2447, 27281, -3598, -3598,   874, -3598,  2532, 12411,
   -3598,  2540, -3598, 10590, -3598, -3598, -3598,  1533, 10590, 10590,
    2999,  2233, -3598, 34313, -3598, -3598, -3598, 10590, 34313,  2233,
   10590, -3598,  2544, -3598,  2923,  2924, -3598, -3598, -3598, -3598,
   10590, -3598, 10590, 10590, -3598, 10590, 10590, 10590, 10590, 10590,
   -3598, -3598, 14839, -3598,  2549,  2551, -3598, -3598, -3598,  2555,
   -3598, 10590, -3598, -3598, -3598, -3598, -3598, -3598, -3598, 10590,
   -3598, 10590, -3598, 10590, 10590, 10590, 10590, -3598, -3598, -3598,
   13018, 10590, 10590,  2557, -3598, -3598, -3598, 10590, 10590, 10590,
   -3598, 10590,   799, 10590,  1002, 10590,  1109, 10590, -3598, 10590,
   -3598, -3598, -3598, -3598, 10590, -3598,  1608, -3598, -3598,  2565,
   -3598,   993,  2559, -3598, -3598,  1450, -3598, -3598,  2562,  2569,
    2570, 35485, 10590, -3598, -3598, -3598, -3598, -3598, -3598, 14839,
     330,  2560, 14839, -3598,  3646,  2520,  2520,  1848, 10590,   904,
    3646, 10590,  2563,  2561, -3598, 10590, 41931, -3598, -3598, -3598,
   -3598, -3598, -3598, 35485, -3598, -3598, -3598, -3598,   109, -3598,
    2170, -3598,  2270, -3598, -3598,  1629, -3598, 32555,  2572, -3598,
    2573,  2638,  2647,  2655, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598,  2350,  1613, -3598,  2571,
   -3598, -3598,  2345,  2668,  2608,  2929, -3598, -3598, -3598, 41931,
   14839, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
    3144,  2602,  2611, 41931,  1194, -3598,  2663, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598,    55, -3598, -3598,  2614,  2614,
   18432, -3598, -3598, -3598,  3045,   902,   902,   902, -3598, -3598,
   -3598, -3598,  2847, 32555,  3016,  3021,  3023,   961, -3598,   790,
   -3598,   883,  2975,  2350, -3598,  3024, 36071, -3598, 27867, -3598,
    2599,  2976,  2613,   105, 30211,    92, 25517, 31383, -3598, -3598,
    1026, -3598,    63, -3598, 30797, 30797, -3598,  2879, -3598, -3598,
   -3598, -3598,  2447,   159, -3598, -3598, -3598,  2620, -3598, -3598,
    1059,  2980,  2989, -3598,  2868,    39,  2868,  1059,  1059, 23748,
     874,  2236, -3598,  2589,  2922, -3598, -3598, -3598, 34899, 31969,
   -3598, -3598, -3598, -3598,  3124, -3598,  3125,   975, -3598, -3598,
    2381,   -15, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598,  1396,  2381,  2381,
     274, -3598,   206, -3598, -3598, -3598, -3598, -3598, 24338,    71,
   -3598,   342, -3598, 24338, -3598,  1356,  1356, -3598, 24338,    71,
    1026,  2589, 24338,  2589, 39587,    71,  -144,  -144,  2117,   105,
    2589, -3598, -3598,  2991, 41931,  2998, 24338, 24338, -3598, 35485,
   -3598,   105,  1243,  2589,  1026,  1026, 24338,    71, 23748,  1578,
   -3598,  -144,    71, -3598, -3598, -3598, -3598, 22568,    71,    71,
    2600, -3598, -3598, -3598,  2589, 39587, -3598, -3598,  5741, -3598,
   -3598, -3598, 17842, 41931,   264,   466, -3598,  2634,    24,   273,
    2710,  1601,  2648,  2650, 40173,  1194,  2589, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
    -144,  2161,  2381,  2381,  2351, -3598,  2896,  3057,   105, -3598,
    2199, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
    2735, -3598,  3237,  2825,  2658, -3598, -3598,   318, -3598, -3598,
     958, 22568, 17252, -3598,  2894, -3598,  2500, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598,  2657,   874,  2913,  1220,
    2447,  2677, -3598, 11197,  1217, -3598,  1194, 10590,  1194,  1888,
   -3598,  2671,  2671, -3598, -3598,  2673,  2671,  3043, -3598,  3049,
    2675, -3598,  2679, -3598,  1219,  2680,  2681,  1395, -3598, 10590,
   10590,  1245,  1265,   -96,   591,   602,   334, -3598,  1270,  3632,
   -3598, -3598,  1280,  1295,  1347,  1383,   667,  1411,  1651, 11197,
    1417,   818,   341, -3598,  1489,   761,   770,  1494, 10590,  1523,
   10590,  1587, 10590,  1593,  1600,  1604, -3598,  1955,  2565, -3598,
   -3598,  2683, -3598, -3598, -3598, -3598, -3598,  2678,  1194,  2686,
   -3598, -3598, 10590, -3598,   881, -3598, -3598, 14839,   363,  2687,
   -3598,  1194, -3598, -3598,  2688,  1395, -3598, -3598, -3598, -3598,
   -3598,  2712, -3598, 41931,  -183,  2696, 28453, 32555, 32555, 32555,
    2692, 10590, -3598, -3598,  2951, 22568, -3598,  3090, -3598, -3598,
   -3598, -3598,  2701,  2704, -3598, -3598, -3598,  3646,  3056,  2942,
   -3598, -3598,  2715, 32555, -3598,  2404, 23748, -3598,  2716, -3598,
    2716,   928,  2721,  1690, -3598, -3598, -3598,  2703,  1999, 16660,
    3132,  2131, 32555, 32555, 32555, -3598,  2447,  2447,   859,  2760,
    3086, -3598, -3598, -3598, -3598, 40759, -3598, -3598, -3598, -3598,
    1172, 41931,  3069, 41931,  7555, -3598, -3598,  3258, 10590, 32555,
     -51,   878,   105, -3598, -3598, -3598, -3598, -3598, -3598,  2350,
   -3598, -3598, -3598, -3598, -3598,  2350, -3598,    -4,  1566,  -181,
    1190, -3598,  1775, -3598, -3598, -3598,  3089,  1059,  2868,  2868,
    3093,  2984,   674,  2723, -3598,   105, -3598, -3598, -3598,  2404,
   -3598, -3598, 10590, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
    1034, -3598, -3598, -3598, -3598,  2731,  3095,  3098,  1356, -3598,
   24338, -3598, -3598, 24338, 24338,    70, 39587, -3598, -3598, -3598,
   -3598, -3598, -3598,  2738, -3598, -3598,  2161, -3598, -3598, 31969,
    -144, -3598, 24338,  2738, -3598, -3598,   217, -3598,  -144, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, 39587,  2739, -3598,
     300, -3598, -3598,  1771, -3598, 39587, -3598, -3598, 39587, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,  2750,
    2553,  1079, -3598,  2747,  2758, -3598, -3598, -3598, -3598, 41931,
   -3598, -3598, 22568, -3598, -3598, -3598,  5276, 41931,  2960, -3598,
   10590, 10590,  2997, 41931,  3004, -3598,  3274, 41931,  3338, 39587,
   -3598,  2753, -3598,  2771, -3598,  1717, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598,  2778, 41931,  2381,  2208, -3598, -3598,  -144,
     958, -3598, -3598, -3598, -3598,  3011,  3012, 41931, -3598, -3598,
   -3598, -3598,  2890, -3598, 22568,  3316, -3598,  2916, -3598,  2773,
     769,  4828, -3598,  2782,  2784,  2785, 27281,  2447,  3112, -3598,
   -3598,  2520, -3598,  1194, 10590,   884, -3598, -3598,   289,   995,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598,  2779,  2520,  2520, -3598, -3598,  2917, -3598, 10590, 10590,
   -3598, 10590, -3598,   226,  2786,  2797, -3598, -3598, -3598, -3598,
   10590, -3598, -3598,  2520, -3598, 10590, -3598, -3598, 10590, -3598,
   10590, 10590, -3598,  1615, -3598,  1649, -3598,  1669, -3598, -3598,
   -3598,  2229, -3598, -3598,   990, 41931, -3598, -3598,  1720, -3598,
   -3598, 10590, -3598, 36071, -3598, -3598,  2981, -3598, -3598,  3186,
   -3598, -3598, -3598,  -143,  -143,  -143, 13625,  1194,  3244, -3598,
   -3598, -3598,  3090,  3139, -3598,    65, -3598, 41931,  2787,   178,
   -3598,  1722, -3598, -3598, -3598,  1955,  2788, -3598,   105, 13625,
    2614,  2916, -3598, -3598,   928, 23748, 27867, -3598, -3598, 32555,
    2131,  2131,  2131,  2350,  3197,  2668,  2668, -3598, 26106, -3598,
   -3598,  2937, -3598, -3598, 29039, -3598,  1276, -3598, -3598, 14839,
    1585, -3598,  1194, -3598, 34899, -3598,  1194,   105,  2795,  2796,
   -3598, -3598, 41345, 10590, -3598, -3598, -3598, -3598,  1450,  2036,
   -3598,   874, -3598,  1059, -3598,  3162,  3164,  1059, -3598, -3598,
   -3598, 23748,  2447, 13625, -3598,   810,  1955,  1194,  2798,   300,
   -3598,  -104, 10590, 24338, -3598, -3598, -3598,  2802, -3598, -3598,
    3286,  3287, -3598, 24338,  1833, 41931, -3598,  3258, -3598, -3598,
   -3598, -3598,  5276, -3598, 23748, -3598, -3598, -3598, -3598, -3598,
   41931, -3598, 22568, -3598, 17842, -3598,  2806, -3598,  2671,  2671,
    2671, -3598, -3598, -3598, -3598, -3598,  2673,  3033, -3598,  2673,
    2673, -3598, -3598, -3598, -3598, -3598,   289,  2044, -3598, -3598,
     289, -3598, -3598, -3598,   110,  1324,  2673, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598,  2671, -3598, -3598, -3598, -3598,   289,
    2671, -3598,  2671,  2353, -3598,   279,   120,  2671,  2671,  2671,
    2811,  2807, -3598,  1194,  2520,  3340, -3598, -3598,  2955,  -144,
    3288, -3598,  1730, -3598,  2818, -3598, 40173, -3598,  2589,  1396,
   -3598, -3598, -3598, -3598,  2956,   803, -3598,  2983,  2824,  2826,
   -3598, -3598,  -144,  2840,  2841,  4260, -3598, -3598, -3598,  3411,
   -3598, 41931, 41931, 41931,  2532, -3598, 30797, -3598,   524,  1194,
    2843,  2844,  2849,  2851,  3397,   205, -3598,  3409, 34313, -3598,
   -3598, -3598,  1791, -3598,  2852,  2853,   194,  2856,  1673,   801,
    1793,  3138,  3219, -3598,  3072, -3598,  1692,  1082,  1701,  1714,
    1719,  1729, -3598, -3598, -3598,  1235,  1190, -3598, -3598,  1797,
   -3598,  3200,  3113,  1333,  2887,  2887,  2887,  1585,  1194,  1807,
   -3598, -3598, -3598, -3598,  3241, -3598, -3598,  2867,  2870, 41931,
   -3598,  2942,  2229, 23748, 13625,  2873,  2866, -3598,     1, -3598,
   -3598,  2869,  2131, -3598,  3433,  3282, -3598, -3598, 35485,  2878,
   -3598, -3598,  3171, -3598,   256,  3094, -3598, -3598, -3598,   -51,
    2966,  2969,   105,  1194, -3598, -3598,  2451,  2781,  2927,  1059,
    1059,  3020,  2930, 10590, 10590,  2892, -3598,  2913, -3598, -3598,
     831,  2229, 10590, -3598,  2161,  2942, -3598,  1741,  2893,  2898,
   41931,  2900,  2901, -3598,  3213,   264, -3598, -3598, -3598,  2353,
      71, -3598, -3598,  2738,    55,  2895, -3598, 41931,  3215, -3598,
   -3598, -3598,  1272, -3598,  2903,  1272,  1272, -3598,  2120, -3598,
    2935,   289, -3598, -3598,  2938, -3598, -3598, -3598,  1272,  2906,
     289, -3598, -3598,  1272, -3598, 35485,  -144,  2814, -3598,  2957,
   -3598,  3394,  3276, -3598,  2353, -3598,  3278,  3173, -3598,   289,
   -3598, -3598,  3487, -3598,   289,  3487,  1272,  3178, -3598,  1272,
   41931, -3598, -3598, -3598, -3598, -3598, -3598, 41931, -3598,  1060,
   -3598, -3598, -3598,  1828,  -144, -3598, -3598, -3598,  2921,  2925,
   -3598, -3598, -3598,   273, -3598, 41931,  5276, -3598, -3598, -3598,
    2894, -3598,  1069,  1854,   300,  2926,  1856,  1863, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, 34313, -3598,  3487,
    3183, -3598, -3598, -3598, -3598, -3598, 10590, -3598, -3598,  3220,
    3363, -3598, -3598, -3598, -3598, -3598, -3598,   883,   883, -3598,
   -3598, -3598, -3598, -3598,  3017,  3027, -3598, -3598,  3029, -3598,
   -3598,   140,  2361, -3598, -3598, -3598, -3598, 13625,  3297,  3026,
   -3598, -3598, 41931,  2977, -3598, -3598,  1235, -3598, -3598, -3598,
   -3598, 10590, -3598,  2913,  2117, -3598, 26106, -3598, -3598, -3598,
   -3598, -3598,  2945,  2946,  7555,   990, -3598,  2992, -3598, -3598,
   -3598,  2995,  1194,  1194, 41931,  3112, -3598, -3598,  1356,  1356,
   -3598,   831,  1235,   300, -3598,  1867, -3598, 41931, 41931,  1876,
   41931, 41931,   902,   902,   902,  1097,  1097, -3598, -3598, -3598,
   -3598, -3598,  3314, -3598, -3598,  1879, -3598,    67,  3203, -3598,
   -3598, -3598, -3598,  1272, -3598,   194, -3598, -3598, -3598, -3598,
   -3598,   194, -3598, -3598, -3598, -3598,  1531, -3598, -3598,  3214,
    2993, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
    2953, -3598, -3598,  3070, -3598, 47791, -3598, -3598,  -124,  2982,
   -3598, -3598, -3598,  1312, 41931, 22568,  2997,  3130, -3598,  3258,
   -3598,     1,   769,  2916, -3598,   382, 41931, -3598,  3221,    99,
     241, -3598, -3598,  2961,  1800, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598,   131,  3208,  2589,  2589,  2589,  2589,  2361,
   -3598, -3598,  3010, 22568, 14839,  3066,  1884, -3598, -3598,  1512,
    2854, -3598,  1467,   300, 10590,  2350, 31969, -3598, -3598, -3598,
   -3598, -3598, -3598, 10590,  2967, 10590,  2968,  1896, -3598, -3598,
    3391,  3391, -3598, -3598, -3598, -3598,  1907,  1914,   382,  1916,
    1918, -3598, -3598,   264,  2972, -3598, 41931, -3598, -3598, -3598,
      74, -3598, -3598,  1923, -3598,  1939, -3598,  1531, -3598, 10590,
    3428,  3000, 41931,   137, -3598, 48963, 48963, 41931, -3598, -3598,
   -3598, -3598,  4836, -3598, -3598,    16, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598,  3547, -3598,  2970,
   -3598, -3598,  2979,  1213, -3598, -3598, -3598,  5276,  3398,  1601,
   -3598, -3598, -3598, -3598, -3598,  2996,  1999,  -144,   105, -3598,
     382, -3598, -3598, -3598,   300,  3005,  3227, -3598,    99, -3598,
   -3598, -3598,   241, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, 23748, -3598, -3598,  2161, -3598, -3598,
   41931, -3598,  3059,   105,  3452,  3466,   105,   105,   105,   105,
    2994,  2854, -3598,  3445, -3598, -3598, 10590, -3598, -3598,  1194,
    3225, -3598,  3543,  1190,  1194, 41931,  1194, 41931, -3598, 41931,
      90, -3598, -3598,  3207,   382, -3598,    99,   241, -3598,  2942,
   -3598,   994,   994,   289,   194,   289, -3598,  1194, 10590, -3598,
   10590,  3039, -3598, -3598,  3436, 41931, -3598, -3598, -3598, -3598,
   10590, -3598, 47791, 47791, -3598, -3598, -3598, -3598,  3591,     1,
    3561,  3271,  3565,  3677, -3598, -3598,  3274,  5276, -3598, -3598,
   -3598,  2589, -3598, -3598, -3598,  1612, -3598, -3598,  3030, -3598,
     105,  2117,  3032, -3598,  3066, -3598,  3028, -3598,  -144,   105,
     105,  1102,  1102,  2161, 35485,  3136, -3598, -3598,   105,   300,
   41931, -3598,   929,  3378, -3598,  1947,  1951, -3598,  3593, -3598,
    3596,  3060,  3065, -3598, -3598, -3598, -3598,  1959, -3598,  3643,
   -3598,   933,  3318,  3322, -3598, -3598, -3598,  1194,  1194, -3598,
     266, -3598, -3598,  3434,  3524, 10590,  1194, 44861,  3073, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, 48377, 10590, -3598,    16,  3547, -3598,  3323, -3598,
    3324, -3598, -3598, -3598,  3544, 47791, -3598,  3545, -3598,     1,
   -3598, -3598, 23748, 13625, -3598, -3598, -3598,  3076, -3598, -3598,
     600, -3598,  -144,  -144, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598,  1961, -3598, 35485, -3598, -3598,  3637,  3638,
    3539,  3644,   929, -3598,  1179, -3598, -3598, -3598, -3598, -3598,
   40173, 40173, -3598, -3598, -3598, -3598,  3133,  3568,  3119, 10590,
   47791, -3598,  3551, -3598,  3486,  1892,  3430,  3096, -3598,  3097,
     528,  3588, 48963, 48963, -3598, -3598, -3598, -3598,  3566, -3598,
   -3598, -3598, -3598, -3598,  3272, -3598,  1965, -3598, 14232, -3598,
   -3598, -3598, -3598, -3598, 35485, -3598,  3136, -3598,  3128,   194,
     194,  3670,   194, -3598,  3676,  3687,  1179, -3598,  3134,  1975,
     994,   994, -3598,   286, -3598,  1194, 45447,  3685, 41931, -3598,
   -3598, -3598, -3598, 10590, -3598, 36657, 46033,  3131, -3598, -3598,
   -3598,  3301, -3598,  3677,  3531,  3543, -3598,  3076, -3598,  3140,
   -3598,  3646,  2854, -3598, -3598,  3142, -3598, -3598,   194, -3598,
     194,   194, -3598, -3598, -3598, -3598, -3598, 10590, -3598,  3597,
    3226, -3598,  3146, -3598, 47791,  1602, 47791, -3598, -3598,  3549,
    3147,  1685, -3598,  3149, -3598, -3598, 47791,  3697,  3378, -3598,
   14232,  3151, -3598, 10590,  3152,  3148, -3598, -3598, -3598, -3598,
    1194,  3708, 47791, 41931, 43103,  3341, 46619,  3580, 41931,  5276,
    3583,  3586, -3598, 47791, -3598,   194,  3555, -3598, -3598,  1194,
   -3598, -3598,  3248, -3598, 43689, -3598,  2444, -3598,  3191, -3598,
   -3598,  3652,  1946, -3598, -3598, -3598,  3435,  3170, -3598, -3598,
   47791, 47791, -3598, -3598, -3598, 29625, 10590, -3598, -3598, -3598,
   -3598, -3598,   961,    28, 19022,  3320, 44275, 47205, -3598, -3598,
   -3598, 26695, -3598, -3598, -3598,  3595, -3598,  1194, -3598, -3598,
   -3598, -3598, -3598, 35485,  1985, -3598, -3598, 23748, -3598, 29625,
   -3598, -3598, -3598, -3598, 21976,  3174, -3598,   105, -3598, -3598,
   23748, -3598, -3598, 13625, -3598, -3598
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3598, -3598, -3598, -3598, -3598,    72, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598,  1621, -3598, -3598, -3598, -3598, -3598,
    1821, -3598,   608, -1689, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598,   606,  1451,  3166, -3598,   364, -3598,    51, -3598,
   -3598, -3598, -2712,   -65,  -237, -3598, -3598,   391,    20,  2846,
    -235, -3597, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598,   375,   373, -3598, -3598,   190, -3598, -3598, -2233, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598,  -422,  -372,  1433,
   -3598, -3598, -3598,  3759, -3598,  3255, -3598,  1158,  2082, -3598,
   -3598, -3598,   368,   216, -3598,   218, -3598,   220, -3598,   222,
   -3598,   223,   224,   228,   229, -3598,   231, -3598, -3598,  -370,
   -3598, -3598, -3598, -3598,   232, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598,  -249, -3598, -3598,   -92, -3598, -3598,  -233,   236,
   -3598,  -191,   243, -3598,   245, -3598,  -112, -3598,  -103, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598,  2858, -3598, -3598, -3598, -1873, -3598, -3598, -2254,  2440,
   -3598, -1691, -3598, -3598, -1776, -3598, -3598, -1613,   965, -3598,
   -3598,  -106,  -321, -3598, -1327, -1759, -1745, -3598, -3598, -3598,
   -1871, -1849,  -732,  2188, -1124, -2099, -3598, -3598, -3598,   234,
   -3598, -3598, -2381,  1924,  2445, -3598,  2436, -3598, -3598,  1061,
   -3598, -3598,  1227,  1652, -3598,   869,  2616, -1144, -3598, -3598,
   -3598, -3598, -3598, -3598,    79,   230,    -1, -3598, -3150,   604,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -2435, -3598,
   -3598, -3598,  -248, -3598, -3598,  -160, -3598, -3598,  -204, -3598,
      98, -2182, -3598, -3598, -3598, -3598,  2435, -1225, -3598,  3401,
   -3598,  -494,   701,  1986, -2300, -1326, -3598,  -878,  -850, -2337,
   -3598, -3598, -3598, -3124,  1038,  1419, -3598,   796,  1981, -1774,
   -3598,  1488, -3598, -3598,   824, -3598, -2564, -3598, -3598, -3598,
     783, -3598,   784, -3598, -3598, -3598,  -836,   752,  -996, -3598,
     350, -2278, -2370, -3598,   576, -3598,   535, -3310, -3598,  -549,
   -1963, -2251,    56, -3598, -3598,   553, -2911,   897, -3598, -3598,
   -3598, -2978, -1504, -3598,   123, -3598, -3598, -3598, -3598, -2748,
   -3598, -3598, -1392, -2148, -3598, -3598,  3922,  3926,  -983, -2561,
   -3381,   126,   132, -3598, -3598, -3598,  2470, -1790,   200,   181,
     196,  1960, -1896,   345, -2217, -3598,   386, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598,  2043,  -944, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -2247,   879, -3598, -3598,  1572, -3598, -3598, -3598,
   -1756,  -470, -2008, -3093, -3598, -3598, -3598, -3598, -3598, -3598,
    1551, -3598, -3598,  2166,  2621, -3598, -3598, -3598, -3598, -3598,
   -3598,   637,  1759, -3598, -3598, -3598, -3598, -3598, -3598,   899,
    2541, -3598, -3598, -3598,   -11, -3598, -3598, -3598, -3598,  2267,
   -3598, -3598, -3598, -3598,  2576, -3598, -3598, -3598, -3598, -3598,
   -3598,  1372, -3598,  1796, -3598, -1367, -3598, -3598,  1007,  -930,
    1749,  -565,  1882,   393, -3598,  3431, -3598, -3598, -3598, -1556,
   -2301, -3598,  3141, -1192, -2357,  2266,  -608, -1720,  1036,  -626,
    2833, -3598, -1089, -1077, -3598, -3598,  -611, -3598, -3598, -3598,
    -609, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598,  1415, -3598, -3598, -3598, -3598, -1621, -3598, -3598,
   -3598, -3598, -3598,  1501, -3598,  1983, -3598,  -444, -3598,  2941,
   -3598, -3598, -3598, -2143, -1726,  1710,   964, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -2196, -3598, -3598, -3598,
   -3598, -3598,  1899, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -1559, -3598, -1359,   346, -3598,   488, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598,    21,   846,    19, -1994, -1035,  1507, -3598,
   -3598, -1217,  2985, -1914, -3598, -3598, -3598,  1885, -3598, -3598,
   -3598, -3598, -3598,   932, -2401, -1320, -3598, -3598, -2959,  -855,
   -2127,  -827, -3598, -2156,   498, -1708, -1687,  -268,   146, -1256,
   -3598, -3598, -3598, -3598, -3598,  -132, -3598, -3598, -3598,   525,
    1778, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598,  -514,  -671, -3598,  2032,  2210, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598,  2799,  2790,  1847, -3598, -3598,
   -2438, -3598, -3598,  1811, -3598,   762, -2211, -1677,  1039, -3598,
   -3598,  1037, -2992, -3598, -3598, -3598, -3598, -3598, -3598,   980,
   -3598,    80,  3482, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
    2574, -1003,  3414, -3598, -3598, -3598, -3598, -3598, -3598,  2257,
   -3598, -3598, -3598, -3598, -3598, -3598,  2768,  3503,  -547, -1222,
   -3598,  -718,  2717,  2265,  -838, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,  2389,   954,
   -3598, -3598, -3598,  2792, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,
   -3598,  1081,   -21, -3598,    75,   -58, -3598,    15, -3598, -3598,
   -3598, -3598, -3598,  -152, -3598, -3598,  -157,  -624,  -929, -1288,
     700, -1684, -1912,  1073,  2791, -3017,  -638, -1099, -1111, -1710,
      69, -3598, -3598,  2568,    88,   712,  -361,    -6, -2570,  -109,
    -546, -3598, -2574, -3598, -3598, -3598, -3598,  2337, -3598, -3598,
   -3598, -3598,  1402, -3598, -3598, -3598,  1043, -3598,   787,   573,
   -3598, -3598,   157, -3598,  2395, -3598, -3598, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598, -3598,  2805,
    3556,  3252, -3598,  2862, -3598, -3598, -3598, -3598, -3598,   460,
   -3598,   556, -3598, -1902,  2639,   840, -3598,  1497,  -313,  -587,
   -3598, -3598,   463, -3598, -3598,  1429,  3558,  3253, -3598, -3598,
   -3598, -3598, -3598, -2585,  -840, -3598, -3139, -2636, -1597, -3598,
   -3598, -2010, -2803, -3598, -3598,  -987, -3598, -3598, -3598, -3598,
   -1925, -3598, -3598, -3598,    96,  3621,  3622, -3598, -3598,   555,
   -3598,   246, -3598, -3598, -3598, -3598, -3598, -3598, -3598,  3488,
   -3598, -3598, -3598, -3598,  3489, -3598, -3598, -3598, -3598, -3598,
    3490, -3598, -3598, -3598, -3598, -3598,  1745, -3598, -3598, -3598,
   -3598, -3598, -3598, -3598, -3598
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2438
static const yytype_int16 yytable[] =
{
     467,   900,   984,   904,  1380,  1594,  1382,   930,  2114,   510,
    1569,  1289,   593,   509,   998,  1006,   515,  1593,   527,  1481,
    2257,  2207,  1939,  1699,   534,   529,   465,  1773,  1546,  1043,
    1045,  1027,   541,  1471,  1472,   544,  1051,  1311,  1179,   541,
     943,  1069,  2777,  2240,  1345,  1936,  2446,   562,  2642,  1615,
    1317,   753,  2674,  2678,  2680,  1659,  1623,  1817,  2727,  2612,
    2522,  1387,  1346,  3007,  3050,  2525,  1082,  1511,  1842,  1625,
    1626,  3318,  1317,  1629,  1630,  1631,  1632,  1913,  1634,  1635,
    1637,  1639,  1640,  1641,  1642,  1643,  1100,   582,  2498,  1388,
    1102,   513,   133,  1106,  2350,   973,   976,  2888,  1113,  1114,
    1115,  2711,  1707,  2880,  1780,  2573,  2239,  2345,  2286,   585,
    3323,   467,  2466,  2358,   467,   592,   598,  2362,  2692,  2693,
    3166,  2346,  1790,  1121,  1122,  1123,  2663,  2773,  2377,  1974,
    1793,  1794,  1163,  1014,  2467,  1164,  2751,   587,  2386,  3500,
     589,  2333,  2898,  1228,  2308,  2309,  2903,  2702,  3357,  3362,
    2599,  3246,  3363,  3391,  1702,  2712,  3632,  1130,  1131,  2155,
    1820,  2320,   581,  1260,  1130,  1131,   474,  2341,  1984,  3364,
    1713,  3371,  3747,  2394,   611,  3535,  3338,  3390,  2338,  2339,
    1130,  1131,  2252,  1347,  2569,   526,  2882,  1223,  1439,  2487,
    3077,   533,  1228,  3474,  2360,  2361,  2455,  2363,  3821,  1644,
    2366,  2367,  1322,  3002,  2370,  1838,  2857,  3080,  2754,  2379,
    2951,  2416,   807,  2382,  2383,  2384,  2385,  1130,  1131,  2690,
    2389,  2220,  2391,   602,  2463,  3445,  1182,  2322,  2400,   919,
    1855,  2404,  1683,  2406,  1130,  1131,  2427,  2902,  2464,  2737,
    2738,  2437,  3549,  1109,  1363,  2150,  1443,  2443,  2444,  1300,
     114,  3687,  2448,  2302,   522, -2385,  3952,  1220,  2150,  1342,
     824,  1816,  3153,   869,   870,  2604,  3324,  2155,  3231, -1835,
     977,  1844,  2819,  2679, -1400,  1130,  1131,  2707,  1229,  3196,
    2500,  3253,  3498,  1254,  4209,  3898,  3842,   603,  2708, -2321,
    2450,  2451,  2452,  2453,   987,  2830,  3038,  3815,  1855,  3214,
    1130,  1131,   832,  2480,  1370,  3533,  1130,  1131,  2395,  3214,
    1130,  1131,  3215,  1244,  3747,  1391,  1245,  1130,  1131,  3095,
    3833,  3039,  3215,  1384,   571,  1656,  3216,  1229,  3899,   132,
    3508,   128,  1980,  1384,  2995,  1354,  3216,   869,   870,  3748,
    2018,  2651,  1318,  2488,  1234,  1130,  1131,   869,   870,  1130,
    1131,  1710,  -822,  2850,  2851,  1444,  1130,  1131, -2385,  1445,
     116,  2828,  -523,   869,   870,   554,   523,  3475,  2696,  3048,
    1446,   616,  3651,  1384,  1464,   132,   618,  3267,  1130,  1131,
    2475,   869,   870,  3568,  1130,  1131,  1461,  1462,  1463,   134,
    1319,  1821,  3572,  1711,  1130,  1131,   920,   770,  2969,  1645,
    1465,  2476,  -524,  2745,  1130,  1131,  2829,   810,  3673,  4010,
    1110,  3585,   129,  1484,  1355,  1510,  3587,  1440,  3066,  3268,
    1249,  1646,  1460,  3049,  2418,  3096,  1838,  3854,  1069,  4010,
     542,   555,  1684,  3904,  2831,  3688,  1813,  3843,  2820,  1130,
    1131,   470,  2862,  2081,  1655, -1400,  1176,  3900,  1364,  1408,
    2221,   833,  1130,  1131,  1246,  3747,  1130,  1131,  1130,  1131,
    1130,  1131,  1460,  2021,  1130,  1131,  4210,  1327,  3040,  2741,
    3834,  3043,  3743,  2709,   592,  3617,   598,  1130,  1131,   572,
     897,  3748,  1775,   607,  3653,  1778,  3952,  3197,  1130,  1131,
    1782,  1447,  2376,   766,  1838,  3641,  1371,   598,  1132,  3325,
    1856,  1133,  1130,  1131,  3063,  1132,   805,  1387,  1133,  1167,
     592,  3054,   815,  1842,   825,  3329,  1795,  1796,  3087,  1130,
    1131,  1132,  2746,  2657,  1133,   828,  3081,  2745,  3339,   809,
    1620,  1659,  3689,  3076,  1485,  1388,  3078,  3079,  2156,  2344,
    1628,   994,  2863,  1130,  1131,  1343,   808,  3958,  1350,  2151,
    1818,  1287,  3232,   916,   978,  3089,  2134,  1649,  1132,  1685,
    1657,  1133,  2151,  1260,  1130,  1131,  3279,  2137,  1856,  2282,
    2140,   933,  2097, -1400,  3674,  1301,  1647,  1387,  1130,  1131,
     592,  3200,   947,  2345,  1448,  2489,  2890,  1913,  1260,  2466,
    3818,  1495,  1496,   582,   467,  2720,  3844,  2346,   620,   582,
    3075,   971,  3182,   582,   582,  1388,  1130,  1131,   985,   947,
    3470,  2467,  1534,   592,  1656,  2222,  1132,  1130,  1131,  1133,
     958,  1548,  3748,  1015,  1016,  1017,  1323,  1441,  2264,  1022,
    3822,  3478,  1792,  1561,  1562,  1563,  1130,  1131,  3272,  2691,
    2131,  1132,  1568,  2952,  1133,  1974,  2156,  1132,  2755,  2739,
    1133,  1132,  2759,  2758,  1133,  2760,  2462,  1224,  1132,  1221,
    1178,  1133,  2771,  1843,  4074,   774,  2775,  2776,   957,  3907,
    1662,  1714,  1679,  1070,   968,  2783,  2786,  2265,  2852,  3365,
    3756,  2792,  1130,  1131,   820,  2396,  1132,  1703,   849,  1133,
    1132,   831,  2770,  1133,  3798,  3194,  2807,  1132,  3742,  2664,
    1133,  2463,  2416,  1985,  2778,  2973,  2974,  2975,  2735,  3321,
    3947,  2028,  3662,   921,  1441,  2464,  1844,   917,  2847,  1132,
    1012, -2321,  1133,  2895,  1979,  1132,  2747,  1111,  1133,  1701,
    2701,  1127,  1134,  1129, -1400,  1132,  1729,   524,  1133,  1134,
    3351,  1820,  3013,  3014,  1720,  1132,  1600,  1601,  1133, -2321,
    3010,  3011,  3012,  3446,  2029,  1134,  3181,  1172,   467,  1174,
   -1400,   947,   467,   592,  2849,   467,   592,  1314,  3090,   897,
    1962,  2887,  2416,  2117,  3370,  2019,  1130,  1131,  1779,  3889,
    1132,  2855,  3373,  1133,  1173,  1130,  1131,  3274,  1177,  3396,
    2419,  1181,  1134,  1132,  1441,  3863,  1133,  1132,  3509,  1132,
    1133,  1132,  1133,  1233,  1133,  1132,  1600,  2047,  1133,  1134,
    1756,  2740,  -822,   582,  1130,  1131,  1130,  1131,  1132,  2642,
    4031,  1133,  -523,   592,   582,  2617,  3299,  3217,   582,  1132,
    3349,  3350,  1133,  1130,  1131,  1130,  1131,  3217,  2902,  4171,
    1822,  2902,  2902,  1132,  3919,  3914,  1133,  3916,  1980,  1657,
    1134,  3388,  2220,  3343,  1130,  1131,  3328,  3308,  2902,  2469,
    1132,  3312,  -524,  1133,  4062,  2082,  1351,  3070,  1000,  1008,
     592,  2963,  3372,  2822,  2864,  1134,   619,  3389,  3392,  3394,
    3395,  1134,  2895,  1304,  1132,  1134,  3283,  1133,  1240,  2086,
    2087,  1328,  1134,  2748,  3740,  2103,  2104,   772,  4039,  1257,
    2009,  1130,  1131,   979,  1730,  1132,  2988,  2027,  1133,   582,
    3307,  1251,  1656,  2053,  3311,  2266,  3525,   995,  -430,  1132,
    1134,  1994,  1133,   829,  1134, -2252,  1130,  1131,  2656,  1383,
    3986,  1134,  2278,  1206,  2581,  2582,   519,  2710,  2920,  2921,
    1305,  2194,  2276,   936,  1995,  2937,  2938,  1132,  1535,  1165,
    1133,  1536,  2281,  1134, -2253,  2284,  2285,   582,  1132,  1134,
    1317,  1133,  2307,  2752,  2752,  2240,  1306,  2960,  2961,  1134,
    1990,  4033,  1165,  3205,  2034,  2539,   475,  1132,   980,  1134,
    1133,  2345,  2558,  3196,  2035,  2466,  1773,  1773,  1352, -1360,
    1317,  1130,  1131,  2098,  1842,  2346,  1130,  1131,  3015,  2935,
    2295,  3210,  1130,  1131, -1670,  2502,  2274,  2467,   582,  3047,
    3526,  1353,  1477,  2124,  1134,  2344,   959,  1130,  1131,  1610,
    1357,  3730,  3059,  1132, -1360,  3415,  1133,  1134,  2239,  2045,
   -2252,  1134,  1237,  1134,  3416,  1134,  2350,  2139,  3304,  1134,
    2580,   626,  2046,  2141,  3908,  3527,  2049,  1070,  2061,  3612,
    3438, -1692,  1134,  4004,  2069,  2377,  1648,  2470,  1855, -2253,
    1070,  2697,  2132,  1134,  2659,   996,  1927,  2073,  2631,  2195,
    2118,  1130,  1131,  1838,  3913,  3988,  2868,  1134,  2074,  3086,
    1484,  2221,  1913,  1468,  2717,  1898,  3989,  1475,  1387,  2241,
     518,  3514,  2075,  1358,  1134,  2200,  2730,  2463,  1130,  1131,
    2585,  2586,  3655,  2114,  1731, -2437,  1834,  3282,  1843,  2076,
    1595,  2464,  3210,  3518,  3519,  2154,  1388,  1132,  1134,  1594,
    1133,  2048,   592,  2627,  1130,  1131,  1132,  1974,  3439,  1133,
    1901,  3730,  3730,  2462,   531,  3837,  3838,  2401,  2119,  1134,
    1712,  2579,   548,  2430,  1130,  1131,  2660,  1657,  3317,  2158,
    2347,  2589,  3211,  1134,  2080,  1132,   937,  1132,  1133,   592,
    1133,  3859,  1130,  1131,  1652,  3417,  1307,  3894,  2099,   582,
    2216,  2217,  1130,  1131,  1132,  1928,  1132,  1133,   582,  1133,
    1013,  1134,   938,  1130,  1131,  2560,  2125,  2869,  1594,  1130,
    1131,  3197,  1134,  1656,   556,  1132,  2918,  1844,  1133,  2267,
    2715,  1500,  2431,  4035,  2471,  2731, -1692,  2919,  1407,  1130,
    1131,  1134,   592,  2917,   662,  1130,  1131,  1130,  1131,  2201,
    3016,  1130,  1131,  1238,  1688,  2010,  1691,  3212,   582,   689,
     557,  1685,  1130,  1131,  1130,  1131,  3060,   582,  1802,  1166,
    1979,  4234,  1132,   592,  1654,  1133,  2222,  1835,   520,  2982,
    3614,  2468,   582,   582,  1838,  3449,  2196,  1134,  1467,  2373,
    1130,  1131,  1166,  3211,  3850,  2275,   559,  1132,  3730,  3730,
    1133,   811,  2930,   667,  3851,  4005,   592,  1594,  2202,  1733,
    1130,  1131,   574,  1824,  3990,  1130,  1131,  1741,  1763,  2790,
    1484,  1441,  2562,  1308,  2432,  1130,  1131,  1937,  1315,   467,
     467,   467,   582,   467,   582,   689,  3436,  3437,  2402,  1774,
    1130,  1131,  4105,  4106,  1309,  1776,   467,   577,   592,  2408,
    1938,   467,  1802,  1695,  1855,  1757,  1758,  1759,  1856,  1761,
    1980,  2120,  1132,  3909,  1743,  1133,  2469,  1132,  3222,   588,
    1133,   582,  1777,  1132,  1764,  2249,  1133,  1781,   897,  3055,
    3056,  1134,   812,  3730,  1310, -2252,  2752, -1693,  1132,  2870,
    1134,  1133,  1130,  1131,  1537,   678,  2940,  1538,  3730,  2433,
    3974, -1360,  1484,  2416,  2145,  2941,  2226,  1760,  -430,  1762,
    2126,  3730,  2146,   583, -2253, -2252,   592,   950,  1753,  1134,
    2250,  1134,  3528,  1803,  2416,  3474,  2127,  1804,  1130,  1131,
     582,  1816,  1744,  1932,   582,  3801,  3456,  -196,  1134,    42,
    1134,  1553,  1132,  2344, -2253,  1133,  1791,  2779,  2249,  2376,
     813,   713,  2936,  3910,  2022,  3213,  1130,  1131,  1657,  1134,
    1484,  3745,  1130,  1131,  3539,   582,  3730,   951,  1603,  1132,
     694,  2110,  1133,  2026, -2385,  3975,  1049,  3991,  3730,  3730,
    3911, -1670,  4079,  4079,   592,  2871,   467,   467,  2321,  1992,
     467,  2808,  1734,  2375,   689,  1132,  1168,   575,  1133,   543,
    2847,   538,  1022,  3852,  2008,  1929,  1134,  1803,   538,  1934,
     599,  1804,  1988,  1989,  3621,  1132,  1854,  2780,  1133,  1315,
    2033,  1745,  3730,  1557,  2228,  2229,  2889,   713,  2959,  1845,
    1147,  1134,  3730,  1132,  1130,  1131,  1133,  1802,  3597,  1130,
    1131,   586, -1693,  1132,  1765,  2036,  1133,  2226,   952,  1816,
    1838,   836,  1049,  2584,  1132,  1594,   116,  1133,  3800,  2462,
    1132,  3001,  4037,  1133,  3415,  4041,  3213,  2998,  1130,  1131,
    3730,   607,  3730,  3416,  2347,  1070,  2054, -2385,  1130,  1131,
    1132,  1580,  3730,  1133,  1266,  2159,  1132,   600,  1132,  1133,
     604,  1133,  1132,   608,    55,  1133,  1134,  2434,  3730,  3475,
    3730,  1134,  3730,  1132,  1937,  1132,  1133,  1134,  1133,  3730,
    2037,  1050,  2781,  1735,   552,  2044,  2527,  2129,   553,  1843,
    3730,  2057,  1134,  1604,  1856,  1746,  2111,  1938,   611,  2533,
    1846,  1132,  1130,  1131,  1133,  2123,  3730,  3730,  1130,  1131,
    3942,  1051,  1102,  1106,  2617,  1130,  1131,  1130,  1131,  1130,
    1131,  1132,  3730,  3730,  1133,   613,  1132,  3730,   837,  1133,
    1130,  1131,  2548,  3681,  3682,   689,  1132,  3534,   721,  1133,
    1656,  3676,  3677,  3976,  3679,  3680,  1134,  2147,  4047,  2114,
    3548,  1132,  4129,  2373,  1133,   592,   713,   582,   592,  3963,
    2058,   615,  1803,  3598,  1130,  1131,   632,  4054,  3476,   582,
     483,  2164,  3613,  1134,  3417,  3294,  1464,  2170,  2170,  2048,
    2170,  1049,  1150,   627,  1130,  1131,  3462,  2062,  1130,  1131,
     582,  1937,  1994,  3548,   582,  2327,  3295,  4055,  2791,  1134,
     838,  2595,  1466,  1132,   629,  1147,  1133,  1130,  1131,   630,
     592,   592,   582,   582,  1938,  1995,  1130,  1131,   953,  1134,
     631,  1070,  1979,   633,  2170,  2170,  2170,  3296,  2468,  1130,
    1131,  2834,  2469,  2066,  1130,  1131,  3559,  1134,   995,  1132,
    1101,  2262,  1133,  3781,  1130,  1131,  2835,  1134, -1590,  4145,
    2273,  2067,  2169,  2169,  2328,  2169,  1130,  1131,  1134,  1847,
     762,  2068,  3782,  1168,  1134,  2192,  4150,  1132,  1848,  1240,
    1133,   767,  2072,  1132,  1849,  2145,  1133,  4066,  2077,   954,
    2329,   955, -1590,  3024,  1134,  4151,   582,  1257,  2219,   806,
    1134, -1590,  1134,   982,   983,   897,  1134,  2003,  2290,  2169,
    2169,  2169,  2215,   817,  2085,   582,  2090,  1134,  1289,  1134,
    2105,  3895,  3082,  3896,  1168,  1130,  1131,   821,  1168,  2769,
    3477,  2892,   247,  2908,   249, -1590,  3560,   713,   823,  3759,
    3763,  2501,  3305,  3478,  3044,  1134,   841,   959,   843,  2269,
    3045,  1421,  1422,  3093,  2374,  1132,  2330,   634,  1133,  2914,
    1132,  3099,  1049,  1133,  3101,  1134,  3208,  2375,   912,  3046,
    1134,  2283,  1317,   833,  2587,  3561,  1850,   931,  1317,  2915,
    1134,  2291,  2456,   932,  2922,  1657,  2472,  3224,  3225,  1132,
    2301,  4144,  1133,  4146,  2926,  1134,   996,  1150,  3586,  1132,
    1443,  3588,  1133,  3366,  1594,  3174,  3367,   471,  3237,  2927,
     472,  2403,   809,  1130,  1131,  2340,   940,  1130,  1131,  4164,
     949,  1105,   959,  2311,  2523,  2417,  1400,  1401,  1773,  2523,
    3479,  2331,  2318,  2319,  2025,  1167, -2437,  3769,  3770,  3771,
    3772,  2041,  1167,  2323,  2324,  2325,  2326,  1134,  2334,  2335,
     969,   471,   988,  1132,   472,  3622,  1133,  4196,  4197,  1132,
    1594,  2928,  1133,  1616,  1458,  1851,  1132,   993,  1132,  1133,
    1132,  1133,  2715,  1133,  1159,  1160,  1161,  1162,  3759,  2050,
    1167,  1132,  3763,  1134,  1133,   592,  2023,  1434,  1435,   592,
     989,  2473,  1147,  1594,   467,  2141,  1170,  2929,  2051,  1551,
     532,   582,   582,   582,  2496,  2790,  2292,  2499,   114,  1444,
    1167,  1134,  2688,  1445,  1024,  1132,  1025,  1134,  1133,  1026,
    2478,  2241,  2577,  2293,  1446,  2931,  4231,   592,  2024,  1167,
    1171,  2934,   592,  1028,  2294,  1132,  3759,  3763,  1133,  1132,
    1152,  1153,  1133,  2428,  2429,   563,  2436,  1029,  2438,  2439,
    2440,  2441,  2442,  1147,  2598,  2445,  1030,  2447,  1132,  3794,
    3795,  1133,  2063,  1167,  1228,  2507,  3872,  1132,  1033,  1680,
    1133,  2226,  1681,  2327,  3214,  1682,  2492,  2493,  2494,  2227,
    1132,  3861,  3796,  1133,  1034,  1132,  1175,  3215,  1133,  1134,
     564,  2064,  1167,  1035,  1134,  1132,  1036,  2994,  1133,   921,
    3873,  3216,  2757,  2939,   897,  3331,  3332,  1132,  2942,  1037,
    1133,  2295,   869,  3358,   910,   911,  3878,   914,  1210,  3881,
    3882,  3883,  3884,  1134,  1038,   592,  2784,  2785,  1039,  2332,
     982,   983,  2328,  1134,  2468,  1040,  1617,  2944,  1825,  3401,
    2065,  1167, -1400,  3037,  1041,  1447,  3670,  3671,  2958,  1044,
    2596,  2070,  1167,  1826,  1329,  1130,  1131,   592,  2329,  2336,
    2337,  1046,   565,  3960,  1207,  2523,  1132,  2682,  2687,  1133,
    1186,   592,  1594,  1047,  1150,  1155,  1156,  1157,  1158,  1159,
    1160,  1161,  1162,  1330,  2998,   869,   870,  1134,  1217,  2228,
    2229,  1209,  1211,  1134,  1048, -1400,  1052,  1212,  1053,  1229,
    1134,  2946,  1134,  2625,  1134,  1215,  3980,  2948,  1054,  2726,
    2523,  2889,  3972,  3973,  2949,  1134,  2114,  2625,  2950,  2296,
    1055,  3985,  2566,  1167,  2330,  1227,  2230, -1400,  1218,  3242,
    1056,  1331,  1057,  1855,  2647,  1150,  1332,  1058,  1448,  1059,
    1213, -1400,  1855,  2602,  2603,  1060, -1400,   592,  1061,  1134,
    2172,  1064,  2173,  1065,  1132,  1214,  1071,  1133,  1132,  1072,
    2668,  1133,  2670,  3243,  1228,  2932,  1167, -1400,   592,  1134,
     592,   592,  1073,  1134, -1400,  1074,  2511,  1075,  1774,  1774,
    2598,  2297,  1967,  3244, -1400,  3627,  3628,  3455,  2201,  1076,
    3352,  1967,  1134,  3355,  3356, -1400,  2244,  2245,  2246,  2331,
   -1400,  1134,  2512,  1595,  3004,  3005,  3461,  3453,  1827, -1400,
    3368,  1077,   592,   592,  1134,  3463,  -604,  1152,  1153,  1134,
     925,   926,  1078,   927,  1079,   928,  2347,  1226,  3464,  1134,
    1618,  3177,  3178,  3465,  3248,  1167,  3270,  3271,  1081,  2348,
    1083,  1134, -1400,  3466,  3406,  3407,  1619,  2202,  2744,  1084,
    2513,  1085,  2417,  2514,  2667,  3536,  1086,  2417,  2756,  1087,
   -1670,  2515,  2417,  1088,  2766,  1089,  2417,  1090,  2765,  3566,
    3567,  1091, -1400,  2203,  1092,  1333,  2458,  1093,  2765,  1828,
    2417,  2417,  3570,   592,   118,  2458,  2787,  3573,  3374,  1094,
    2417,  2795,  1595,  3052, -1400, -1400,   566,  2797,  2798,  1229,
    1134,   582,  1095, -1400,  1829,  3442,  3450,  3457,  1167,  2765,
    3589,  3471,  1167,  3591,  3766,  1096,  2417,  2818,   567,  1097,
    2894,  3486,  3487,  1098,  4070, -1400,   852, -1400,  2844,  1838,
    1027,  3375, -1400,   537,  1967,  -604,  3376,  1099,  1838,  2204,
     478, -1400,  3600,  2337,  1103,  1334, -1400,  1104,  1967,  4178,
     568,  1107,  1155,  1156,  1157,  1158,  1159,  1160,  1161,  1162,
   -1400,  1235,  1830,  1108,  2767,  2768,  1112, -1400,  3615,  3616,
    3619,  3616,  1116,  1937, -1400,  1117,  2796,  3620,  3616,  1118,
   -1400,  3675,  3271,  3377, -1400,   582,  2417,  3230,  1134,  2794,
    3678,  3616,  1134,  3685,  3686, -1400,  1938,  2332,  3779,  3780,
   -1400,  1236, -1400,  1856,  1119,   569,  1120,  1335,  2201, -1400,
    3808,  3809,  1856,  1169,  2205,  1157,  1158,  1159,  1160,  1161,
    1162,  3813,  3616,  1252,  4235,  1263, -1670,  3249,  3814,  3616,
    3816,  3616,  3817,  3616,  1265,  1871,  1872,  3823,  3824,  1488,
    1489,  1490, -1400,  1968,  1282,  1130,  1131,   853,  2848,  1656,
    1831,  1501,  1968,  3825,  3824,  1283,   114,  1284,  1656,  1287,
    2873,  3996,  3809,  1290,  3634,  3997,  3809,  2202,  -730,  -730,
    1874,  2516, -1400,  4002,  3271,  4045,  4046,  2627,  -730,  4086,
    4087,  1838,  1554,  1877,  1298,  1558,  1299,   852,  3422,  4104,
    3176,  1303,  1878,  2203, -1400,  1838, -1400,  4181,  4182,  4223,
    4224,  2732,  3217, -1400,  -747,  1576,  1577,  2164, -1400,  1581,
    1233,   592,   592,   592,  1315,  1336,  1880,   854,  1324,   582,
    1584,  1585,  3359,  3151,  -604, -1400,  2349, -1400,  1596,  1597,
    1384,  1326, -1400,  1881,  2347,  3978,  3978,   592,  1325,  -604,
    1595,  1512,  1513,  1514,  1515,  1516,  3694,  2348,   115,  1337,
   -1400, -1400,  3694,  1070, -1400, -1400,   592,   592,   592,  2204,
    1341,  1886,  3635,  3636,  3286,  3287,   116,  3637,  3638,  3023,
    2523,  3255,  3256,  1594,  1344,  3025,  3447,  3027,  3484,  3485,
   -1400,  1348,  1349,   592,  1362,  3870,  2799,  1365,  2800,  2801,
    1366,  1368,  1373,  1378,  2981,  1968,  1384,  1390,  1394,   982,
     983,  1656, -1400,  1392,   897,  3378,  1397,  2517,   853,  1968,
    1398,  3379,  2206,   897,  1402,  1656,  2327,   764,   765,  1405,
    1406,   768,   769,  1409,  1410,   771,  1411,   773,  1889,   481,
    2802,   117,  1452,  1453,  2205,  1890,  1517,  1518,  1519,  1520,
    1454,  1457, -1400,  -604,  1459,  1480,  1460,  3380,   478,  1478,
    1891,  2803,  1165,   778,  2417,  1484,  1491,  2417,  2417,   118,
    2765,  1137,  1138,  3022,  1503,  1505,  1969,  1111,  1550,  2518,
    1540,  1516,  1551,   592,  1552,  2328,  2417,  1592,   854,  1602,
    1969,  1937,  1627,  1611,  1657,  2804,  1661,  1633,  1653,  1660,
    1664,  2765,  1667,  1657,  1668,  1139, -1400,  2519,  1671,  2765,
    1669,  2329,  2765,  1892,  1938,  1140,  -604, -1400, -1400,   119,
    1674,  1670,  1672,  1673,  2856,  3381,  1676,  1677,  1697,  1708,
    1700,  1893,  1716,  3105,  1717, -1400,   582, -1400,  1718,  1719,
    1723,  3161,  1726,  1727,  1728,   779,  1521,   467,  1522,  1523,
    1524,  3171,  1141,  2765,  1737,  1742,  1751,  1525,  1755,  1783,
   -1400, -1400,  1784,  1142, -1400, -1400,   897,  1785,  3180,   641,
    1786,  1594,  1788,  3167,   780,  1520,  1797,  2330,  3088,  1799,
     897,  3191,  1801,  3870,  1897,  1814,  3091,   781,   582,  1146,
    1143,  2291,  1899,  1823,  1924,  1441,  1132,  2291,  1941,  1133,
    3204,  1942,  3644,   855,   856,   857,   858,   859,   860,  1943,
     782,  3106,   783,  1961,  1944,  3915,  1945,  1970,  1946,  1947,
     861,  1948,  1981,   784,  3382,  1949,  1289,  1950,  1147,  3291,
    1951,  1970,  1952,  1526,  1953,  1954,  1955,  1956,  1051,  1102,
    1106,   120,  2206,   785,  3542,  2726,  1657,  3783,  1144,  1957,
    1958,   662,  2331,  1959,  1871,  1872,  1960,  -604,  1982,  1905,
    1657,  1963,  1987,  3193,  1997,  1998,  2000,  3183,   786,  3247,
    3696,  1999,  1521,  2006,   787,  3656,  1524,  2668,  2012,  2014,
    3784,  4091,  2015,  1525,  2016,  1527,  1528,  -730,  -730,  1874,
    2454,  2031,  1147,  2032,  2038,  2039,  2040,  -730,  2042,  2048,
    2056,  2625,  1877,   666,  1185,  2088,  2011,  2060,  2052,   121,
     667,  1878,  2078,   788,  2079,  1906,  2292,  2089,  2084,  2647,
    3281,  2100,  2292,   592,  2101, -1670,  2805,  2102,  2115,  2122,
   -1115,  1907,   592,  2293,  1908,  1880,   671,  2128,  2596,  2293,
    1162,  2138,  2160,  2167,  2294, -1232,  2185,   481,   592,  1384,
    2294,  2193,  1881,  3732,  2199,  2210,  2262,  2213,  2242,  1526,
    2243,  2258,  2270,  2277,   855,   856,   122,   858,  -911,   860,
    1910,  2667,  2272,  4091,  2055,  1595,  2300,  2299,  2059,  2303,
    1886,   861,  2304,   760,  1188,  2306,  2310,  2417,  2312,  1148,
    2313,  3826,  3785,  2314,  2347,  2315,  2317,  2417,  2316,  2765,
    2359,  2083,   678,  1594,  2364,  2365,  2368,  2369,  1595,   760,
    1150,  1149,  1528,  2372,  2765,  4216,   582,  1529,  2417,  2371,
    2378,  2295,  2381,  3793,  -604,  2881,  1594,  2295,  2387,  2523,
    1134,  1530,  1531,  1594,  2388,  2380,  2291,   789,  4227,  1594,
    4096,  4097,  2392,  4099,  1147,  4216,  2398,  1889,  2420,  3516,
    2332,  4227,  2424,  2426,  1890,  2393,  2399,   791,  2405,  2457,
    2497,   689,  2479,  2501,  2505,   792,  2510,  3786,  2528,  1891,
    2529,  2530,  3576,   793,  1150,  2540,   693,   694,  1189,  2541,
    2146,  2553,  2481,  2572,  2583,  3787,  2593,  2592,  2607,  4137,
    2844,  4138,  4139,  2574,   982,   983,  2615,  2608,   794,  3505,
    2575,  2576,  1190,  2605,  2606,  2609,  1191,  2618,  3788,  2621,
    2628,   795,   796,  2633,  2620,  3435,  3435,  3435,  2649,  2652,
    1774,  2650,  1892,  2250,  2653,  2629,  2654,  2249,   760,  2296,
    2671,  2672,   592,   760,  1703,  2296,  2174,  2637,  2703,  1192,
    1893,  2071,  2694,  1529,  2673,  2698,  4175,  2704,  2705,  2721,
    2728,  2729,  2772,  1152,  1153,   797,  1193,  2175,  1531,  2774,
    2833,  2292,  3954,   760,  3793,  2827,  1151,  3956,   641,  2853,
    2176,  2837,  2854,  2839,  2858,  2859,  2860,  3403,  2293,   760,
    2177,  2861,  4208,  3494,   798,  1898,  2726,  1595,  2886,  2294,
    1816,  2297,  2904,  1897,  2895,  2007,  2899,  2297,  2905,  2906,
    3427,  1899,   592,  2907,  2909,  2910,   799,  2953,   800,  2955,
    2957,  2962,  2965,  2966,  2971,  2976,  1194,  1152,  1153,  2978,
     760,   760,   760,   760,  2983,  2986,  1150,  2178,  2179,  2987,
    1154,  1244,   760,  2990,  3006,  3009,  3020,  3021,  1195,  2993,
    3026,  3000,  3656,  3542,  3435,  3003,  3034,  3053,  3061,  3551,
     662,  3057,  3058,   713,  3072,  2180,  3073,  3543,  2523,  3074,
    3544,  3556,  3162,  3085,  3094,  3165,  2295,  3169,  1905,   897,
     719,  3103,  3168,  3102,   816,   721,  3173,  3175,   722,  3186,
    3187,  3192,  -440,  3104,  2226,  3789,  3206,  3226,  3520,   592,
    1157,  1158,  1159,  1160,  1161,  1162,  3176,  3195,  3234,  3252,
    3251,  3179,   666,  3223,  3261,  3201,  3263,  3202,  3203,   667,
    3233,  3266,  3284,  3273,  3592,  3292,  2181,  3291,  3300,  3301,
    3309,  3596,  3310,  3322,  1906,  3330,  3333,  3334,   496,  3347,
    3545,  3546,   477,  3353,  3397,   671,  1196,  2418,  3400,  3191,
    1907,  3402,  3410,  1908,  3404,  1197,  3423,  3414,  3424,  3431,
    3444,  3425,  1155,  1156,  1157,  1158,  1159,  1160,  1161,  1162,
    1198,   592,  3448,  1267,  3428,  3429,  2182,  3440,  3441,  1152,
    1153,  3458,  1268,  3442,  2296,  3443,  3451,  3452,  1199,  1910,
    3454,  1269,  3459,  3472,  3575,   497,  3460,  3473,  3482,  3489,
    3490,  3487,  3954,  3492,  1270,  1271,  1272,  3499,  1031,  3501,
    3024,   678,  3502,  3506,  3507,  3512,  3648,  4133,  3513, -1315,
    1273,   498, -1320,  3510,   478,  3524,  3537,  1200,  1201,  3554,
     592,  3538,  3601,  3540,  3541,  3557,  3565,  3388,  1063,  3571,
    3569,  1147,  2482,  3579,  3580,  3584,  2297,  3581,  3668,  3583,
    3391,  3590,  1202,   499,  1080,  3602,  3623,  -778,  3626,  3618,
    3603,  3435,  3435,  3625,  3435,  3435,  3629,   760,  3642,  3643,
     689,   471,  3684,  3649,   472,  3793,  3630,  2523,  3631,  3659,
    3660,  3690,  3697,  4133,  3664,   693,   694,  3666,  3450,  3699,
    3698,  3741,  3768,  3733,  3755,  3765,  3774,  3777,  1124,   500,
    3805,  3807,  3810,   479,  4205,  3819,  3828,  3846,  -307,  3855,
    3877,  3879,  3848,  3849,  1155,  1156,  1157,  1158,  1159,  1160,
    1161,  1162,   760,   760,  3865,  3880,  3888,  3885,  3737,   582,
    3858,   760,   760,   760,   760,   760,   760,   760,  4205,  3864,
    3435,  3890,   760,  3892,  2822,   760,   760,  3919,   760,  3922,
     760,  -325,  3948,  4233,   760,  3949,  3950,   760,   760,   760,
     760,  3967,   760,   760,  3994,  3962,  3965,   582,  3982,  3998,
     760,   760,  3999,   760,   760,   760,   760,   760,  4003,   760,
     592,   760,   760,   760,   760,   760,   760,   760,   760,   760,
     760,   760,  4013,  4000,   760,   760,  4006,   760,  4001,   760,
    4007,  4014,  4026,   760,  3738,   760,   760,  4024,  4025,  4035,
    3820,  4029,  4018,  4049,  4050,  4051,   -63,   760,   760,  4060,
    4052,   501,  4061,  1150,  1274,   760,  3832,  4062,  4067,  4069,
    4071,  3839,   760,   760,   760,  4072,   760,  4075,  4081, -2172,
    4084,  1275,  3775,   760,   760,   760,  4098,   760,   760,   760,
     760,   760,  4100,   760,   760,   760,   760,   760,   760,   760,
     760,  4095,   713,  4101,   760,   760,  3543,  4111,  4103,  3544,
    4124,  4125,  4127,  4155,  4141,  4130, -1473,  4147,  4142,   719,
    1825,  4143,  4148,  4161,   721,  4158,  4160,   722,  4152,   502,
    4163,  4169,  4167,   480,  4172,  1826,  1147,  4173,  1595,  4176,
    4180,  4184,  4186,  4194,  3648,  3981,  4217,  4221,  4193,  4230,
    1147,  2600,  2449,   481,  3841,  3413,  3412,  3606,  2736,  1005,
    3856,  3957,  4082,  3736,  1396,  4083,  3604,  4228,  3608,  3668,
    4188,  3668,  1417,  3897,   551,  3951,   907,  3008,  2234,  3545,
    3546,  3710,  4198,  3711,  4108,  3713,   503,  3714,  3716,  3717,
     482,   504,  -529,  3718,  3719,   483,  3720,  3721,  4011,  3923,
    4109,  3724,  4080,  1276,  4023,  3860,  1152,  1153,  3725,   505,
    3726,  1867,  4022,  2149,  2409,  1456,  3744,  1935,  1911,  1512,
    1513,  1514,  1515,  1516,  3098,  2989,  3265,  1482,  1483,  3875,
     484,   760,  1706,  2923,   506,  2632,  1493,  1494,   485,   760,
    1497,  1498,  1499,  3966,  3776,  3495,  2598,  1504,   592,   507,
    1506,  1507,  4157,  1508,  3987,  1509,  4094,  1277,  4132,  3887,
    1966,   628,  1542,  1543,  1544,  1545,  3430,  1547,  3184,  2407,
    3346,  2879,  2414,  2824,  1278,  1555,  1556,  3335,  1559,  1560,
    3360,  3361,  3398,  3692,  1564,  3550,  1565,  1566,  1567,  3582,
    1827,  1570,  1571,  1572,  1573,  1574,  1575,  3964,  3574,  1578,
    1579,  3298,  1582,   492,  1583,  4093,  3903,   493,  1586,  1996,
    1590,  1591,  3905,  3867,  1517,  1518,  1519,  1520,  1150,  3906,
    3862,  1868,  1598,  1599,  3866,  2491,  1595,  3695,  1869,  1870,
    1607,  3754,  1150,  2411,  3337,  2288,  3971,  1612,  1613,  1614,
    1871,  1872,  1156,  1157,  1158,  1159,  1160,  1161,  1162,   592,
    2812,  3553,  1800,  3336,  2634,  2218,  1933,  2980,  2616,  3262,
    3731,  1828,  1964,  2571,  2844,  2844,  2655,   777,   778,  3250,
    1650,  1873,   929,  2248,  1294,  1874,  1875,  1549,  2964,  2570,
    2716,  1876,  2526,   982,   983,  3306,  1829,  3812,  1877,  3672,
    4059,  4058,  3411,  3669,  2590,  1502,  3341,  1878,  3979,  4179,
    2662,  3658,  2495,  1694,  2614,  3497,  3276,  1879,   592,  3277,
    2640,  3316,  4032,   918,  1521,  2279,  1522,  1523,  1524,  1721,
    1023,  1880,  2005,   903,  2280,  1525,  3345,  1725,  1789,   760,
    4042,  4043,  4113,  2161,  4128,  1384,  3264,  4053,  1881,  4121,
    4156,  4102,  4229,  4232,  1830,  1882,  1883,  3578,  3280,  2259,
     779,  1767,  1884,  3042,  1740,  3302,  3511,  3661,  1732,  1687,
    1885,  1152,  1153,  3767,  -849,  2198,  1886,  1281,   848,  1986,
    2968,   850,  3773,  1286,  4222,  1152,  1153,   622,   623,   780,
       0,  1009,  1010,  1011,     0,     0,     0,     0,     0,     0,
       0,     0,   781,     0,  1887,     0,  1739,     0,     0,     0,
       0,  1526,     0,     0,  1754,     0,     0,  4165,     0,     0,
       0,     0,  4170,     0,     0,   782,     0,   783,     0,     0,
       0,     0,     0,     0,     0,   760,   760,   760,   784,     0,
       0,  1888,  1831,  1889,     0,     0,     0,     0,     0,   760,
    1890,     0,  1188,     0,     0,     0,     0,     0,   785,  4206,
       0,     0,     0,  1527,  1528,  1891,     0,     0,  1595,     0,
       0,     0,     0,     0,     0,   760,     0,     0,     0,     0,
       0,   760,     0,   786,   760,     0,   760,   592,     0,   787,
       0,  1595,   760,  4206,   760,   760,     0,     0,  1595,     0,
       0,     0,     0,     0,  1595,     0,  1155,  1156,  1157,  1158,
    1159,  1160,  1161,  1162,     0,     0,     0,     0,  1892,     0,
    1155,  1156,  1157,  1158,  1159,  1160,  1161,  1162,   788,     0,
       0,     0,     0,     0,     0,     0,  1893,     0,     0,     0,
    1894,     0,     0,     0,     0,     0,  1189,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   760,     0,     0,     0,  1871,  1872,     0,     0,     0,
    1190,   845,   778,     0,  1191,  4017,     0,  1895,     0,     0,
       0,     0,  1896,     0,     0,     0,     0,     0,     0,  1897,
    4017,     0,     0,     0,     0,  1529,  1898,  1899,  -730,  -730,
    1874,     0,     0,  4027,  2017,     0,     0,  1192,  -730,  1530,
    1531,     0,     0,  1877,     0,     0,     0,     0,     0,     0,
       0,     0,  1878,     0,  1193,     0,     0,  1900,     0,     0,
       1,     2,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1901,  1902,  1903,  1904,     0,  1880,     3,     0,     0,
       0,     4,   789,     0,   779,     0,   790,     0,     0,     0,
    1384,     0,     0,  1881,  1905,     5,     6,     0,     0,     0,
       0,     0,   791,     7,     0,     0,     0,     8,     9,     0,
     792,     0,     0,   780,  1194,     0,     0,     0,   793,     0,
       0,  1886,    10,     0,     0,     0,   781,     0,     0,     0,
    2092,  2094,  2096,     0,     0,     0,  1195,     0,     0,     0,
       0,     0,    11,   794,  4017,     0,     0,     0,     0,   782,
    1906,   783,     0,     0,  4123,     0,   795,   796,     0,     0,
       0,     0,   784,    12,     0,     0,  1907,     0,     0,  1908,
    2130,    13,    14,    15,     0,     0,     0,     0,     0,  2135,
       0,  2136,   785,    16,    17,     0,     0,     0,  1889,     0,
       0,     0,  1909,     0,     0,  1890,    18,     0,     0,     0,
     797,     0,     0,     0,  4154,  1910,     0,   786,     0,    19,
    1891,     0,     0,   787,     0,     0,     0,     0,     0,     0,
     760,     0,  4017,     0,  4017,    20,     0,     0,     0,   798,
       0,  4174,     0,     0,  1196,     0,     0,     0,     0,     0,
      21,     0,  4017,  1197,     0,    22,     0,     0,    23,     0,
       0,   799,   788,   800,     0,     0,  2214,     0,  1198,     0,
       0,     0,     0,  1892,  -849,     0,     0,     0,     0,     0,
       0,    24,     0,    25,  4017,  4017,  1199,     0,     0,  4220,
       0,  1893,     0,     0,     0,     0,     0,   760,     0,    26,
       0,   760,     0,     0,     0,     0,   760,   760,     0,     0,
       0,     0,     0,     0,     0,   760,    27,     0,   760,     0,
      28,     0,     0,     0,     0,  1200,  1201,     0,   760,     0,
     760,   760,     0,   760,   760,   760,   760,   760,     0,     0,
     760,     0,     0,     0,  1897,     0,     0,     0,     0,   760,
    1202,     0,  1899,     0,     0,     0,     0,   760,     0,   760,
       0,   760,   760,   760,   760,     0,     0,     0,   760,   760,
     760,     0,     0,     0,     0,   760,   760,   760,     0,   760,
       0,   760,     0,   760,     0,   760,   789,   760,     0,     0,
     846,     0,   760,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   791,     0,     0,    29,
     760,     0,     0,     0,   792,     0,     0,   760,     0,  1905,
     760,     0,   793,     0,     0,     0,   760,     0,    30,   760,
       0,     0,     0,   760,     0,     0,     0,     0,    31,     0,
       0,     0,     0,     0,     0,     0,     0,   794,     0,    32,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     795,   796,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    33,     0,     0,    34,  1906,    35,     0,     0,    36,
       0,     0,    37,    38,     0,     0,     0,     0,   760,     0,
      39,  1907,    40,     0,  1908,  2425,     0,     0,     0,    41,
       0,     0,     0,     0,   797,    42,     0,     0,     0,     0,
       0,     0,     0,    43,     0,     0,     0,     0,    44,     0,
      45,     0,     0,    46,     0,     0,     0,     0,     0,     0,
    1910,     0,     0,   798,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    47,     0,     0,
       0,    48,     0,     0,     0,   799,     0,   800,     0,     0,
       0,     0,  2504,     0,     0,     0,  2506,     0,     0,     1,
       2,  2508,  2509,  1871,  1872,     0,     0,     0,     0,     0,
    2524,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       4,     0,     0,  2531,    49,  2532,     0,     0,  2534,  2535,
    2536,  2537,  2538,     0,     5,     6,    50,     0,  1874,     0,
      51,     0,     7,    52,  2542,     0,     8,     9,    53,     0,
       0,  1877,  2543,     0,  2544,     0,  2545,  2546,  2547,     0,
    1878,    10,     0,  2550,  2551,  2552,     0,     0,     0,     0,
    2554,  2555,  2556,  1418,  2557,    54,  2559,     0,  2561,     0,
    2563,    11,  2564,     0,  1880,     0,     0,  2565,     0,     0,
      55,     0,     0,     0,     0,     0,     0,     0,  1384,     0,
       0,  1881,    12,     0,     0,  2578,     0,     0,     0,     0,
      13,    14,    15,     0,     0,     0,     0,     0,     0,     0,
       0,  2588,    16,    17,  2591,     0,     0,     0,     0,  1886,
       0,  1419,  1420,  1421,  1422,  1423,  1424,     0,  1425,  1426,
    1427,  1428,  1429,  1430,  1431,     0,  1432,  1433,    19,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    20,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    21,
       0,     0,     0,     0,    22,     0,     0,    23,     0,     0,
       0,     0,     0,     0,     0,     0,  1889,     0,     0,     0,
       0,     0,     0,  1890,     0,     0,     0,     0,     0,     0,
      24,     0,    25,     0,     0,     0,     0,     0,  1891,     0,
       0,   760,     0,     0,     0,   760,     0,     0,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    27,     0,   760,   760,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   760,     0,  1434,
    1435,  1892,     0,     0,     0,     0,   760,     0,   760,     0,
     760,     0,     0,     0,     0,     0,     0,     0,     0,  1893,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     760,     0,     0,     0,     0,   760,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   760,
       0,     0,     0,     0,     0,     0,     0,     0,    29,     0,
       0,     0,  1897,     0,     0,     0,     0,     0,     0,     0,
    1899,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    32,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   760,     0,     0,     0,   760,     0,     0,     0,
      33,     0,     0,    34,     0,    35,     0,     0,    36,     0,
       0,    37,    38,     0,     0,     0,     0,  1905,     0,    39,
       0,    40,     0,     0,     0,     0,     0,     0,    41,     0,
       0,     0,     0,     0,    42,     0,     0,     0,     0,     0,
     760,     0,    43,     0,     0,     0,     0,    44,     0,    45,
       0,     0,    46,     0,     0,     0,     0,     0,  3107,  3108,
       0,     0,     0,     0,  3109,     0,  3110,     0,  3111,  3112,
       0,     0,     0,  1906,     0,     0,    47,     0,     0,     0,
      48,     0,     0,     0,     0,  3113,  2891,     0,     0,  1907,
    2893,     0,  1908,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2912,  2913,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    49,     0,     0,     0,     0,  1910,     0,
       0,     0,  2933,  3114,     0,    50,  3115,     0,     0,    51,
       0,  2943,    52,  2945,  3116,  2947,     0,    53,   760,   760,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3117,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    54,     0,     0,     0,  3118,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
       0,     0,     0,     0,  2977,     0,     0,     0,     0,     0,
       0,  3119,     0,  3120,     0,     0,     0,     0,     0,     0,
       0,     0,   760,     0,     0,  3121,  3122,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   760,   760,     0,   760,
       0,     0,     0,     0,     0,     0,     0,     0,   760,     0,
       0,     0,     0,   760,     0,  3123,   760,  3032,   760,   760,
       0,  3036,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   760,
       0,     0,     0,  3124,     0,     0,     0,     0,     0,     0,
       0,     0,  3125,  3126,   760,  3127,   867,     0,     0,     0,
       0,     0,     0,     0,     0,  3067,   824,   868,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   760,     0,     0,
       0,     0,     0,     0,     0,  3128,  3129,  3130,     0,     0,
       0,   869,   870,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   871,     0,  3131,  3132,  3133,   760,     0,     0,
       0,  3134,     0,     0,  3135,     0,     0,     0,     0,     0,
       0,   760,     0,     0,   872,     0,   873,     0,   874,     0,
    3136,  3137,     0,     0,     0,     0,     0,   875,     0,     0,
       0,   760,     0,     0,     0,     0,     0,     0,     0,     0,
     760,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3138,  3139,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3163,  3164,     0,     0,     0,     0,     0,
       0,     0,     0, -1670,   876,     0,     0,  3140,     0,   877,
       0,     0,   878,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   879,     0,   880,
       0,     0,     0,     0,     0,   881,     0,   882,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3209,  3141,     0,
       0,     0,  3142,     0,     0,     0,     0,     0,     0,     0,
     883,   884,     0,     0,  3143,     0,     0,  2810,     0,     0,
       0,  3228,  3229,     0,  1869,     0,     0,     0,     0,     0,
       0,     0,   885,  3236,     0,     0,  1871,  1872,  3238,     0,
       0,  3239,     0,  3240,  3241,     0,     0,     0,     0,     0,
       0,     0,     0,   886,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3144,  1873,     0,  3145,
       0,  1874,  3146,  3147,  3148,  3149,     0,     0,     0,  3258,
     887,     0,     0,     0,  1877,     0,     0,     0,     0,     0,
       0,     0,     0,  1878,     0,     0,     0,     0,     0,     0,
       0,     0,  3258,  1879,     0,     0,     0,     0,     0,     0,
       0,     0,   760,     0,  3150,  3151,     0,  1880,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1384,     0,     0,  1881,     0,     0,     0,  3152,     0,
       0,  1882,     0,     0,   888,     0,  3303,     0,  2811,     0,
       0,   760,   760,     0,     0,     0,  1885,     0,     0,     0,
     760,     0,  1886,     0,     0,     0,  3258,   889,     0,     0,
       0,     0,     0,     0,     0,  3327,     0,     0,   890,   891,
       0,     0,   892,   893,     0,     0,     0,     0,     0,     0,
    1887,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   894,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1889,
       0,     0,     0,     0,     0,     0,  1890,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   895,     0,     0,     0,
       0,  1891,     0,     0,     0,     0,     0,     0,     0,   896,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -2199,     0,     0,     0,   897,     0,
       0,     0,     0,     0,   760,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1892,     0,   898,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1893,     0,     0,   760,  1894,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   760,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   760,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -2199,     0,     0,     0,     0,  1896,   899,
       0,     0,     0,     0,     0,  1897,     0,  3258,     0,     0,
       0,     0,     0,  1899,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3522,  3523,     0,     0,
       0,     0,     0,     0,     0,  3067,     0,     0,  1902,     0,
       0,     0,     0,  3728,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1905,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   760,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   760,     0,     0,     0,     0,     0,     0,     0,
       0,   760,     0,   760,     0,     0,  1906,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1907,     0,     0,  1908,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   760,     0,     0,
       0,     0,     0,  3728,  3728,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3624,
       0,  1910,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3258,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3067,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3032,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   760,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   760,     0,   760,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   760,     0,
    3728,  3728,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3961,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3799,     0,     0,
       0,     0,     0,   760,     0,  3728,  3804,     0,  3806,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3728,   760,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3728,     0,     0,     0,     0,     0,     0,
       0,   760,  3827,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   760,  3728,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3728,  3728,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   760,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3067,
       0,     0,     0,     0,  3728,     0,     0,     0,     0,     0,
       0,   760,     0,     0,  3728,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3917,     0,  3918,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3926,     0,   760,     0,     0,     0,     0,
       0,     0,  3728,     0,  3728,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3728,     0,     0,     0,   760,     0,
       0,   760,     0,     0,     0,     0,     0,     0,     0,     0,
    3728,     0,  3728,     0,  3728,     0,     0,     0,     0,     0,
       0,  3728,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3728,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3728,  3728,
       0,     0,     0,     0,   760,     0,     0,     0,  4015,     0,
       0,     0,     0,     0,  3728,  3728,     0,     0,     0,  3728,
       0,     0,     0,     0,     0,     0,  4020,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3258,     0,     0,     0,
       0,   760,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4065,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4115,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4140,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   135,     0,   637,   137,   138,   139,   140,
       0,     0,     0,     0,     0,   141,  4159,     0,   638,     0,
     143,   144,   145,   146,   147,   639,   149,     0,   150,     0,
       0,   640,   151,   641,   642,   643,   152,   644,     0,   153,
     154,   155,  1587,   156,     0,   157,   158,     0,     0,   159,
     645,   646,   160,   161,     0,   162,   647,   648,   164,     0,
     165,   166,   167,   168,   649,   170,     0,   650,   172,  4207,
     173,   174,   175,   176,   177,   178,   179,   180,   181,     0,
     182,   183,     0,   184,   185,   186,   651,   188,     0,   189,
     652,   653,   190,     0,     0,   191,   654,   655,     0,   192,
     656,   657,     0,   193,   194,   195,   658,   659,   660,     0,
       0,     0,     0,   661,   198,   662,  3258,     0,   663,   199,
       0,   200,     0,     0,     0,   201,     0,   202,   203,   204,
     205,     0,     0,     0,   206,     0,     0,   207,   208,   209,
       0,     0,     0,   210,     0,   211,   212,     0,   213,   214,
     215,     0,     0,   216,   217,     0,   218,   219,   220,   221,
     222,   664,     0,   223,   224,   225,   665,   666,   226,   227,
       0,   228,   229,   230,   667,     0,   231,     0,     0,     0,
     232,     0,   233,     0,   234,     0,   235,   668,   237,   669,
     239,     0,   240,     0,   670,     0,   241,   242,     0,   243,
     671,     0,   244,   245,     0,     0,     0,   672,   247,   248,
     249,   673,     0,   250,   251,   252,     0,     0,   253,     0,
       0,     0,   674,   254,   255,   675,     0,     0,   256,     0,
     257,   258,     0,   259,   260,     0,     0,     0,   261,     0,
       0,   262,   263,     0,  1588,   264,     0,   676,   265,   266,
       0,     0,     0,     0,     0,   677,   268,     0,   269,     0,
     270,     0,   271,   272,     0,     0,   678,     0,     0,     0,
       0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,     0,   286,   287,   288,   679,   289,
     290,   291,   292,   680,   293,   294,     0,     0,     0,     0,
     295,   296,   297,   298,   681,   300,     0,     0,   682,   302,
     683,   303,     0,   304,   684,   685,   686,   687,   688,   309,
     310,   311,   312,   313,     0,   689,   314,   315,     0,     0,
     316,   317,   318,   319,   690,   691,   692,   320,   321,     0,
     693,   694,     0,   322,   323,   695,     0,   325,   326,   327,
       0,   328,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,   330,   331,   696,   332,   333,   334,   335,   336,
     697,   338,   339,   340,   698,   699,   343,   700,     0,   344,
     345,   346,     0,   347,     0,   348,   349,   350,   351,   352,
       0,   701,   354,   355,     0,     0,   356,     0,     0,     0,
     357,   358,   359,   360,   361,     0,     0,   362,   363,   364,
     365,   366,     0,   367,   368,     0,   369,   370,   371,   702,
     703,   372,     0,   373,     0,   374,   375,     0,   376,   377,
       0,     0,   704,   378,   379,   380,   381,   382,   705,   384,
     385,   386,   387,     0,   706,   389,     0,     0,     0,   390,
     391,   392,   393,     0,     0,     0,   394,     0,     0,     0,
     395,     0,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,     0,     0,     0,     0,     0,     0,   405,   406,
       0,   407,     0,     0,   408,     0,     0,   409,   410,   411,
     707,   708,   412,   413,     0,   414,   415,   709,   417,   418,
     419,   710,   711,   420,   421,   422,   423,   712,   424,   425,
       0,     0,   426,   427,   428,   429,     0,   713,   430,   431,
       0,   714,   715,   716,   717,     0,     0,     0,     0,  1589,
     436,   437,     0,   718,   719,   720,   439,   440,   441,   721,
     442,   443,   722,   444,   445,     0,   446,   447,     0,     0,
     448,     0,     0,   449,     0,   450,     0,   723,   452,     0,
       0,   724,   725,   726,   727,   453,     0,     0,   454,   728,
       0,   729,   455,   456,   457,   730,     0,     0,     0,     0,
       0,     0,   459,   460,     0,   461,   462,   463,     0,     0,
     731,     0,     0,     0,   732,   733,     0,     0,     0,     0,
     734,   735,     0,     0,   736,   737,     0,     0,   738,   739,
     135,     0,   637,   137,   138,   139,   140,  3028,     0,     0,
       0,     0,   141,     0,     0,   638,     0,   143,   144,   145,
     146,   147,   639,   149,     0,   150,     0,     0,  3029,   151,
     641,   642,   643,   152,   644,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,   645,   646,   160,
     161,     0,   162,   647,   648,   164,     0,   165,   166,   167,
     168,   649,   170,     0,   650,   172,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,     0,
     184,   185,   186,   651,   188,     0,   189,   652,   653,   190,
       0,     0,   191,   654,   655,     0,   192,   656,   657,     0,
     193,   194,   195,   658,   659,   660,     0,     0,     0,     0,
     661,   198,   662,     0,     0,  3030,   199,     0,   200,     0,
       0,     0,   201,     0,   202,   203,   204,   205,     0,     0,
       0,   206,     0,     0,   207,   208,   209,     0,     0,     0,
     210,     0,   211,   212,     0,   213,   214,   215,     0,     0,
     216,   217,     0,   218,   219,   220,   221,   222,   664,     0,
     223,   224,   225,   665,   666,   226,   227,     0,   228,   229,
     230,   667,     0,   231,     0,     0,     0,   232,     0,   233,
       0,   234,     0,   235,   668,   237,   669,   239,     0,   240,
       0,   670,     0,   241,   242,     0,   243,   671,     0,   244,
     245,     0,     0,     0,   672,   247,   248,   249,   673,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   674,
     254,   255,   675,     0,     0,   256,     0,   257,   258,     0,
     259,   260,     0,     0,     0,   261,     0,     0,   262,   263,
       0,     0,   264,     0,   676,   265,   266,     0,     0,     0,
       0,     0,   677,   268,     0,   269,     0,   270,     0,   271,
     272,     0,     0,   678,     0,     0,     0,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,   288,   679,   289,   290,   291,   292,
     680,   293,   294,     0,     0,     0,     0,   295,   296,   297,
     298,   681,   300,     0,     0,   682,   302,   683,   303,     0,
     304,   684,   685,   686,   687,   688,   309,   310,   311,   312,
     313,     0,   689,   314,   315,     0,     0,   316,   317,   318,
     319,   690,   691,   692,   320,   321,     0,   693,   694,     0,
     322,   323,   695,  3031,   325,   326,   327,     0,   328,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   329,   330,
     331,   696,   332,   333,   334,   335,   336,   697,   338,   339,
     340,   698,   699,   343,   700,     0,   344,   345,   346,     0,
     347,     0,   348,   349,   350,   351,   352,     0,   701,   354,
     355,     0,     0,   356,     0,     0,     0,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,   365,   366,     0,
     367,   368,     0,   369,   370,   371,   702,   703,   372,     0,
     373,     0,   374,   375,     0,   376,   377,     0,     0,   704,
     378,   379,   380,   381,   382,   705,   384,   385,   386,   387,
       0,   706,   389,     0,     0,     0,   390,   391,   392,   393,
       0,     0,     0,   394,     0,     0,     0,   395,     0,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,     0,
       0,     0,     0,     0,     0,   405,   406,     0,   407,     0,
       0,   408,     0,     0,   409,   410,   411,   707,   708,   412,
     413,     0,   414,   415,   709,   417,   418,   419,   710,   711,
     420,   421,   422,   423,   712,   424,   425,     0,     0,   426,
     427,   428,   429,     0,   713,   430,   431,     0,   714,   715,
     716,   717,     0,     0,     0,     0,     0,   436,   437,     0,
     718,   719,   720,   439,   440,   441,   721,   442,   443,   722,
     444,   445,     0,   446,   447,     0,     0,   448,     0,     0,
     449,     0,   450,     0,   723,   452,     0,     0,   724,   725,
     726,   727,   453,     0,     0,   454,   728,     0,   729,   455,
     456,   457,   730,     0,     0,     0,     0,     0,     0,   459,
     460,     0,   461,   462,   463,     0,     0,   731,     0,     0,
       0,   732,   733,     0,     0,     0,     0,   734,   735,     0,
       0,   736,   737,     0,     0,   738,   739,   135,     0,   637,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   638,     0,   143,   144,   145,   146,   147,   639,
     149,     0,   150,     0,     0,   640,   151,   641,   642,   643,
     152,   644,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,   645,   646,   160,   161,     0,   162,
     647,   648,   164,     0,   165,   166,   167,   168,   649,   170,
       0,   650,   172,     0,   173,   174,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,     0,   184,   185,   186,
     651,   188,     0,   189,   652,   653,   190,     0,     0,   191,
     654,   655,     0,   192,   656,   657,     0,   193,   194,   195,
     658,   659,   660,     0,     0,     0,     0,   661,   198,   662,
       0,     0,   663,   199,     0,   200,     0,     0,     0,   201,
       0,   202,   203,   204,   205,     0,     0,     0,   206,     0,
       0,   207,   208,   209,     0,     0,     0,   210,     0,   211,
     212,     0,   213,   214,   215,     0,     0,   216,   217,     0,
     218,   219,   220,   221,   222,   664,     0,   223,   224,   225,
     665,   666,   226,   227,     0,   228,   229,   230,   667,     0,
     231,     0,     0,     0,   232,     0,   233,     0,   234,     0,
     235,   668,   237,   669,   239,     0,   240,     0,   670,     0,
     241,   242,     0,   243,   671,     0,   244,   245,     0,     0,
       0,   672,   247,   248,   249,   673,     0,   250,   251,   252,
       0,     0,   253,     0,     0,     0,   674,   254,   255,   675,
       0,     0,   256,     0,   257,   258,     0,   259,   260,     0,
       0,     0,   261,     0,     0,   262,   263,     0,     0,   264,
       0,   676,   265,   266,     0,     0,     0,     0,     0,   677,
     268,     0,   269,     0,   270,     0,   271,   272,     0,     0,
     678,     0,     0,     0,     0,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,   286,
     287,   288,   679,   289,   290,   291,   292,   680,   293,   294,
       0,     0,     0,     0,   295,   296,   297,   298,   681,   300,
       0,     0,   682,   302,   683,   303,     0,   304,   684,   685,
     686,   687,   688,   309,   310,   311,   312,   313,     0,   689,
     314,   315,     0,     0,   316,   317,   318,   319,   690,   691,
     692,   320,   321,     0,   693,   694,     0,   322,   323,   695,
       0,   325,   326,   327,     0,   328,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,   330,   331,   696,   332,
     333,   334,   335,   336,   697,   338,   339,   340,   698,   699,
     343,   700,     0,   344,   345,   346,     0,   347,     0,   348,
     349,   350,   351,   352,     0,   701,   354,   355,     0,     0,
     356,     0,     0,     0,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   364,   365,   366,     0,   367,   368,     0,
     369,   370,   371,   702,   703,   372,     0,   373,     0,   374,
     375,     0,   376,   377,     0,     0,   704,   378,   379,   380,
     381,   382,   705,   384,   385,   386,   387,     0,   706,   389,
       0,     0,     0,   390,   391,   392,   393,     0,     0,     0,
     394,     0,     0,     0,   395,     0,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,     0,     0,     0,     0,
       0,     0,   405,   406,     0,   407,     0,     0,   408,     0,
       0,   409,   410,   411,   707,   708,   412,   413,     0,   414,
     415,   709,   417,   418,   419,   710,   711,   420,   421,   422,
     423,   712,   424,   425,     0,     0,   426,   427,   428,   429,
       0,   713,   430,   431,     0,   714,   715,   716,   717,     0,
       0,     0,     0,     0,   436,   437,     0,   718,   719,   720,
     439,   440,   441,   721,   442,   443,   722,   444,   445,     0,
     446,   447,     0,     0,   448,     0,     0,   449,     0,   450,
       0,   723,   452,     0,     0,   724,   725,   726,   727,   453,
       0,     0,   454,   728,     0,   729,   455,   456,   457,   730,
       0,     0,     0,     0,     0,     0,   459,   460,     0,   461,
     462,   463,     0,     0,   731,     0,     0,     0,   732,   733,
       0,     0,     0,     0,   734,   735,  1503,     0,   736,   737,
       0,     0,   738,   739,   135,     0,   637,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,   638,
       0,   143,   144,   145,   146,   147,   639,   149,     0,   150,
       0,     0,   640,   151,   641,   642,   643,   152,   644,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,   645,   646,   160,   161,     0,   162,   647,   648,   164,
       0,   165,   166,   167,   168,   649,   170,     0,   650,   172,
       0,   173,   174,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,     0,   184,   185,   186,   651,   188,     0,
     189,   652,   653,   190,     0,     0,   191,   654,   655,     0,
     192,   656,   657,     0,   193,   194,   195,   658,   659,   660,
       0,     0,     0,     0,   661,   198,   662,     0,     0,   663,
     199,     0,   200,     0,     0,     0,   201,     0,   202,   203,
     204,   205,     0,     0,     0,   206,     0,     0,   207,   208,
     209,     0,     0,     0,   210,     0,   211,   212,     0,   213,
     214,   215,     0,     0,   216,   217,     0,   218,   219,   220,
     221,   222,   664,     0,   223,   224,   225,   665,   666,   226,
     227,     0,   228,   229,   230,   667,     0,   231,     0,     0,
       0,   232,  2091,   233,     0,   234,     0,   235,   668,   237,
     669,   239,     0,   240,     0,   670,     0,   241,   242,     0,
     243,   671,     0,   244,   245,     0,     0,     0,   672,   247,
     248,   249,   673,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   674,   254,   255,   675,     0,     0,   256,
       0,   257,   258,     0,   259,   260,     0,     0,     0,   261,
       0,     0,   262,   263,     0,     0,   264,     0,   676,   265,
     266,     0,     0,     0,     0,     0,   677,   268,     0,   269,
       0,   270,     0,   271,   272,     0,     0,   678,     0,     0,
       0,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,   288,   679,
     289,   290,   291,   292,   680,   293,   294,     0,     0,     0,
       0,   295,   296,   297,   298,   681,   300,     0,     0,   682,
     302,   683,   303,     0,   304,   684,   685,   686,   687,   688,
     309,   310,   311,   312,   313,     0,   689,   314,   315,     0,
       0,   316,   317,   318,   319,   690,   691,   692,   320,   321,
       0,   693,   694,     0,   322,   323,   695,     0,   325,   326,
     327,     0,   328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   329,   330,   331,   696,   332,   333,   334,   335,
     336,   697,   338,   339,   340,   698,   699,   343,   700,     0,
     344,   345,   346,     0,   347,     0,   348,   349,   350,   351,
     352,     0,   701,   354,   355,     0,     0,   356,     0,     0,
       0,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,   365,   366,     0,   367,   368,     0,   369,   370,   371,
     702,   703,   372,     0,   373,     0,   374,   375,     0,   376,
     377,     0,     0,   704,   378,   379,   380,   381,   382,   705,
     384,   385,   386,   387,     0,   706,   389,     0,     0,     0,
     390,   391,   392,   393,     0,     0,     0,   394,     0,     0,
       0,   395,     0,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,     0,     0,     0,     0,     0,     0,   405,
     406,     0,   407,     0,     0,   408,     0,     0,   409,   410,
     411,   707,   708,   412,   413,     0,   414,   415,   709,   417,
     418,   419,   710,   711,   420,   421,   422,   423,   712,   424,
     425,     0,     0,   426,   427,   428,   429,     0,   713,   430,
     431,     0,   714,   715,   716,   717,     0,     0,     0,     0,
       0,   436,   437,     0,   718,   719,   720,   439,   440,   441,
     721,   442,   443,   722,   444,   445,     0,   446,   447,     0,
       0,   448,     0,     0,   449,     0,   450,     0,   723,   452,
       0,     0,   724,   725,   726,   727,   453,     0,     0,   454,
     728,     0,   729,   455,   456,   457,   730,     0,     0,     0,
       0,     0,     0,   459,   460,     0,   461,   462,   463,     0,
       0,   731,     0,     0,     0,   732,   733,     0,     0,     0,
       0,   734,   735,     0,     0,   736,   737,     0,     0,   738,
     739,   135,     0,   637,   137,   138,   139,   140,     0,     0,
       0,     0,     0,   141,     0,     0,   638,     0,   143,   144,
     145,   146,   147,   639,   149,     0,   150,     0,     0,   640,
     151,   641,   642,   643,   152,   644,     0,   153,   154,   155,
       0,   156,     0,   157,   158,     0,     0,   159,   645,   646,
     160,   161,     0,   162,   647,   648,   164,     0,   165,   166,
     167,   168,   649,   170,     0,   650,   172,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,     0,   182,   183,
       0,   184,   185,   186,   651,   188,     0,   189,   652,   653,
     190,     0,     0,   191,   654,   655,     0,   192,   656,   657,
       0,   193,   194,   195,   658,   659,   660,     0,     0,     0,
       0,   661,   198,   662,     0,     0,   663,   199,     0,   200,
       0,     0,     0,   201,     0,   202,   203,   204,   205,     0,
       0,     0,   206,     0,     0,   207,   208,   209,     0,     0,
       0,   210,     0,   211,   212,     0,   213,   214,   215,     0,
       0,   216,   217,     0,   218,   219,   220,   221,   222,   664,
       0,   223,   224,   225,   665,   666,   226,   227,     0,   228,
     229,   230,   667,     0,   231,     0,     0,     0,   232,  2093,
     233,     0,   234,     0,   235,   668,   237,   669,   239,     0,
     240,     0,   670,     0,   241,   242,     0,   243,   671,     0,
     244,   245,     0,     0,     0,   672,   247,   248,   249,   673,
       0,   250,   251,   252,     0,     0,   253,     0,     0,     0,
     674,   254,   255,   675,     0,     0,   256,     0,   257,   258,
       0,   259,   260,     0,     0,     0,   261,     0,     0,   262,
     263,     0,     0,   264,     0,   676,   265,   266,     0,     0,
       0,     0,     0,   677,   268,     0,   269,     0,   270,     0,
     271,   272,     0,     0,   678,     0,     0,     0,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,   287,   288,   679,   289,   290,   291,
     292,   680,   293,   294,     0,     0,     0,     0,   295,   296,
     297,   298,   681,   300,     0,     0,   682,   302,   683,   303,
       0,   304,   684,   685,   686,   687,   688,   309,   310,   311,
     312,   313,     0,   689,   314,   315,     0,     0,   316,   317,
     318,   319,   690,   691,   692,   320,   321,     0,   693,   694,
       0,   322,   323,   695,     0,   325,   326,   327,     0,   328,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   329,
     330,   331,   696,   332,   333,   334,   335,   336,   697,   338,
     339,   340,   698,   699,   343,   700,     0,   344,   345,   346,
       0,   347,     0,   348,   349,   350,   351,   352,     0,   701,
     354,   355,     0,     0,   356,     0,     0,     0,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,   365,   366,
       0,   367,   368,     0,   369,   370,   371,   702,   703,   372,
       0,   373,     0,   374,   375,     0,   376,   377,     0,     0,
     704,   378,   379,   380,   381,   382,   705,   384,   385,   386,
     387,     0,   706,   389,     0,     0,     0,   390,   391,   392,
     393,     0,     0,     0,   394,     0,     0,     0,   395,     0,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
       0,     0,     0,     0,     0,     0,   405,   406,     0,   407,
       0,     0,   408,     0,     0,   409,   410,   411,   707,   708,
     412,   413,     0,   414,   415,   709,   417,   418,   419,   710,
     711,   420,   421,   422,   423,   712,   424,   425,     0,     0,
     426,   427,   428,   429,     0,   713,   430,   431,     0,   714,
     715,   716,   717,     0,     0,     0,     0,     0,   436,   437,
       0,   718,   719,   720,   439,   440,   441,   721,   442,   443,
     722,   444,   445,     0,   446,   447,     0,     0,   448,     0,
       0,   449,     0,   450,     0,   723,   452,     0,     0,   724,
     725,   726,   727,   453,     0,     0,   454,   728,     0,   729,
     455,   456,   457,   730,     0,     0,     0,     0,     0,     0,
     459,   460,     0,   461,   462,   463,     0,     0,   731,     0,
       0,     0,   732,   733,     0,     0,     0,     0,   734,   735,
       0,     0,   736,   737,     0,     0,   738,   739,   135,     0,
     637,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,   638,     0,   143,   144,   145,   146,   147,
     639,   149,     0,   150,     0,     0,   640,   151,   641,   642,
     643,   152,   644,     0,   153,   154,   155,     0,   156,     0,
     157,   158,     0,     0,   159,   645,   646,   160,   161,     0,
     162,   647,   648,   164,     0,   165,   166,   167,   168,   649,
     170,     0,   650,   172,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,     0,   184,   185,
     186,   651,   188,     0,   189,   652,   653,   190,     0,     0,
     191,   654,   655,     0,   192,   656,   657,     0,   193,   194,
     195,   658,   659,   660,     0,     0,     0,     0,   661,   198,
     662,     0,     0,   663,   199,     0,   200,     0,     0,     0,
     201,     0,   202,   203,   204,   205,     0,     0,     0,   206,
       0,     0,   207,   208,   209,     0,     0,     0,   210,     0,
     211,   212,     0,   213,   214,   215,     0,     0,   216,   217,
       0,   218,   219,   220,   221,   222,   664,     0,   223,   224,
     225,   665,   666,   226,   227,     0,   228,   229,   230,   667,
       0,   231,     0,     0,     0,   232,  2095,   233,     0,   234,
       0,   235,   668,   237,   669,   239,     0,   240,     0,   670,
       0,   241,   242,     0,   243,   671,     0,   244,   245,     0,
       0,     0,   672,   247,   248,   249,   673,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,   674,   254,   255,
     675,     0,     0,   256,     0,   257,   258,     0,   259,   260,
       0,     0,     0,   261,     0,     0,   262,   263,     0,     0,
     264,     0,   676,   265,   266,     0,     0,     0,     0,     0,
     677,   268,     0,   269,     0,   270,     0,   271,   272,     0,
       0,   678,     0,     0,     0,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,   288,   679,   289,   290,   291,   292,   680,   293,
     294,     0,     0,     0,     0,   295,   296,   297,   298,   681,
     300,     0,     0,   682,   302,   683,   303,     0,   304,   684,
     685,   686,   687,   688,   309,   310,   311,   312,   313,     0,
     689,   314,   315,     0,     0,   316,   317,   318,   319,   690,
     691,   692,   320,   321,     0,   693,   694,     0,   322,   323,
     695,     0,   325,   326,   327,     0,   328,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,   330,   331,   696,
     332,   333,   334,   335,   336,   697,   338,   339,   340,   698,
     699,   343,   700,     0,   344,   345,   346,     0,   347,     0,
     348,   349,   350,   351,   352,     0,   701,   354,   355,     0,
       0,   356,     0,     0,     0,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,   365,   366,     0,   367,   368,
       0,   369,   370,   371,   702,   703,   372,     0,   373,     0,
     374,   375,     0,   376,   377,     0,     0,   704,   378,   379,
     380,   381,   382,   705,   384,   385,   386,   387,     0,   706,
     389,     0,     0,     0,   390,   391,   392,   393,     0,     0,
       0,   394,     0,     0,     0,   395,     0,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,     0,     0,     0,
       0,     0,     0,   405,   406,     0,   407,     0,     0,   408,
       0,     0,   409,   410,   411,   707,   708,   412,   413,     0,
     414,   415,   709,   417,   418,   419,   710,   711,   420,   421,
     422,   423,   712,   424,   425,     0,     0,   426,   427,   428,
     429,     0,   713,   430,   431,     0,   714,   715,   716,   717,
       0,     0,     0,     0,     0,   436,   437,     0,   718,   719,
     720,   439,   440,   441,   721,   442,   443,   722,   444,   445,
       0,   446,   447,     0,     0,   448,     0,     0,   449,     0,
     450,     0,   723,   452,     0,     0,   724,   725,   726,   727,
     453,     0,     0,   454,   728,     0,   729,   455,   456,   457,
     730,     0,     0,     0,     0,     0,     0,   459,   460,     0,
     461,   462,   463,     0,     0,   731,     0,     0,     0,   732,
     733,     0,     0,     0,     0,   734,   735,     0,     0,   736,
     737,     0,     0,   738,   739,   135,     0,   637,   137,   138,
     139,   140,     0,     0,     0,     0,     0,   141,     0,     0,
     638,     0,   143,   144,   145,   146,   147,   639,   149,     0,
     150,     0,     0,   640,   151,   641,   642,   643,   152,   644,
       0,   153,   154,   155,     0,   156,     0,   157,   158,     0,
       0,   159,   645,   646,   160,   161,     0,   162,   647,   648,
     164,     0,   165,   166,   167,   168,   649,   170,     0,   650,
     172,     0,   173,   174,   175,   176,   177,   178,   179,   180,
     181,     0,   182,   183,     0,   184,   185,   186,   651,   188,
       0,   189,   652,   653,   190,     0,     0,   191,   654,   655,
       0,   192,   656,   657,     0,   193,   194,   195,   658,   659,
     660,     0,     0,     0,     0,   661,   198,   662,     0,     0,
     663,   199,     0,   200,     0,     0,     0,   201,     0,   202,
     203,   204,   205,     0,     0,     0,   206,     0,     0,   207,
     208,   209,     0,     0,     0,   210,     0,   211,   212,     0,
     213,   214,   215,     0,     0,   216,   217,     0,   218,   219,
     220,   221,   222,   664,     0,   223,   224,   225,   665,   666,
     226,   227,     0,   228,   229,   230,   667,     0,   231,     0,
       0,     0,   232,     0,   233,     0,   234,     0,   235,   668,
     237,   669,   239,     0,   240,     0,   670,     0,   241,   242,
       0,   243,   671,     0,   244,   245,     0,     0,     0,   672,
     247,   248,   249,   673,     0,   250,   251,   252,     0,     0,
     253,     0,     0,     0,   674,   254,   255,   675,     0,     0,
     256,     0,   257,   258,     0,   259,   260,     0,     0,     0,
     261,     0,     0,   262,   263,     0,     0,   264,     0,   676,
     265,   266,     0,     0,     0,     0,     0,   677,   268,     0,
     269,     0,   270,     0,   271,   272,     0,     0,   678,     0,
       0,     0,     0,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,     0,   286,   287,   288,
     679,   289,   290,   291,   292,   680,   293,   294,     0,     0,
       0,     0,   295,   296,   297,   298,   681,   300,     0,     0,
     682,   302,   683,   303,     0,   304,   684,   685,   686,   687,
     688,   309,   310,   311,   312,   313,     0,   689,   314,   315,
       0,     0,   316,   317,   318,   319,   690,   691,   692,   320,
     321,     0,   693,   694,     0,   322,   323,   695,     0,   325,
     326,   327,     0,   328,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   329,   330,   331,   696,   332,   333,   334,
     335,   336,   697,   338,   339,   340,   698,   699,   343,   700,
       0,   344,   345,   346,     0,   347,     0,   348,   349,   350,
     351,   352,     0,   701,   354,   355,     0,     0,   356,     0,
       0,     0,   357,   358,   359,   360,   361,     0,     0,   362,
     363,   364,   365,   366,     0,   367,   368,     0,   369,   370,
     371,   702,   703,   372,     0,   373,     0,   374,   375,     0,
     376,   377,     0,     0,   704,   378,   379,   380,   381,   382,
     705,   384,   385,   386,   387,     0,   706,   389,     0,     0,
       0,   390,   391,   392,   393,     0,     0,     0,   394,     0,
       0,     0,   395,     0,   396,   397,   398,   399,     0,   400,
     401,   402,   403,   404,     0,     0,     0,     0,     0,     0,
     405,   406,     0,   407,     0,     0,   408,     0,     0,   409,
     410,   411,   707,   708,   412,   413,     0,   414,   415,   709,
     417,   418,   419,   710,   711,   420,   421,   422,   423,   712,
     424,   425,     0,     0,   426,   427,   428,   429,     0,   713,
     430,   431,     0,   714,   715,   716,   717,     0,     0,     0,
       0,     0,   436,   437,     0,   718,   719,   720,   439,   440,
     441,   721,   442,   443,   722,   444,   445,     0,   446,   447,
       0,     0,   448,     0,     0,   449,     0,   450,     0,   723,
     452,     0,     0,   724,   725,   726,   727,   453,     0,     0,
     454,   728,     0,   729,   455,   456,   457,   730,     0,     0,
       0,     0,     0,     0,   459,   460,     0,   461,   462,   463,
       0,     0,   731,     0,     0,     0,   732,   733,     0,     0,
       0,     0,   734,   735,     0,     0,   736,   737,     0,     0,
     738,   739,   135,     0,   637,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   638,     0,   143,
     144,   145,   146,   147,   639,   149,     0,   150,     0,     0,
     640,   151,   641,   642,   643,   152,   644,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,   645,
     646,   160,   161,     0,   162,   647,   648,   164,     0,   165,
     166,   167,   168,   649,   170,     0,   650,   172,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,     0,   184,   185,   186,   651,   188,     0,   189,   652,
     653,   190,     0,     0,   191,   654,   655,     0,   192,   656,
     657,     0,   193,   194,   195,   658,   659,   660,     0,     0,
       0,     0,   661,   198,   662,     0,     0,   663,   199,     0,
     200,     0,     0,     0,   201,     0,   202,   203,   204,   205,
       0,     0,     0,   206,     0,     0,   207,   208,   209,     0,
       0,     0,   210,     0,   211,   212,     0,   213,   214,   215,
       0,     0,   216,   217,     0,   218,   219,   220,   221,   222,
     664,     0,   223,   224,   225,   665,   666,   226,   227,     0,
     228,   229,   230,   667,     0,   231,     0,     0,     0,   232,
       0,   233,     0,   234,     0,   235,   668,   237,   669,   239,
       0,   240,     0,   670,     0,   241,   242,     0,   243,   671,
       0,   244,   245,     0,     0,     0,   672,   247,   248,   249,
     673,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,   674,   254,   255,   675,     0,     0,   256,     0,   257,
     258,     0,   259,   260,     0,     0,     0,   261,     0,     0,
     262,   263,     0,     0,   264,     0,   676,   265,   266,     0,
       0,     0,     0,     0,   677,   268,     0,   269,     0,   270,
       0,   271,   272,     0,     0,   678,     0,     0,     0,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,   288,   679,   289,   290,
     291,   292,   680,   293,   294,     0,     0,     0,     0,   295,
     296,   297,   298,   681,   300,     0,     0,   682,   302,   683,
     303,     0,   304,   684,   685,   686,   687,   688,   309,   310,
     311,   312,   313,     0,   689,   314,   315,     0,     0,   316,
     317,   318,   319,   690,   691,   692,   320,   321,     0,   693,
     694,     0,   322,   323,   695,     0,   325,   326,   327,     0,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     329,   330,   331,   696,   332,   333,   334,   335,   336,   697,
     338,   339,   340,   698,   699,   343,   700,     0,   344,   345,
     346,     0,   347,     0,   348,   349,   350,   351,   352,     0,
     701,   354,   355,     0,     0,   356,     0,     0,     0,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,   365,
     366,     0,   367,   368,     0,   369,   370,   371,   702,   703,
     372,     0,   373,     0,   374,   375,     0,   376,   377,     0,
       0,   704,   378,   379,   380,   381,   382,   705,   384,   385,
     386,   387,     0,   706,   389,     0,     0,     0,   390,   391,
     392,   393,     0,     0,     0,   394,     0,     0,     0,   395,
       0,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,     0,     0,     0,     0,     0,     0,   405,   406,     0,
     407,     0,     0,   408,     0,     0,   409,   410,   411,   707,
     708,   412,   413,     0,   414,   415,   709,   417,   418,   419,
     710,   711,   420,   421,   422,   423,   712,   424,   425,     0,
       0,   426,   427,   428,   429,     0,   713,   430,   431,     0,
     714,   715,   716,   717,     0,     0,     0,     0,     0,   436,
     437,     0,   718,   719,   720,   439,   440,   441,   721,   442,
     443,   722,   444,   445,     0,   446,   447,     0,     0,   448,
       0,     0,   449,     0,   450,     0,   723,   452,     0,     0,
     724,   725,   726,   727,   453,     0,     0,   454,   728,     0,
     729,   455,   456,   457,   730,     0,     0,     0,     0,     0,
       0,   459,   460,     0,   461,   462,   463,     0,     0,   731,
       0,     0,     0,   732,   733,     0,     0,     0,     0,   734,
    1062,     0,     0,   736,   737,     0,     0,   738,   739,   135,
       0,   637,   137,   138,   139,   140,  1621,     0,     0,     0,
       0,  1622,     0,     0,   638,     0,   143,   144,   145,   146,
     147,   639,   149,     0,   150,     0,     0,   640,   151,   641,
     642,   643,   152,   644,     0,   153,   154,   155,     0,   156,
       0,   157,   158,     0,     0,   159,   645,   646,   160,   161,
       0,   162,   647,   648,   164,     0,   165,   166,   167,   168,
     649,   170,     0,   650,   172,     0,   173,   174,   175,   176,
     177,   178,   179,   180,   181,     0,   182,   183,     0,   184,
     185,   186,   651,   188,     0,   189,   652,   653,   190,     0,
       0,   191,   654,   655,     0,   192,   656,   657,     0,   193,
     194,   195,   658,   659,   660,     0,     0,     0,     0,   661,
     198,   662,     0,     0,   663,   199,     0,   200,     0,     0,
       0,   201,     0,   202,   203,   204,   205,     0,     0,     0,
     206,     0,     0,   207,   208,   209,     0,     0,     0,   210,
       0,   211,   212,     0,   213,   214,   215,     0,     0,   216,
     217,     0,   218,   219,   220,   221,   222,   664,     0,   223,
     224,   225,   665,   666,   226,   227,     0,   228,   229,   230,
     667,     0,   231,     0,     0,     0,   232,     0,   233,     0,
     234,     0,   235,   668,   237,   669,   239,     0,   240,     0,
     670,     0,   241,   242,     0,   243,   671,     0,   244,   245,
       0,     0,     0,   672,   247,   248,   249,   673,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   674,   254,
     255,   675,     0,     0,   256,     0,   257,   258,     0,   259,
     260,     0,     0,     0,   261,     0,     0,   262,   263,     0,
       0,   264,     0,   676,   265,   266,     0,     0,     0,     0,
       0,   677,   268,     0,   269,     0,   270,     0,   271,   272,
       0,     0,   678,     0,     0,     0,     0,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
       0,   286,   287,   288,   679,   289,   290,   291,   292,   680,
     293,   294,     0,     0,     0,     0,   295,   296,   297,   298,
     681,   300,     0,     0,   682,   302,   683,   303,     0,   304,
     684,   685,   686,   687,   688,   309,   310,   311,   312,   313,
       0,   689,   314,   315,     0,     0,   316,   317,   318,   319,
     690,     0,   692,   320,   321,     0,   693,   694,     0,   322,
     323,   695,     0,   325,   326,   327,     0,   328,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   329,   330,   331,
     696,   332,   333,   334,   335,   336,   697,   338,   339,   340,
     698,   699,   343,   700,     0,   344,   345,   346,     0,   347,
       0,   348,   349,   350,   351,   352,     0,   701,   354,   355,
       0,     0,   356,     0,     0,     0,   357,   358,   359,   360,
     361,     0,     0,   362,   363,   364,   365,   366,     0,   367,
     368,     0,   369,   370,   371,   702,   703,   372,     0,   373,
       0,   374,   375,     0,   376,   377,     0,     0,   704,   378,
     379,   380,   381,   382,   705,   384,   385,   386,   387,     0,
     706,   389,     0,     0,     0,   390,   391,   392,   393,     0,
       0,     0,   394,     0,     0,     0,   395,     0,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,     0,     0,
       0,     0,     0,     0,   405,   406,     0,   407,     0,     0,
     408,     0,     0,   409,   410,   411,   707,   708,   412,   413,
       0,   414,   415,   709,   417,   418,   419,   710,   711,   420,
     421,   422,   423,   712,   424,   425,     0,     0,   426,   427,
     428,   429,     0,   713,   430,   431,     0,   714,   715,   716,
     717,     0,     0,     0,     0,     0,   436,   437,     0,   718,
     719,   720,   439,   440,   441,   721,   442,   443,   722,   444,
     445,     0,   446,   447,     0,     0,   448,     0,     0,   449,
       0,   450,     0,   723,   452,     0,     0,   724,   725,   726,
     727,   453,     0,     0,   454,   728,     0,   729,   455,   456,
     457,   730,     0,     0,     0,     0,     0,     0,   459,   460,
       0,   461,   462,   463,     0,     0,   731,     0,     0,     0,
     732,   733,     0,     0,     0,     0,   734,   735,     0,     0,
     736,   737,     0,     0,   738,   739,   135,     0,   637,   137,
     138,   139,   140,     0,     0,     0,     0,     0,   141,     0,
       0,   638,     0,   143,   144,   145,   146,   147,   639,   149,
       0,   150,     0,     0,   640,   151,   641,   642,   643,   152,
     644,     0,   153,   154,   155,     0,   156,     0,   157,   158,
       0,     0,   159,   645,   646,   160,   161,     0,   162,   647,
     648,   164,     0,   165,   166,   167,   168,   649,   170,     0,
     650,   172,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,     0,   184,   185,   186,   651,
     188,     0,   189,   652,   653,   190,     0,     0,   191,   654,
     655,     0,   192,   656,   657,     0,   193,   194,   195,   658,
     659,   660,     0,     0,     0,     0,   661,   198,   662,     0,
       0,   663,   199,     0,   200,     0,     0,     0,   201,     0,
     202,   203,   204,   205,     0,     0,     0,   206,     0,     0,
     207,   208,   209,     0,     0,     0,   210,     0,   211,   212,
       0,   213,   214,   215,     0,     0,   216,   217,     0,   218,
     219,   220,   221,   222,   664,     0,   223,   224,   225,   665,
     666,   226,   227,     0,   228,   229,   230,   667,     0,   231,
       0,     0,     0,   232,     0,   233,     0,   234,     0,   235,
     668,   237,   669,   239,     0,   240,     0,   670,     0,   241,
     242,     0,   243,   671,     0,   244,   245,     0,     0,     0,
     672,   247,   248,   249,   673,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,   674,   254,   255,  2503,     0,
       0,   256,     0,   257,   258,     0,   259,   260,     0,     0,
       0,   261,     0,     0,   262,   263,     0,     0,   264,     0,
     676,   265,   266,     0,     0,     0,     0,     0,   677,   268,
       0,   269,     0,   270,     0,   271,   272,     0,     0,   678,
       0,     0,     0,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
     288,   679,   289,   290,   291,   292,   680,   293,   294,     0,
       0,     0,     0,   295,   296,   297,   298,   681,   300,     0,
       0,   682,   302,   683,   303,     0,   304,   684,   685,   686,
     687,   688,   309,   310,   311,   312,   313,     0,   689,   314,
     315,     0,     0,   316,   317,   318,   319,   690,   691,   692,
     320,   321,     0,   693,   694,     0,   322,   323,   695,     0,
     325,   326,   327,     0,   328,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   329,   330,   331,   696,   332,   333,
     334,   335,   336,   697,   338,   339,   340,   698,   699,   343,
     700,     0,   344,   345,   346,     0,   347,     0,   348,   349,
     350,   351,   352,     0,   701,   354,   355,     0,     0,   356,
       0,     0,     0,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,   365,   366,     0,   367,   368,     0,   369,
     370,   371,   702,   703,   372,     0,   373,     0,   374,   375,
       0,   376,   377,     0,     0,   704,   378,   379,   380,   381,
     382,   705,   384,   385,   386,   387,     0,   706,   389,     0,
       0,     0,   390,   391,   392,   393,     0,     0,     0,   394,
       0,     0,     0,   395,     0,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   405,   406,     0,   407,     0,     0,   408,     0,     0,
     409,   410,   411,   707,   708,   412,   413,     0,   414,   415,
     709,   417,   418,   419,   710,   711,   420,   421,   422,   423,
     712,   424,   425,     0,     0,   426,   427,   428,   429,     0,
     713,   430,   431,     0,   714,   715,   716,   717,     0,     0,
       0,     0,     0,   436,   437,     0,   718,   719,   720,   439,
     440,   441,   721,   442,   443,   722,   444,   445,     0,   446,
     447,     0,     0,   448,     0,     0,   449,     0,   450,     0,
     723,   452,     0,     0,   724,   725,   726,   727,   453,     0,
       0,   454,   728,     0,   729,   455,   456,   457,   730,     0,
       0,     0,     0,     0,     0,   459,   460,     0,   461,   462,
     463,     0,     0,   731,     0,     0,     0,   732,   733,     0,
       0,     0,     0,   734,   735,     0,     0,   736,   737,     0,
       0,   738,   739,   135,     0,   637,   137,   138,   139,   140,
       0,     0,     0,     0,     0,   141,     0,     0,   638,     0,
     143,   144,   145,   146,   147,   639,   149,     0,   150,     0,
       0,   640,   151,   641,   642,   643,   152,   644,     0,   153,
     154,   155,     0,   156,     0,   157,   158,     0,     0,   159,
     645,   646,   160,   161,     0,   162,   647,   648,   164,     0,
     165,   166,   167,   168,   649,   170,     0,   650,   172,     0,
     173,   174,   175,   176,   177,   178,   179,   180,   181,     0,
     182,   183,     0,   184,   185,   186,   651,   188,     0,   189,
     652,   653,   190,     0,     0,   191,   654,   655,     0,   192,
     656,   657,     0,   193,   194,   195,   658,   659,   660,     0,
       0,     0,     0,   661,   198,   662,     0,     0,   663,   199,
       0,   200,     0,     0,     0,   201,     0,   202,   203,   204,
     205,     0,     0,     0,   206,     0,     0,   207,   208,   209,
       0,     0,     0,   210,     0,   211,   212,     0,   213,   214,
     215,     0,     0,   216,   217,     0,   218,   219,   220,   221,
     222,   664,     0,   223,   224,   225,   665,   666,   226,   227,
       0,   228,   229,   230,   667,     0,   231,     0,     0,     0,
     232,     0,   233,     0,   234,     0,   235,   668,   237,   669,
     239,     0,   240,     0,   670,     0,   241,   242,     0,   243,
     671,     0,   244,   245,     0,     0,     0,   672,   247,   248,
     249,   673,     0,   250,   251,   252,     0,     0,   253,     0,
       0,     0,   674,   254,   255,  2549,     0,     0,   256,     0,
     257,   258,     0,   259,   260,     0,     0,     0,   261,     0,
       0,   262,   263,     0,     0,   264,     0,   676,   265,   266,
       0,     0,     0,     0,     0,   677,   268,     0,   269,     0,
     270,     0,   271,   272,     0,     0,   678,     0,     0,     0,
       0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,     0,   286,   287,   288,   679,   289,
     290,   291,   292,   680,   293,   294,     0,     0,     0,     0,
     295,   296,   297,   298,   681,   300,     0,     0,   682,   302,
     683,   303,     0,   304,   684,   685,   686,   687,   688,   309,
     310,   311,   312,   313,     0,   689,   314,   315,     0,     0,
     316,   317,   318,   319,   690,   691,   692,   320,   321,     0,
     693,   694,     0,   322,   323,   695,     0,   325,   326,   327,
       0,   328,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,   330,   331,   696,   332,   333,   334,   335,   336,
     697,   338,   339,   340,   698,   699,   343,   700,     0,   344,
     345,   346,     0,   347,     0,   348,   349,   350,   351,   352,
       0,   701,   354,   355,     0,     0,   356,     0,     0,     0,
     357,   358,   359,   360,   361,     0,     0,   362,   363,   364,
     365,   366,     0,   367,   368,     0,   369,   370,   371,   702,
     703,   372,     0,   373,     0,   374,   375,     0,   376,   377,
       0,     0,   704,   378,   379,   380,   381,   382,   705,   384,
     385,   386,   387,     0,   706,   389,     0,     0,     0,   390,
     391,   392,   393,     0,     0,     0,   394,     0,     0,     0,
     395,     0,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,     0,     0,     0,     0,     0,     0,   405,   406,
       0,   407,     0,     0,   408,     0,     0,   409,   410,   411,
     707,   708,   412,   413,     0,   414,   415,   709,   417,   418,
     419,   710,   711,   420,   421,   422,   423,   712,   424,   425,
       0,     0,   426,   427,   428,   429,     0,   713,   430,   431,
       0,   714,   715,   716,   717,     0,     0,     0,     0,     0,
     436,   437,     0,   718,   719,   720,   439,   440,   441,   721,
     442,   443,   722,   444,   445,     0,   446,   447,     0,     0,
     448,     0,     0,   449,     0,   450,     0,   723,   452,     0,
       0,   724,   725,   726,   727,   453,     0,     0,   454,   728,
       0,   729,   455,   456,   457,   730,     0,     0,     0,     0,
       0,     0,   459,   460,     0,   461,   462,   463,     0,     0,
     731,     0,     0,     0,   732,   733,     0,     0,     0,     0,
     734,   735,     0,     0,   736,   737,     0,     0,   738,   739,
     135,     0,   637,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,   638,     0,   143,   144,   145,
     146,   147,   639,   149,     0,   150,     0,     0,   640,   151,
     641,   642,   643,   152,   644,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,   645,   646,   160,
     161,     0,   162,   647,   648,   164,     0,   165,   166,   167,
     168,   649,   170,     0,   650,   172,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,     0,
     184,   185,   186,   651,   188,     0,   189,   652,   653,   190,
       0,     0,   191,   654,   655,     0,   192,   656,   657,     0,
     193,   194,   195,   658,   659,   660,     0,     0,     0,     0,
     661,   198,   662,     0,     0,  3257,   199,     0,   200,     0,
       0,     0,   201,     0,   202,   203,   204,   205,     0,     0,
       0,   206,     0,     0,   207,   208,   209,     0,     0,     0,
     210,     0,   211,   212,     0,   213,   214,   215,     0,     0,
     216,   217,     0,   218,   219,   220,   221,   222,   664,     0,
     223,   224,   225,   665,   666,   226,   227,     0,   228,   229,
     230,   667,     0,   231,     0,     0,     0,   232,     0,   233,
       0,   234,     0,   235,   668,   237,   669,   239,     0,   240,
       0,   670,     0,   241,   242,     0,   243,   671,     0,   244,
     245,     0,     0,     0,   672,   247,   248,   249,   673,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   674,
     254,   255,   675,     0,     0,   256,     0,   257,   258,     0,
     259,   260,     0,     0,     0,   261,     0,     0,   262,   263,
       0,     0,   264,     0,   676,   265,   266,     0,     0,     0,
       0,     0,   677,   268,     0,   269,     0,   270,     0,   271,
     272,     0,     0,   678,     0,     0,     0,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,   288,   679,   289,   290,   291,   292,
     680,   293,   294,     0,     0,     0,     0,   295,   296,   297,
     298,   681,   300,     0,     0,   682,   302,   683,   303,     0,
     304,   684,   685,   686,   687,   688,   309,   310,   311,   312,
     313,     0,   689,   314,   315,     0,     0,   316,   317,   318,
     319,   690,   691,   692,   320,   321,     0,   693,   694,     0,
     322,   323,   695,     0,   325,   326,   327,     0,   328,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   329,   330,
     331,   696,   332,   333,   334,   335,   336,   697,   338,   339,
     340,   698,   699,   343,   700,     0,   344,   345,   346,     0,
     347,     0,   348,   349,   350,   351,   352,     0,   701,   354,
     355,     0,     0,   356,     0,     0,     0,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,   365,   366,     0,
     367,   368,     0,   369,   370,   371,   702,   703,   372,     0,
     373,     0,   374,   375,     0,   376,   377,     0,     0,   704,
     378,   379,   380,   381,   382,   705,   384,   385,   386,   387,
       0,   706,   389,     0,     0,     0,   390,   391,   392,   393,
       0,     0,     0,   394,     0,     0,     0,   395,     0,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,     0,
       0,     0,     0,     0,     0,   405,   406,     0,   407,     0,
       0,   408,     0,     0,   409,   410,   411,   707,   708,   412,
     413,     0,   414,   415,   709,   417,   418,   419,   710,   711,
     420,   421,   422,   423,   712,   424,   425,     0,     0,   426,
     427,   428,   429,     0,   713,   430,   431,     0,   714,   715,
     716,   717,     0,     0,     0,     0,     0,   436,   437,     0,
     718,   719,   720,   439,   440,   441,   721,   442,   443,   722,
     444,   445,     0,   446,   447,     0,     0,   448,     0,     0,
     449,     0,   450,     0,   723,   452,     0,     0,   724,   725,
     726,   727,   453,     0,     0,   454,   728,     0,   729,   455,
     456,   457,   730,     0,     0,     0,     0,     0,     0,   459,
     460,     0,   461,   462,   463,     0,     0,   731,     0,     0,
       0,   732,   733,     0,     0,     0,     0,   734,   735,     0,
       0,   736,   737,     0,     0,   738,   739,   135,     0,   637,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   638,     0,   143,   144,   145,   146,   147,   639,
     149,     0,   150,     0,     0,   640,   151,   641,   642,   643,
     152,   644,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,   645,   646,   160,   161,     0,   162,
     647,   648,   164,     0,   165,   166,   167,   168,   649,   170,
       0,   650,   172,     0,   173,   174,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,     0,   184,   185,   186,
     651,   188,     0,   189,   652,   653,   190,     0,     0,   191,
     654,   655,     0,   192,   656,   657,     0,   193,   194,   195,
     658,   659,   660,     0,     0,     0,     0,   661,   198,   662,
       0,     0,   663,   199,     0,   200,     0,     0,     0,   201,
       0,   202,   203,   204,   205,     0,     0,     0,   206,     0,
       0,   207,   208,   209,     0,     0,     0,   210,     0,   211,
     212,     0,   213,   214,   215,     0,     0,   216,   217,     0,
     218,   219,   220,   221,   222,   664,     0,   223,   224,   225,
     665,   666,   226,   227,     0,   228,   229,   230,   667,     0,
     231,     0,     0,     0,   232,     0,   233,     0,   234,     0,
     235,   668,   237,   669,   239,     0,   240,     0,   670,     0,
     241,   242,     0,   243,   671,     0,   244,   245,     0,     0,
       0,   672,   247,   248,   249,   673,     0,   250,   251,   252,
       0,     0,   253,     0,     0,     0,   674,   254,   255,   675,
       0,     0,   256,     0,   257,   258,     0,   259,   260,     0,
       0,     0,   261,     0,     0,   262,   263,     0,     0,   264,
       0,   676,   265,   266,     0,     0,     0,     0,     0,   677,
     268,     0,   269,     0,   270,     0,   271,   272,     0,     0,
     678,     0,     0,     0,     0,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,   286,
     287,   288,   679,   289,   290,   291,   292,   680,   293,   294,
    4088,     0,     0,     0,   295,   296,   297,   298,   681,   300,
       0,     0,   682,   302,   683,   303,     0,   304,   684,   685,
     686,   687,   688,   309,   310,   311,   312,   313,     0,   689,
     314,   315,     0,     0,   316,   317,   318,   319,   690,     0,
     692,   320,   321,     0,   693,   694,     0,   322,   323,   695,
       0,   325,   326,   327,     0,   328,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,   330,   331,   696,   332,
     333,   334,   335,   336,   697,   338,   339,   340,   698,   699,
     343,   700,     0,   344,   345,   346,     0,   347,     0,   348,
     349,   350,   351,   352,     0,   701,   354,   355,     0,     0,
     356,     0,     0,     0,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   364,   365,   366,     0,   367,   368,     0,
     369,   370,   371,   702,   703,   372,     0,   373,     0,   374,
     375,     0,   376,   377,     0,     0,   704,   378,   379,   380,
     381,   382,   705,   384,   385,   386,   387,     0,   706,   389,
       0,     0,     0,   390,   391,   392,   393,     0,     0,     0,
     394,     0,     0,     0,   395,     0,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,     0,     0,     0,     0,
       0,     0,   405,   406,     0,   407,     0,     0,   408,     0,
       0,   409,   410,   411,   707,   708,   412,   413,     0,   414,
     415,   709,   417,   418,   419,   710,   711,   420,   421,   422,
     423,   712,   424,   425,     0,     0,   426,   427,   428,   429,
       0,   713,   430,   431,     0,   714,   715,   716,   717,     0,
       0,     0,     0,     0,   436,   437,     0,   718,   719,   720,
     439,   440,   441,   721,   442,   443,   722,   444,   445,     0,
     446,   447,     0,     0,   448,     0,     0,   449,     0,   450,
       0,   723,   452,     0,     0,   724,   725,   726,   727,   453,
       0,     0,   454,   728,     0,   729,   455,   456,   457,   730,
       0,     0,     0,     0,     0,     0,   459,   460,     0,   461,
     462,   463,     0,     0,   731,     0,     0,     0,   732,   733,
       0,     0,     0,     0,   734,   735,     0,     0,   736,   737,
       0,     0,   738,   739,   135,     0,   637,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,   638,
       0,   143,   144,   145,   146,   147,   639,   149,     0,   150,
       0,     0,   640,   151,   641,   642,   643,   152,   644,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,   645,   646,   160,   161,     0,   162,   647,   648,   164,
       0,   165,   166,   167,   168,   649,   170,     0,   650,   172,
       0,   173,   174,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,     0,   184,   185,   186,   651,   188,     0,
     189,   652,   653,   190,     0,     0,   191,   654,   655,     0,
     192,   656,   657,     0,   193,   194,   195,   658,   659,   660,
       0,     0,     0,     0,   661,   198,   662,     0,     0,   663,
     199,     0,   200,     0,     0,     0,   201,     0,   202,   203,
     204,   205,     0,     0,     0,   206,     0,     0,   207,   208,
     209,     0,     0,     0,   210,     0,   211,   212,     0,   213,
     214,   215,     0,     0,   216,   217,     0,   218,   219,   220,
     221,   222,   664,     0,   223,   224,   225,   665,   666,   226,
     227,     0,   228,   229,   230,   667,     0,   231,     0,     0,
       0,   232,     0,   233,     0,   234,     0,   235,   668,   237,
     669,   239,     0,   240,     0,   670,     0,   241,   242,     0,
     243,   671,     0,   244,   245,     0,     0,     0,   672,   247,
     248,   249,   673,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   674,   254,   255,   675,     0,     0,   256,
       0,   257,   258,     0,   259,   260,     0,     0,     0,   261,
       0,     0,   262,   263,     0,     0,   264,     0,   676,   265,
     266,     0,     0,     0,     0,     0,   677,   268,     0,   269,
       0,   270,     0,   271,   272,     0,     0,   678,     0,     0,
       0,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,   288,   679,
     289,   290,   291,   292,   680,   293,   294,     0,     0,     0,
       0,   295,   296,   297,   298,   681,   300,     0,     0,   682,
     302,   683,   303,     0,   304,   684,   685,   686,   687,   688,
     309,   310,   311,   312,   313,     0,   689,   314,   315,     0,
       0,   316,   317,   318,   319,   690,     0,   692,   320,   321,
       0,   693,   694,     0,   322,   323,   695,     0,   325,   326,
     327,     0,   328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   329,   330,   331,   696,   332,   333,   334,   335,
     336,   697,   338,   339,   340,   698,   699,   343,   700,     0,
     344,   345,   346,     0,   347,     0,   348,   349,   350,   351,
     352,     0,   701,   354,   355,     0,     0,   356,     0,     0,
       0,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,   365,   366,     0,   367,   368,     0,   369,   370,   371,
     702,   703,   372,     0,   373,     0,   374,   375,     0,   376,
     377,     0,     0,   704,   378,   379,   380,   381,   382,   705,
     384,   385,   386,   387,     0,   706,   389,     0,     0,     0,
     390,   391,   392,   393,     0,     0,     0,   394,     0,     0,
       0,   395,     0,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,     0,     0,     0,     0,     0,     0,   405,
     406,     0,   407,     0,     0,   408,     0,     0,   409,   410,
     411,   707,   708,   412,   413,     0,   414,   415,   709,   417,
     418,   419,   710,   711,   420,   421,   422,   423,   712,   424,
     425,     0,     0,   426,   427,   428,   429,     0,   713,   430,
     431,     0,   714,   715,   716,   717,     0,     0,     0,     0,
       0,   436,   437,     0,   718,   719,   720,   439,   440,   441,
     721,   442,   443,   722,   444,   445,     0,   446,   447,     0,
       0,   448,     0,     0,   449,     0,   450,     0,   723,   452,
       0,     0,   724,   725,   726,   727,   453,     0,     0,   454,
     728,     0,   729,   455,   456,   457,   730,     0,     0,     0,
       0,     0,     0,   459,   460,     0,   461,   462,   463,     0,
       0,   731,     0,     0,     0,   732,   733,     0,     0,     0,
       0,   734,   735,     0,     0,   736,   737,     0,     0,   738,
     739,   135,     0,   637,   137,   138,   139,   140,     0,     0,
       0,     0,     0,   141,     0,     0,   638,     0,   143,   144,
     145,   146,   147,   639,   149,     0,   150,     0,     0,   640,
     151,   641,   642,   643,   152,   644,     0,   153,   154,   155,
       0,   156,     0,   157,   158,     0,     0,   159,   645,   646,
     160,   161,     0,   162,   647,   648,   164,     0,   165,   166,
     167,   168,   649,   170,     0,   650,   172,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,     0,   182,   183,
       0,   184,   185,   186,   651,   188,     0,   189,   652,   653,
     190,     0,     0,   191,   654,   655,     0,   192,   656,   657,
       0,   193,   194,   195,   658,   659,   660,     0,     0,     0,
       0,   661,   198,   662,     0,     0,   663,   199,     0,   200,
       0,     0,     0,   201,     0,   202,   203,   204,   205,     0,
       0,     0,   206,     0,     0,   207,   208,   209,     0,     0,
       0,   210,     0,   211,   212,     0,   213,   214,   215,     0,
       0,   216,   217,     0,   218,   219,   220,   221,   222,   664,
       0,   223,   224,   225,   665,   666,   226,   227,     0,   228,
     229,   230,   667,     0,   231,     0,     0,     0,   232,     0,
     233,     0,   234,     0,   235,   668,   237,   669,   239,     0,
     240,     0,   670,     0,   241,   242,     0,   243,   671,     0,
     244,   245,     0,     0,     0,   672,   247,   248,   249,   673,
       0,   250,   251,   252,     0,     0,   253,     0,     0,     0,
     674,   254,   255,  1636,     0,     0,   256,     0,   257,   258,
       0,   259,   260,     0,     0,     0,   261,     0,     0,   262,
     263,     0,     0,   264,     0,   676,   265,   266,     0,     0,
       0,     0,     0,   677,   268,     0,   269,     0,   270,     0,
     271,   272,     0,     0,   678,     0,     0,     0,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,   287,   288,   679,   289,   290,   291,
     292,   680,   293,   294,     0,     0,     0,     0,   295,   296,
     297,   298,   681,   300,     0,     0,   682,   302,   683,   303,
       0,   304,   684,   685,   686,   687,   688,   309,   310,   311,
     312,   313,     0,   689,   314,   315,     0,     0,   316,   317,
     318,   319,   690,     0,   692,   320,   321,     0,   693,   694,
       0,   322,   323,   695,     0,   325,   326,   327,     0,   328,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   329,
     330,   331,   696,   332,   333,   334,   335,   336,   697,   338,
     339,   340,   698,   699,   343,   700,     0,   344,   345,   346,
       0,   347,     0,   348,   349,   350,   351,   352,     0,   701,
     354,   355,     0,     0,   356,     0,     0,     0,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,   365,   366,
       0,   367,   368,     0,   369,   370,   371,   702,   703,   372,
       0,   373,     0,   374,   375,     0,   376,   377,     0,     0,
     704,   378,   379,   380,   381,   382,   705,   384,   385,   386,
     387,     0,   706,   389,     0,     0,     0,   390,   391,   392,
     393,     0,     0,     0,   394,     0,     0,     0,   395,     0,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
       0,     0,     0,     0,     0,     0,   405,   406,     0,   407,
       0,     0,   408,     0,     0,   409,   410,   411,   707,   708,
     412,   413,     0,   414,   415,   709,   417,   418,   419,   710,
     711,   420,   421,   422,   423,   712,   424,   425,     0,     0,
     426,   427,   428,   429,     0,   713,   430,   431,     0,   714,
     715,   716,   717,     0,     0,     0,     0,     0,   436,   437,
       0,   718,   719,   720,   439,   440,   441,   721,   442,   443,
     722,   444,   445,     0,   446,   447,     0,     0,   448,     0,
       0,   449,     0,   450,     0,   723,   452,     0,     0,   724,
     725,   726,   727,   453,     0,     0,   454,   728,     0,   729,
     455,   456,   457,   730,     0,     0,     0,     0,     0,     0,
     459,   460,     0,   461,   462,   463,     0,     0,   731,     0,
       0,     0,   732,   733,     0,     0,     0,     0,   734,   735,
       0,     0,   736,   737,     0,     0,   738,   739,   135,     0,
     637,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,   638,     0,   143,   144,   145,   146,   147,
     639,   149,     0,   150,     0,     0,   640,   151,   641,   642,
     643,   152,   644,     0,   153,   154,   155,     0,   156,     0,
     157,   158,     0,     0,   159,   645,   646,   160,   161,     0,
     162,   647,   648,   164,     0,   165,   166,   167,   168,   649,
     170,     0,   650,   172,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,     0,   184,   185,
     186,   651,   188,     0,   189,   652,   653,   190,     0,     0,
     191,   654,   655,     0,   192,   656,   657,     0,   193,   194,
     195,   658,   659,   660,     0,     0,     0,     0,   661,   198,
     662,     0,     0,   663,   199,     0,   200,     0,     0,     0,
     201,     0,   202,   203,   204,   205,     0,     0,     0,   206,
       0,     0,   207,   208,   209,     0,     0,     0,   210,     0,
     211,   212,     0,   213,   214,   215,     0,     0,   216,   217,
       0,   218,   219,   220,   221,   222,   664,     0,   223,   224,
     225,   665,   666,   226,   227,     0,   228,   229,   230,   667,
       0,   231,     0,     0,     0,   232,     0,   233,     0,   234,
       0,   235,   668,   237,   669,   239,     0,   240,     0,   670,
       0,   241,   242,     0,   243,   671,     0,   244,   245,     0,
       0,     0,   672,   247,   248,   249,   673,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,   674,   254,   255,
    1638,     0,     0,   256,     0,   257,   258,     0,   259,   260,
       0,     0,     0,   261,     0,     0,   262,   263,     0,     0,
     264,     0,   676,   265,   266,     0,     0,     0,     0,     0,
     677,   268,     0,   269,     0,   270,     0,   271,   272,     0,
       0,   678,     0,     0,     0,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,   288,   679,   289,   290,   291,   292,   680,   293,
     294,     0,     0,     0,     0,   295,   296,   297,   298,   681,
     300,     0,     0,   682,   302,   683,   303,     0,   304,   684,
     685,   686,   687,   688,   309,   310,   311,   312,   313,     0,
     689,   314,   315,     0,     0,   316,   317,   318,   319,   690,
       0,   692,   320,   321,     0,   693,   694,     0,   322,   323,
     695,     0,   325,   326,   327,     0,   328,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,   330,   331,   696,
     332,   333,   334,   335,   336,   697,   338,   339,   340,   698,
     699,   343,   700,     0,   344,   345,   346,     0,   347,     0,
     348,   349,   350,   351,   352,     0,   701,   354,   355,     0,
       0,   356,     0,     0,     0,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,   365,   366,     0,   367,   368,
       0,   369,   370,   371,   702,   703,   372,     0,   373,     0,
     374,   375,     0,   376,   377,     0,     0,   704,   378,   379,
     380,   381,   382,   705,   384,   385,   386,   387,     0,   706,
     389,     0,     0,     0,   390,   391,   392,   393,     0,     0,
       0,   394,     0,     0,     0,   395,     0,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,     0,     0,     0,
       0,     0,     0,   405,   406,     0,   407,     0,     0,   408,
       0,     0,   409,   410,   411,   707,   708,   412,   413,     0,
     414,   415,   709,   417,   418,   419,   710,   711,   420,   421,
     422,   423,   712,   424,   425,     0,     0,   426,   427,   428,
     429,     0,   713,   430,   431,     0,   714,   715,   716,   717,
       0,     0,     0,     0,     0,   436,   437,     0,   718,   719,
     720,   439,   440,   441,   721,   442,   443,   722,   444,   445,
       0,   446,   447,     0,     0,   448,     0,     0,   449,     0,
     450,     0,   723,   452,     0,     0,   724,   725,   726,   727,
     453,     0,     0,   454,   728,     0,   729,   455,   456,   457,
     730,     0,     0,     0,     0,     0,     0,   459,   460,     0,
     461,   462,   463,     0,     0,   731,     0,     0,     0,   732,
     733,     0,     0,     0,     0,   734,   735,     0,     0,   736,
     737,     0,     0,   738,   739,   135,     0,   136,   137,   138,
     139,   140,     0,     0,     0,     0,     0,   141,     0,     0,
     142,     0,   143,   144,   145,   146,   147,   148,   149,     0,
     150,     0,     0,     0,   151,   641,     0,     0,   152,     0,
       0,   153,   154,   155,     0,   156,     0,   157,   158,     0,
       0,   159,     0,     0,   160,   161,     0,   162,   163,     0,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,     0,   173,   174,   175,   176,   177,   178,   179,   180,
     181,     0,   182,   183,     0,   184,   185,   186,   187,   188,
       0,   189,     0,     0,   190,     0,     0,   191,     0,     0,
       0,   192,     0,     0,     0,   193,   194,   195,     0,     0,
    2235,     0,     0,     0,     0,   197,   198,   662,     0,     0,
       0,   199,     0,   200,     0,     0,     0,   201,     0,   202,
     203,   204,   205,     0,     0,     0,   206,     0,     0,   207,
     208,   209,     0,     0,     0,   210,     0,   211,   212,     0,
     213,   214,   215,     0,     0,   216,   217,     0,   218,   219,
     220,   221,   222,     0,     0,   223,   224,   225,     0,   666,
     226,   227,     0,   228,   229,   230,   667,     0,   231,     0,
       0,     0,   232,     0,   233,     0,   234,     0,   235,   236,
     237,   238,   239,     0,   240,     0,     0,     0,   241,   242,
       0,   243,   671,     0,   244,   245,     0,     0,     0,   246,
     247,   248,   249,     0,     0,   250,   251,   252,     0,     0,
     253,     0,     0,     0,     0,   254,   255,     0,     0,     0,
     256,     0,   257,   258,     0,   259,   260,     0,     0,     0,
     261,     0,     0,   262,   263,     0,     0,   264,     0,     0,
     265,   266,     0,     0,     0,     0,     0,   267,   268,     0,
     269,     0,   270,     0,   271,   272,     0,     0,   678,     0,
       0,     0,     0,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,     0,   286,   287,   288,
       0,   289,   290,   291,   292,     0,   293,   294,     0,     0,
       0,     0,   295,   296,   297,   298,   299,   300,     0,     0,
     301,   302,     0,   303,     0,   304,     0,   305,   306,   307,
     308,   309,   310,   311,   312,   313,     0,   689,   314,   315,
       0,     0,   316,   317,   318,   319,     0,     0,     0,   320,
     321,     0,   693,   694,     0,   322,   323,   324,     0,   325,
     326,   327,     0,   328,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,     0,
       0,   344,   345,   346,     0,   347,     0,   348,   349,   350,
     351,   352,     0,   353,   354,   355,     0,     0,   356,     0,
       0,     0,   357,   358,   359,   360,   361,     0,     0,   362,
     363,   364,   365,   366,     0,   367,   368,     0,   369,   370,
     371,     0,     0,   372,     0,   373,     0,   374,   375,     0,
     376,   377,     0,     0,     0,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,   390,   391,   392,   393,     0,     0,     0,   394,     0,
       0,     0,   395,     0,   396,   397,   398,   399,     0,   400,
     401,   402,   403,   404,     0,     0,     0,     0,     0,     0,
     405,   406,     0,   407,     0,     0,   408,     0,     0,   409,
     410,   411,     0,     0,   412,   413,     0,   414,   415,   416,
     417,   418,   419,     0,     0,   420,   421,   422,   423,     0,
     424,   425,     0,     0,   426,   427,   428,   429,     0,   713,
     430,   431,     0,  2236,   433,   434,  2237,     0,     0,     0,
       0,     0,   436,   437,     0,     0,   719,   438,   439,   440,
     441,   721,   442,   443,   722,   444,   445,     0,   446,   447,
       0,     0,   448,     0,     0,   449,     0,   450,     0,   451,
     452,     0,     0,     0,     0,     0,     0,   453,     0,     0,
     454,     0,     0,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,     0,   459,   460,     0,   461,   462,   463,
       0,     0,   464,     0,     0,     0,     0,   135,     0,   136,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
     738,   739,   142,     0,   143,   144,   145,   146,   147,   148,
     149,     0,   150,     0,     0,     0,   151,     0,     0,     0,
     152,     0,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,     0,     0,   160,   161,     0,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,     0,   173,   174,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,  2348,   184,   185,   186,
     187,   188,     0,   189,     0,     0,   190,     0,     0,   191,
       0,     0,     0,   192,     0,     0,     0,   193,   194,   195,
       0,     0,   196,     0,     0,     0,     0,   197,   198,     0,
       0,     0,     0,   199,     0,   200,     0,     0,     0,   201,
       0,   202,   203,   204,   205,     0,     0,     0,   206,     0,
       0,   207,   208,   209,     0,     0,     0,   210,     0,   211,
     212,     0,   213,   214,   215,     0,     0,   216,   217,     0,
     218,   219,   220,   221,   222,     0,     0,   223,   224,   225,
       0,     0,   226,   227,     0,   228,   229,   230,     0,     0,
     231,     0,     0,     0,   232,     0,   233,   478,   234,     0,
     235,   236,   237,   238,   239,     0,   240,     0,     0,     0,
     241,   242,     0,   243,     0,     0,   244,   245,     0,     0,
       0,   246,   247,   248,   249,     0,     0,   250,   251,   252,
    1937,     0,   253,     0,     0,     0,     0,   254,   255,     0,
       0,     0,   256,     0,   257,   258,     0,   259,   260,     0,
       0,     0,   261,  1938,     0,   262,   263,     0,     0,   264,
       0,     0,   265,   266,     0,  2874,     0,     0,     0,   267,
     268,     0,   269,     0,   270,     0,   271,   272,     0,     0,
       0,     0,     0,     0,     0,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,   286,
     287,   288,     0,   289,   290,   291,   292,     0,   293,   294,
       0,     0,     0,     0,   295,   296,   297,   298,   299,   300,
       0,     0,   301,   302,     0,   303,     0,   304,     0,   305,
     306,   307,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,     0,   316,   317,   318,   319,     0,     0,
       0,   320,   321,     0,     0,     0,     0,   322,   323,   324,
       0,   325,   326,   327,     0,   328,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,   330,   331,     0,   332,
     333,   334,   335,  2875,   337,   338,   339,   340,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   347,     0,   348,
     349,   350,   351,   352,     0,   353,   354,   355,     0,     0,
     356,     0,     0,     0,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   364,   365,   366,     0,   367,   368,     0,
     369,   370,   371,     0,     0,   372,     0,   373,     0,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
    -436,     0,     0,   390,   391,   392,   393,     0,     0,     0,
     394,     0,     0,     0,   395,     0,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,   481,     0,     0,     0,
       0,     0,   405,   406,     0,   407,     0,     0,   408,     0,
       0,   409,   410,   411,     0,     0,   412,   413,     0,   414,
     415,   416,   417,   418,   419,     0,     0,   420,   421,   422,
     423,     0,   424,   425,     0,     0,   426,   427,   428,   429,
       0,     0,   430,   431,     0,   432,   433,   434,   435,     0,
       0,     0,     0,     0,   436,   437,     0,     0,     0,   438,
     439,   440,   441,     0,   442,   443,     0,   444,   445,     0,
     446,   447,     0,     0,   448,     0,     0,   449,     0,   450,
       0,   451,   452,     0,     0,     0,     0,     0,     0,   453,
       0,     0,   454,     0,     0,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,     0,   459,   460,     0,   461,
     462,   463,     0,     0,   464,     0,     0,   135,     0,   136,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   142,  2413,   143,   144,   145,   146,   147,   148,
     149,     0,   150,     0,     0,     0,   151,     0,     0,     0,
     152,     0,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,     0,     0,   160,   161,     0,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,     0,   173,   174,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,  2348,   184,   185,   186,
     187,   188,     0,   189,     0,     0,   190,     0,     0,   191,
       0,     0,     0,   192,     0,     0,     0,   193,   194,   195,
       0,     0,   196,     0,     0,     0,     0,   197,   198,     0,
       0,     0,     0,   199,     0,   200,     0,     0,     0,   201,
       0,   202,   203,   204,   205,     0,     0,     0,   206,     0,
       0,   207,   208,   209,     0,     0,     0,   210,     0,   211,
     212,     0,   213,   214,   215,     0,     0,   216,   217,     0,
     218,   219,   220,   221,   222,     0,     0,   223,   224,   225,
       0,     0,   226,   227,     0,   228,   229,   230,     0,     0,
     231,     0,     0,     0,   232,     0,   233,   478,   234,     0,
     235,   236,   237,   238,   239,     0,   240,     0,     0,     0,
     241,   242,     0,   243,     0,     0,   244,   245,     0,     0,
       0,   246,   247,   248,   249,     0,     0,   250,   251,   252,
    1937,     0,   253,     0,     0,     0,     0,   254,   255,     0,
       0,     0,   256,     0,   257,   258,     0,   259,   260,     0,
       0,     0,   261,  1938,     0,   262,   263,     0,     0,   264,
       0,     0,   265,   266,     0,     0,     0,     0,     0,   267,
     268,     0,   269,     0,   270,     0,   271,   272,     0,     0,
       0,     0,     0,     0,     0,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,   286,
     287,   288,     0,   289,   290,   291,   292,     0,   293,   294,
       0,     0,     0,     0,   295,   296,   297,   298,   299,   300,
       0,     0,   301,   302,     0,   303,     0,   304,     0,   305,
     306,   307,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,     0,   316,   317,   318,   319,     0,     0,
       0,   320,   321,     0,     0,     0,     0,   322,   323,   324,
       0,   325,   326,   327,     0,   328,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   347,     0,   348,
     349,   350,   351,   352,     0,   353,   354,   355,     0,     0,
     356,     0,     0,     0,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   364,   365,   366,     0,   367,   368,     0,
     369,   370,   371,     0,     0,   372,     0,   373,     0,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,   390,   391,   392,   393,     0,     0,     0,
     394,     0,     0,     0,   395,     0,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,   481,     0,     0,     0,
       0,     0,   405,   406,     0,   407,     0,     0,   408,     0,
       0,   409,   410,   411,     0,     0,   412,   413,     0,   414,
     415,   416,   417,   418,   419,     0,     0,   420,   421,   422,
     423,     0,   424,   425,     0,     0,   426,   427,   428,   429,
       0,     0,   430,   431,     0,   432,   433,   434,   435,     0,
       0,     0,     0,     0,   436,   437,     0,     0,     0,   438,
     439,   440,   441,     0,   442,   443,     0,   444,   445,     0,
     446,   447,     0,     0,   448,     0,     0,   449,     0,   450,
       0,   451,   452,     0,     0,     0,     0,     0,     0,   453,
       0,     0,   454,     0,     0,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,     0,   459,   460,     0,   461,
     462,   463,     0,     0,   464,     0,     0,   135,     0,   136,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   142,  2413,   143,   144,   145,   146,   147,   148,
     149,     0,   150,     0,     0,     0,   151,     0,     0,     0,
     152,     0,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,     0,     0,   160,   161,     0,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,     0,   173,   174,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,     0,   184,   185,   186,
     187,   188,     0,   189,     0,     0,   190,     0,     0,   191,
       0,     0,     0,   192,     0,     0,     0,   193,   194,   195,
       0,     0,   196,     0,     0,     0,     0,   197,   198,     0,
       0,     0,     0,   199,     0,   200,     0,     0,     0,   201,
       0,   202,   203,   204,   205,     0,     0,     0,   206,     0,
       0,   207,   208,   209,     0,     0,     0,   210,     0,   211,
     212,     0,   213,   214,   215,     0,     0,   216,   217,     0,
     218,   219,   220,   221,   222,     0,     0,   223,   224,   225,
       0,     0,   226,   227,     0,   228,   229,   230,     0,     0,
     231,     0,     0,     0,   232,     0,   233,     0,   234,     0,
     235,   236,   237,   238,   239,     0,   240,     0,     0,     0,
     241,   242,     0,   243,     0,     0,   244,   245,     0,     0,
       0,   246,   247,   248,   249,     0,     0,   250,   251,   252,
       0,     0,   253,     0,     0,     0,     0,   254,   255,     0,
       0,     0,   256,     0,   257,   258,     0,   259,   260,     0,
       0,     0,   261,     0,     0,   262,   263,     0,     0,   264,
       0,     0,   265,   266,     0,     0,     0,     0,     0,   267,
     268,     0,   269,     0,   270,     0,   271,   272,     0,     0,
       0,     0,     0,     0,     0,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,   286,
     287,   288,     0,   289,   290,   291,   292,     0,   293,   294,
       0,     0,     0,     0,   295,   296,   297,   298,   299,   300,
       0,     0,   301,   302,     0,   303,     0,   304,     0,   305,
     306,   307,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,     0,   316,   317,   318,   319,     0,     0,
       0,   320,   321,     0,     0,     0,     0,   322,   323,   324,
       0,   325,   326,   327,     0,   328,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   347,     0,   348,
     349,   350,   351,   352,     0,   353,   354,   355,     0,     0,
     356,     0,     0,     0,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   364,   365,   366,     0,   367,   368,     0,
     369,   370,   371,     0,     0,   372,     0,   373,     0,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
    2226,     0,     0,   390,   391,   392,   393,     0,     0,     0,
     394,     0,     0,     0,   395,     0,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,     0,     0,     0,     0,
       0,     0,   405,   406,     0,   407,     0,     0,   408,     0,
       0,   409,   410,   411,     0,     0,   412,   413,     0,   414,
     415,   416,   417,   418,   419,     0,     0,   420,   421,   422,
     423,     0,   424,   425,     0,     0,   426,   427,   428,   429,
       0,     0,   430,   431,     0,   432,   433,   434,   435,     0,
       0,     0,     0,     0,   436,   437,     0,     0,     0,   438,
     439,   440,   441,     0,   442,   443,     0,   444,   445,     0,
     446,   447,     0,     0,   448,     0,     0,   449,     0,   450,
       0,   451,   452,     0,     0,     0,     0,     0,     0,   453,
       0,     0,   454,     0,     0,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,     0,   459,   460,     0,   461,
     462,   463,     0,     0,   464,     0,     0,   135,     0,   136,
     137,   138,   139,   140,     0,     0,  2641,     0,     0,   141,
       0,     0,   142,   739,   143,   144,   145,   146,   147,   148,
     149,     0,   150,     0,     0,     0,   151,     0,     0,     0,
     152,     0,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,     0,     0,   160,   161,     0,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,     0,   173,   174,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,     0,   184,   185,   186,
     187,   188,     0,   189,     0,     0,   190,     0,     0,   191,
       0,     0,     0,   192,     0,     0,     0,   193,   194,   195,
       0,     0,   196,     0,     0,     0,     0,   197,   198,     0,
       0,     0,     0,   199,     0,   200,     0,     0,     0,   201,
       0,   202,   203,   204,   205,     0,     0,     0,   206,     0,
       0,   207,   208,   209,     0,     0,     0,   210,     0,   211,
     212,     0,   213,   214,   215,     0,     0,   216,   217,     0,
     218,   219,   220,   221,   222,     0,     0,   223,   224,   225,
       0,     0,   226,   227,     0,   228,   229,   230,     0,     0,
     231,     0,     0,     0,   232,     0,   233,     0,   234,     0,
     235,   236,   237,   238,   239,     0,   240,     0,     0,     0,
     241,   242,     0,   243,     0,     0,   244,   245,     0,     0,
       0,   246,   247,   248,   249,     0,     0,   250,   251,   252,
       0,     0,   253,     0,     0,     0,     0,   254,   255,     0,
       0,     0,   256,     0,   257,   258,     0,   259,   260,     0,
       0,     0,   261,     0,     0,   262,   263,     0,     0,   264,
       0,     0,   265,   266,     0,     0,     0,     0,     0,   267,
     268,     0,   269,     0,   270,     0,   271,   272,     0,     0,
       0,     0,     0,     0,     0,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,     0,   286,
     287,   288,     0,   289,   290,   291,   292,     0,   293,   294,
       0,     0,     0,     0,   295,   296,   297,   298,   299,   300,
       0,     0,   301,   302,     0,   303,     0,   304,     0,   305,
     306,   307,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,     0,   316,   317,   318,   319,     0,     0,
       0,   320,   321,     0,     0,     0,     0,   322,   323,   324,
       0,   325,   326,   327,     0,   328,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,     0,     0,   344,   345,   346,     0,   347,     0,   348,
     349,   350,   351,   352,     0,   353,   354,   355,     0,     0,
     356,     0,     0,     0,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   364,   365,   366,     0,   367,   368,     0,
     369,   370,   371,     0,     0,   372,     0,   373,     0,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,   390,   391,   392,   393,     0,     0,     0,
     394,     0,     0,     0,   395,     0,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,     0,     0,     0,     0,
       0,     0,   405,   406,     0,   407,     0,     0,   408,     0,
       0,   409,   410,   411,     0,     0,   412,   413,     0,   414,
     415,   416,   417,   418,   419,     0,     0,   420,   421,   422,
     423,     0,   424,   425,     0,     0,   426,   427,   428,   429,
       0,     0,   430,   431,     0,   432,   433,   434,   435,     0,
       0,     0,     0,     0,   436,   437,     0,     0,     0,   438,
     439,   440,   441,     0,   442,   443,     0,   444,   445,     0,
     446,   447,     0,     0,   448,     0,     0,   449,     0,   450,
       0,   451,   452,     0,     0,     0,     0,     0,     0,   453,
       0,     0,   454,     0,     0,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,     0,   459,   460,     0,   461,
     462,   463,     0,     0,   464,     0,     0,     0,     0,   135,
       0,   136,   137,   138,   139,   140,  4212,     0,     0,     0,
       0,   141,  4213,   739,   142,     0,   143,   144,   145,   146,
     147,   148,   149,     0,   150,     0,     0,     0,   151,     0,
       0,     0,   152,     0,     0,   153,   154,   155,     0,   156,
       0,   157,   158,     0,     0,   159,     0,     0,   160,   161,
       0,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,     0,   173,   174,   175,   176,
     177,   178,   179,   180,   181,     0,   182,   183,     0,   184,
     185,   186,   187,   188,     0,   189,     0,     0,   190,     0,
       0,   191,     0,     0,     0,   192,     0,     0,     0,   193,
     194,   195,     0,     0,   196,     0,     0,     0,     0,   197,
     198,     0,     0,     0,     0,   199,     0,   200,     0,     0,
       0,   201,     0,   202,   203,   204,   205,     0,     0,     0,
     206,     0,     0,   207,   208,   209,     0,     0,     0,   210,
       0,   211,   212,     0,   213,   214,   215,     0,     0,   216,
     217,     0,   218,   219,   220,   221,   222,     0,     0,   223,
     224,   225,     0,     0,   226,   227,     0,   228,   229,   230,
       0,     0,   231,     0,     0,     0,   232,     0,   233,     0,
     234,     0,   235,   236,   237,   238,   239,     0,   240,     0,
       0,     0,   241,   242,     0,   243,     0,     0,   244,   245,
       0,     0,     0,   246,   247,   248,   249,     0,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,     0,   254,
     255,     0,     0,     0,   256,     0,   257,   258,     0,   259,
     260,     0,     0,     0,   261,     0,     0,   262,   263,     0,
       0,   264,     0,     0,   265,   266,     0,     0,     0,     0,
       0,   267,   268,     0,   269,     0,   270,     0,   271,   272,
       0,     0,     0,     0,     0,     0,     0,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
       0,   286,   287,   288,     0,   289,   290,   291,   292,     0,
     293,   294,     0,     0,     0,     0,   295,   296,   297,   298,
     299,   300,     0,     0,   301,   302,     0,   303,     0,   304,
       0,   305,   306,   307,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,     0,   316,   317,   318,   319,
       0,     0,     0,   320,   321,     0,     0,     0,     0,   322,
     323,   324,     0,   325,   326,   327,     0,   328,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   347,
       0,   348,   349,   350,   351,   352,     0,   353,   354,   355,
       0,     0,   356,     0,     0,     0,   357,   358,   359,   360,
     361,     0,     0,   362,   363,   364,   365,   366,     0,   367,
     368,     0,   369,   370,   371,     0,     0,   372,     0,   373,
       0,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,   390,   391,   392,   393,     0,
       0,     0,   394,     0,     0,     0,   395,     0,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,     0,     0,
       0,     0,     0,     0,   405,   406,     0,   407,     0,     0,
     408,     0,     0,   409,   410,   411,     0,     0,   412,   413,
       0,   414,   415,   416,   417,   418,   419,     0,     0,   420,
     421,   422,   423,     0,   424,   425,     0,     0,   426,   427,
     428,   429,     0,     0,   430,   431,     0,   432,   433,   434,
     435,     0,     0,     0,     0,     0,   436,   437,     0,     0,
       0,   438,   439,   440,   441,     0,   442,   443,     0,   444,
     445,     0,   446,   447,     0,     0,   448,     0,     0,   449,
       0,   450,     0,   451,   452,     0,     0,     0,     0,     0,
       0,   453,     0,     0,   454,     0,     0,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,     0,   459,   460,
       0,   461,   462,   463,     0,     0,   464,     0,     0,   135,
       0,   136,   137,   138,   139,   140,     0,  1066,     0,     0,
       0,   141,     0,     0,   142,   739,   143,   144,   145,   146,
     147,   148,   149,     0,   150,     0,     0,     0,   151,     0,
       0,     0,   152,     0,     0,   153,   154,   155,     0,   156,
       0,   157,   158,     0,     0,   159,     0,     0,   160,   161,
       0,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,     0,   173,   174,   175,   176,
     177,   178,   179,   180,   181,     0,   182,   183,     0,   184,
     185,   186,   187,   188,     0,   189,     0,     0,   190,     0,
       0,   191,     0,     0,     0,   192,     0,     0,     0,   193,
     194,   195,     0,     0,   196,     0,     0,     0,     0,   197,
     198,     0,     0,     0,     0,   199,     0,   200,     0,     0,
       0,   201,     0,   202,   203,   204,   205,     0,     0,     0,
     206,     0,     0,   207,   208,   209,     0,     0,     0,   210,
       0,   211,   212,     0,   213,   214,   215,     0,     0,   216,
     217,     0,   218,   219,   220,   221,   222,     0,     0,   223,
     224,   225,     0,     0,   226,   227,     0,   228,   229,   230,
       0,     0,   231,     0,     0,     0,   232,     0,   233,     0,
     234,     0,   235,   236,   237,   238,   239,     0,   240,     0,
       0,     0,   241,   242,     0,   243,     0,     0,   244,   245,
       0,     0,     0,   246,   247,   248,   249,     0,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,     0,   254,
     255,     0,  1259,     0,   256,     0,   257,   258,     0,   259,
     260,     0,     0,     0,   261,     0,     0,   262,   263,     0,
       0,   264,     0,     0,   265,   266,     0,     0,     0,     0,
       0,   267,   268,     0,   269,     0,   270,     0,   271,   272,
       0,     0,     0,     0,     0,     0,     0,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
       0,   286,   287,   288,     0,   289,   290,   291,   292,     0,
     293,   294,     0,     0,     0,     0,   295,   296,   297,   298,
     299,   300,     0,     0,   301,   302,     0,   303,     0,   304,
       0,   305,   306,   307,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,     0,   316,   317,   318,   319,
       0,     0,     0,   320,   321,     0,     0,     0,     0,   322,
     323,   324,     0,   325,   326,   327,     0,   328,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   347,
       0,   348,   349,   350,   351,   352,     0,   353,   354,   355,
       0,     0,   356,     0,     0,     0,   357,   358,   359,   360,
     361,     0,     0,   362,   363,   364,   365,   366,     0,   367,
     368,     0,   369,   370,   371,     0,     0,   372,     0,   373,
       0,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,   390,   391,   392,   393,     0,
       0,     0,   394,     0,     0,     0,   395,     0,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,     0,     0,
       0,     0,     0,     0,   405,   406,     0,   407,     0,     0,
     408,     0,     0,   409,   410,   411,     0,     0,   412,   413,
       0,   414,   415,   416,   417,   418,   419,     0,     0,   420,
     421,   422,   423,     0,   424,   425,     0,     0,   426,   427,
     428,   429,     0,     0,   430,   431,     0,   432,   433,   434,
     435,     0,     0,     0,     0,     0,   436,   437,     0,     0,
       0,   438,   439,   440,   441,     0,   442,   443,     0,   444,
     445,     0,   446,   447,     0,     0,   448,     0,     0,   449,
       0,   450,     0,   451,   452,     0,     0,     0,     0,     0,
       0,   453,     0,     0,   454,     0,     0,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,     0,   459,   460,
       0,   461,   462,   463,     0,     0,   464,     0,     0,   135,
       0,   136,   137,   138,   139,   140,     0,     0,     0,     0,
       0,   141,     0,     0,   142,   512,   143,   144,   145,   146,
     147,   148,   149,     0,   150,     0,     0,     0,   151,     0,
       0,     0,   152,     0,     0,   153,   154,   155,     0,   156,
       0,   157,   158,     0,     0,   159,     0,     0,   160,   161,
       0,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,     0,   173,   174,   175,   176,
     177,   178,   179,   180,   181,     0,   182,   183,     0,   184,
     185,   186,   187,   188,     0,   189,     0,     0,   190,     0,
       0,   191,     0,     0,     0,   192,     0,     0,     0,   193,
     194,   195,     0,     0,   196,     0,     0,     0,     0,   197,
     198,     0,     0,     0,     0,   199,     0,   200,     0,     0,
       0,   201,     0,   202,   203,   204,   205,     0,     0,     0,
     206,     0,     0,   207,   208,   209,     0,     0,     0,   210,
       0,   211,   212,     0,   213,   214,   215,     0,     0,   216,
     217,     0,   218,   219,   220,   221,   222,     0,     0,   223,
     224,   225,     0,     0,   226,   227,     0,   228,   229,   230,
       0,     0,   231,     0,     0,     0,   232,     0,   233,     0,
     234,     0,   235,   236,   237,   238,   239,     0,   240,     0,
       0,     0,   241,   242,     0,   243,     0,     0,   244,   245,
       0,     0,     0,   246,   247,   248,   249,     0,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,     0,   254,
     255,     0,     0,     0,   256,     0,   257,   258,     0,   259,
     260,     0,     0,     0,   261,     0,     0,   262,   263,     0,
       0,   264,     0,     0,   265,   266,     0,     0,     0,     0,
       0,   267,   268,     0,   269,     0,   270,     0,   271,   272,
       0,     0,     0,     0,     0,     0,     0,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
       0,   286,   287,   288,     0,   289,   290,   291,   292,     0,
     293,   294,     0,     0,     0,     0,   295,   296,   297,   298,
     299,   300,     0,     0,   301,   302,     0,   303,     0,   304,
       0,   305,   306,   307,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,     0,   316,   317,   318,   319,
       0,     0,     0,   320,   321,     0,     0,     0,     0,   322,
     323,   324,     0,   325,   326,   327,     0,   328,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,     0,     0,   344,   345,   346,     0,   347,
       0,   348,   349,   350,   351,   352,     0,   353,   354,   355,
       0,     0,   356,     0,     0,     0,   357,   358,   359,   360,
     361,     0,     0,   362,   363,   364,   365,   366,     0,   367,
     368,     0,   369,   370,   371,     0,     0,   372,     0,   373,
       0,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,   390,   391,   392,   393,     0,
       0,     0,   394,     0,     0,     0,   395,     0,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,     0,     0,
       0,     0,     0,     0,   405,   406,     0,   407,     0,     0,
     408,     0,     0,   409,   410,   411,     0,     0,   412,   413,
       0,   414,   415,   416,   417,   418,   419,     0,     0,   420,
     421,   422,   423,     0,   424,   425,     0,     0,   426,   427,
     428,   429,     0,     0,   430,   431,     0,   432,   433,   434,
     435,     0,     0,     0,     0,     0,   436,   437,     0,     0,
       0,   438,   439,   440,   441,     0,   442,   443,     0,   444,
     445,     0,   446,   447,     0,     0,   448,     0,     0,   449,
       0,   450,     0,   451,   452,     0,     0,     0,     0,     0,
       0,   453,     0,     0,   454,     0,     0,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,     0,   459,   460,
       0,   461,   462,   463,     0,     0,   464,     0,     0,     0,
       0,   135,  2168,   136,   137,   138,   139,   140,     0,     0,
       0,     0,     0,   141,     0,   512,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,   150,     0,     0,     0,
     151,     0,     0,     0,   152,     0,     0,   153,   154,   155,
       0,   156,     0,   157,   158,     0,     0,   159,     0,     0,
     160,   161,     0,   162,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,     0,   182,   183,
       0,   184,   185,   186,   187,   188,     0,   189,     0,     0,
     190,     0,     0,   191,     0,     0,     0,   192,     0,     0,
       0,   193,   194,   195,     0,     0,   196,     0,     0,     0,
       0,   197,   198,     0,     0,     0,     0,   199,     0,   200,
       0,     0,     0,   201,     0,   202,   203,   204,   205,     0,
       0,     0,   206,     0,     0,   207,   208,   209,     0,     0,
       0,   210,     0,   211,   212,     0,   213,   214,   215,     0,
       0,   216,   217,     0,   218,   219,   220,   221,   222,     0,
       0,   223,   224,   225,     0,     0,   226,   227,     0,   228,
     229,   230,     0,     0,   231,     0,     0,     0,   232,     0,
     233,     0,   234,     0,   235,   236,   237,   238,   239,     0,
     240,     0,     0,     0,   241,   242,     0,   243,     0,     0,
     244,   245,     0,     0,     0,   246,   247,   248,   249,     0,
       0,   250,   251,   252,     0,     0,   253,     0,     0,     0,
       0,   254,   255,     0,     0,     0,   256,     0,   257,   258,
       0,   259,   260,     0,     0,     0,   261,     0,     0,   262,
     263,     0,     0,   264,     0,     0,   265,   266,     0,     0,
       0,     0,     0,   267,   268,     0,   269,     0,   270,     0,
     271,   272,     0,     0,     0,     0,     0,     0,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,   287,   288,     0,   289,   290,   291,
     292,     0,   293,   294,     0,     0,     0,     0,   295,   296,
     297,   298,   299,   300,     0,     0,   301,   302,     0,   303,
       0,   304,     0,   305,   306,   307,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,     0,   316,   317,
     318,   319,     0,     0,     0,   320,   321,     0,     0,     0,
       0,   322,   323,   324,     0,   325,   326,   327,     0,   328,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   347,     0,   348,   349,   350,   351,   352,     0,   353,
     354,   355,     0,     0,   356,     0,     0,     0,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,   365,   366,
       0,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,   373,     0,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,   390,   391,   392,
     393,     0,     0,     0,   394,     0,     0,     0,   395,     0,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
       0,     0,     0,     0,     0,     0,   405,   406,     0,   407,
       0,     0,   408,     0,     0,   409,   410,   411,     0,     0,
     412,   413,     0,   414,   415,   416,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,   424,   425,     0,     0,
     426,   427,   428,   429,     0,     0,   430,   431,     0,   432,
     433,   434,   435,     0,     0,     0,     0,     0,   436,   437,
       0,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,   444,   445,     0,   446,   447,     0,     0,   448,     0,
       0,   449,     0,   450,     0,   451,   452,     0,     0,     0,
       0,     0,     0,   453,     0,     0,   454,     0,     0,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,     0,
     459,   460,     0,   461,   462,   463,     0,     0,   464,     0,
       0,   135,     0,   136,   137,   138,   139,   140,     0,  2412,
       0,     0,     0,   141,     0,     0,   142,  2413,   143,   144,
     145,   146,   147,   148,   149,     0,   150,     0,     0,     0,
     151,     0,     0,     0,   152,     0,     0,   153,   154,   155,
       0,   156,     0,   157,   158,     0,     0,   159,     0,     0,
     160,   161,     0,   162,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,     0,   182,   183,
       0,   184,   185,   186,   187,   188,     0,   189,     0,     0,
     190,     0,     0,   191,     0,     0,     0,   192,     0,     0,
       0,   193,   194,   195,     0,     0,   196,     0,     0,     0,
       0,   197,   198,     0,     0,     0,     0,   199,     0,   200,
       0,     0,     0,   201,     0,   202,   203,   204,   205,     0,
       0,     0,   206,     0,     0,   207,   208,   209,     0,     0,
       0,   210,     0,   211,   212,     0,   213,   214,   215,     0,
       0,   216,   217,     0,   218,   219,   220,   221,   222,     0,
       0,   223,   224,   225,     0,     0,   226,   227,     0,   228,
     229,   230,     0,     0,   231,     0,     0,     0,   232,     0,
     233,     0,   234,     0,   235,   236,   237,   238,   239,     0,
     240,     0,     0,     0,   241,   242,     0,   243,     0,     0,
     244,   245,     0,     0,     0,   246,   247,   248,   249,     0,
       0,   250,   251,   252,     0,     0,   253,     0,     0,     0,
       0,   254,   255,     0,     0,     0,   256,     0,   257,   258,
       0,   259,   260,     0,     0,     0,   261,     0,     0,   262,
     263,     0,     0,   264,     0,     0,   265,   266,     0,     0,
       0,     0,     0,   267,   268,     0,   269,     0,   270,     0,
     271,   272,     0,     0,     0,     0,     0,     0,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,   287,   288,     0,   289,   290,   291,
     292,     0,   293,   294,     0,     0,     0,     0,   295,   296,
     297,   298,   299,   300,     0,     0,   301,   302,     0,   303,
       0,   304,     0,   305,   306,   307,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,     0,   316,   317,
     318,   319,     0,     0,     0,   320,   321,     0,     0,     0,
       0,   322,   323,   324,     0,   325,   326,   327,     0,   328,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   347,     0,   348,   349,   350,   351,   352,     0,   353,
     354,   355,     0,     0,   356,     0,     0,     0,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,   365,   366,
       0,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,   373,     0,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,   390,   391,   392,
     393,     0,     0,     0,   394,     0,     0,     0,   395,     0,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
       0,     0,     0,     0,     0,     0,   405,   406,     0,   407,
       0,     0,   408,     0,     0,   409,   410,   411,     0,     0,
     412,   413,     0,   414,   415,   416,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,   424,   425,     0,     0,
     426,   427,   428,   429,     0,     0,   430,   431,     0,   432,
     433,   434,   435,     0,     0,     0,     0,     0,   436,   437,
       0,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,   444,   445,     0,   446,   447,     0,     0,   448,     0,
       0,   449,     0,   450,     0,   451,   452,     0,     0,     0,
       0,     0,     0,   453,     0,     0,   454,     0,     0,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,     0,
     459,   460,     0,   461,   462,   463,     0,     0,   464,     0,
       0,     0,     0,   135,     0,   136,   137,   138,   139,   140,
       0,     0,     0,     0,     0,   141,  4213,   739,   142,     0,
     143,   144,   145,   146,   147,   148,   149,     0,   150,     0,
       0,     0,   151,     0,     0,     0,   152,     0,     0,   153,
     154,   155,     0,   156,     0,   157,   158,     0,     0,   159,
       0,     0,   160,   161,     0,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,     0,
     173,   174,   175,   176,   177,   178,   179,   180,   181,     0,
     182,   183,     0,   184,   185,   186,   187,   188,     0,   189,
       0,     0,   190,     0,     0,   191,     0,     0,     0,   192,
       0,     0,     0,   193,   194,   195,     0,     0,   196,     0,
       0,     0,     0,   197,   198,     0,     0,     0,     0,   199,
       0,   200,     0,     0,     0,   201,     0,   202,   203,   204,
     205,     0,     0,     0,   206,     0,     0,   207,   208,   209,
       0,     0,     0,   210,     0,   211,   212,     0,   213,   214,
     215,     0,     0,   216,   217,     0,   218,   219,   220,   221,
     222,     0,     0,   223,   224,   225,     0,     0,   226,   227,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
     232,     0,   233,     0,   234,     0,   235,   236,   237,   238,
     239,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,     0,   244,   245,     0,     0,     0,   246,   247,   248,
     249,     0,     0,   250,   251,   252,     0,     0,   253,     0,
       0,     0,     0,   254,   255,     0,     0,     0,   256,     0,
     257,   258,     0,   259,   260,     0,     0,     0,   261,     0,
       0,   262,   263,     0,     0,   264,     0,     0,   265,   266,
       0,     0,     0,     0,     0,   267,   268,     0,   269,     0,
     270,     0,   271,   272,     0,     0,     0,     0,     0,     0,
       0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,     0,   286,   287,   288,     0,   289,
     290,   291,   292,     0,   293,   294,     0,     0,     0,     0,
     295,   296,   297,   298,   299,   300,     0,     0,   301,   302,
       0,   303,     0,   304,     0,   305,   306,   307,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,     0,
     316,   317,   318,   319,     0,     0,     0,   320,   321,     0,
       0,     0,     0,   322,   323,   324,     0,   325,   326,   327,
       0,   328,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   347,     0,   348,   349,   350,   351,   352,
       0,   353,   354,   355,     0,     0,   356,     0,     0,     0,
     357,   358,   359,   360,   361,     0,     0,   362,   363,   364,
     365,   366,     0,   367,   368,     0,   369,   370,   371,     0,
       0,   372,     0,   373,     0,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,   390,
     391,   392,   393,     0,     0,     0,   394,     0,     0,     0,
     395,     0,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,     0,     0,     0,     0,     0,     0,   405,   406,
       0,   407,     0,     0,   408,     0,     0,   409,   410,   411,
       0,     0,   412,   413,     0,   414,   415,   416,   417,   418,
     419,     0,     0,   420,   421,   422,   423,     0,   424,   425,
       0,     0,   426,   427,   428,   429,     0,     0,   430,   431,
       0,   432,   433,   434,   435,     0,     0,     0,     0,     0,
     436,   437,     0,     0,     0,   438,   439,   440,   441,     0,
     442,   443,     0,   444,   445,     0,   446,   447,     0,     0,
     448,     0,     0,   449,     0,   450,     0,   451,   452,     0,
       0,     0,     0,     0,     0,   453,     0,     0,   454,     0,
       0,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,     0,   459,   460,     0,   461,   462,   463,     0,     0,
     464,     0,     0,   135,     0,   136,   137,   138,   139,   140,
       0,     0,     0,     0,     0,   141,     0,     0,   142,   512,
     143,   144,   145,   146,   147,   148,   149,     0,   150,     0,
       0,     0,   151,     0,     0,     0,   152,     0,     0,   153,
     154,   155,     0,   156,     0,   157,   158,     0,     0,   159,
       0,     0,   160,   161,     0,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,     0,
     173,   174,   175,   176,   177,   178,   179,   180,   181,     0,
     182,   183,     0,   184,   185,   186,   187,   188,     0,   189,
       0,     0,   190,     0,     0,   191,     0,     0,     0,   192,
       0,     0,     0,   193,   194,   195,     0,     0,   196,     0,
       0,     0,     0,   197,   198,     0,     0,     0,     0,   199,
       0,   200,     0,     0,     0,   201,     0,   202,   203,   204,
     205,     0,     0,     0,   206,     0,     0,   207,   208,   209,
       0,     0,     0,   210,     0,   211,   212,     0,   213,   214,
     215,     0,     0,   216,   217,     0,   218,   219,   220,   221,
     222,     0,     0,   223,   578,   225,     0,     0,   226,   227,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
     232,     0,   233,     0,   234,     0,   235,   236,   237,   238,
     239,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,     0,   244,   245,     0,     0,     0,   246,   247,   248,
     249,     0,     0,   250,   251,   252,     0,     0,   253,     0,
       0,     0,     0,   254,   255,     0,     0,     0,   256,     0,
     257,   258,     0,   259,   260,     0,     0,     0,   261,     0,
       0,   262,   263,     0,     0,   264,     0,     0,   265,   266,
       0,     0,     0,     0,     0,   267,   268,     0,   269,     0,
     270,     0,   271,   272,     0,     0,     0,     0,     0,     0,
       0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,     0,   286,   287,   288,     0,   289,
     290,   291,   292,     0,   293,   294,     0,     0,     0,     0,
     295,   296,   297,   298,   299,   300,     0,     0,   301,   302,
       0,   303,     0,   304,     0,   305,   306,   307,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,     0,
     316,   317,   318,   319,     0,     0,     0,   320,   321,     0,
       0,     0,     0,   322,   323,   324,     0,   325,   326,   327,
       0,   328,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,   330,   331,     0,   332,   333,   334,   579,   336,
     337,   338,   339,   340,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   347,     0,   348,   349,   350,   351,   352,
       0,   353,   354,   355,     0,     0,   356,     0,     0,     0,
     357,   358,   359,   360,   361,     0,     0,   362,   363,   364,
     365,   366,     0,   367,   368,     0,   369,   370,   371,     0,
       0,   372,     0,   373,     0,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,   390,
     391,   392,   393,     0,     0,     0,   394,     0,     0,     0,
     395,     0,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,     0,     0,     0,     0,     0,     0,   405,   406,
       0,   407,     0,     0,   408,     0,     0,   409,   410,   411,
       0,     0,   412,   413,     0,   414,   415,   416,   417,   418,
     419,     0,     0,   420,   421,   422,   423,     0,   424,   425,
       0,     0,   426,   427,   428,   429,     0,     0,   430,   431,
       0,   432,   433,   434,   435,     0,     0,     0,     0,     0,
     436,   437,     0,     0,     0,   438,   439,   440,   441,     0,
     442,   443,     0,   444,   445,     0,   446,   447,     0,     0,
     448,     0,     0,   449,     0,   450,     0,   451,   452,     0,
       0,     0,     0,     0,     0,   453,     0,     0,   454,     0,
       0,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,     0,   459,   460,     0,   461,   462,   463,     0,     0,
     464,     0,     0,   135,     0,   136,   137,   138,   139,   140,
       0,     0,     0,     0,     0,   141,     0,     0,   142,   512,
     143,   144,   145,   146,   147,   148,   149,     0,   150,     0,
       0,     0,   151,     0,     0,     0,   152,     0,     0,   153,
     154,   155,     0,   156,     0,   157,   158,     0,     0,   159,
       0,     0,   160,   161,     0,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,     0,
     173,   174,   175,   176,   177,   178,   179,   180,   181,     0,
     182,   183,     0,   184,   185,   186,   187,   188,     0,   189,
       0,     0,   190,     0,     0,   191,     0,     0,     0,   192,
       0,     0,     0,   193,   194,   195,     0,     0,   196,     0,
       0,     0,     0,   197,   198,     0,     0,     0,     0,   199,
       0,   200,     0,     0,     0,   201,     0,   202,   203,   204,
     205,     0,     0,     0,   206,     0,     0,   207,   208,   209,
       0,     0,     0,   210,     0,   211,   212,     0,   213,   214,
     215,     0,     0,   216,   217,     0,   218,   219,   220,   221,
     222,     0,     0,   223,   224,   225,     0,     0,   226,   227,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
     232,     0,   233,     0,   234,     0,   235,   236,   237,   238,
     239,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,     0,   244,   245,     0,     0,     0,   246,   247,   248,
     249,     0,     0,   250,   251,   252,     0,     0,   253,     0,
       0,     0,     0,   254,   255,     0,     0,     0,   256,     0,
     257,   258,     0,   259,   260,     0,     0,     0,   261,     0,
       0,   262,   263,     0,     0,   264,     0,     0,   265,   266,
       0,     0,     0,     0,     0,   267,   268,     0,   269,     0,
     270,     0,   271,   272,     0,     0,     0,     0,     0,     0,
       0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,     0,   286,   287,   288,     0,   289,
     290,   291,   292,     0,   293,   294,     0,     0,     0,     0,
     295,   296,   297,   298,   299,   300,     0,     0,   301,   302,
       0,   303,     0,   304,     0,   305,   306,   307,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,     0,
     316,   317,   318,   319,     0,     0,     0,   320,   321,     0,
       0,     0,     0,   322,   323,   324,     0,   325,   326,   327,
       0,   328,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   347,     0,   348,   349,   350,   351,   352,
       0,   353,   354,   355,     0,     0,   356,     0,     0,     0,
     357,   358,   359,   360,   361,     0,     0,   362,   363,   364,
     365,   366,     0,   367,   368,     0,   369,   370,   371,     0,
       0,   372,     0,   373,     0,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,   390,
     391,   392,   393,     0,     0,     0,   394,     0,     0,     0,
     395,     0,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,     0,     0,     0,     0,     0,     0,   405,   406,
       0,   407,     0,     0,   408,     0,     0,   409,   410,   411,
       0,     0,   412,   413,     0,   414,   415,   416,   417,   418,
     419,     0,     0,   420,   421,   422,   423,     0,   424,   425,
       0,     0,   426,   427,   428,   429,     0,     0,   430,   431,
       0,   432,   433,   434,   435,     0,     0,     0,     0,     0,
     436,   437,     0,     0,     0,   438,   439,   440,   441,     0,
     442,   443,     0,   444,   445,     0,   446,   447,     0,     0,
     448,     0,     0,   449,     0,   450,     0,   451,   452,     0,
       0,     0,     0,     0,     0,   453,     0,     0,   454,     0,
       0,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,     0,   459,   460,     0,   461,   462,   463,     0,     0,
     464,     0,     0,   135,     0,   136,   137,   138,   139,   140,
       0,     0,     0,     0,     0,   141,     0,     0,   142,   739,
     143,   144,   145,   146,   147,   148,   149,     0,   150,     0,
       0,     0,   151,     0,     0,     0,   152,     0,     0,   153,
     154,   155,     0,   156,     0,   157,   158,     0,     0,   159,
       0,     0,   160,   161,     0,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,     0,
     173,   174,   175,   176,   177,   178,   179,   180,   181,     0,
     182,   183,     0,   184,   185,   186,   187,   188,     0,   189,
       0,     0,   190,     0,     0,   191,     0,     0,     0,   192,
       0,     0,     0,   193,   194,   195,     0,     0,   196,     0,
       0,     0,     0,   197,   198,     0,     0,     0,     0,   199,
       0,   200,     0,     0,     0,   201,     0,   202,   203,   204,
     205,     0,     0,     0,   206,     0,     0,   207,   208,   209,
       0,     0,     0,   210,     0,   211,   212,     0,   213,   214,
     215,     0,     0,   216,   217,     0,   218,   219,   220,   221,
     222,     0,     0,   223,   224,   225,     0,     0,   226,   227,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
     232,     0,   233,     0,   234,     0,   235,   236,   237,   238,
     239,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,     0,   244,   245,     0,     0,     0,   246,   247,   248,
     249,     0,     0,   250,   251,   252,     0,     0,   253,     0,
       0,     0,     0,   254,   255,     0,     0,     0,   256,     0,
     257,   258,     0,   259,   260,     0,     0,     0,   261,     0,
       0,   262,   263,     0,     0,   264,     0,     0,   265,   266,
       0,     0,     0,     0,     0,   267,   268,     0,   269,     0,
     270,     0,   271,   272,     0,     0,     0,     0,     0,     0,
       0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,     0,   286,   287,   288,     0,   289,
     290,   291,   292,     0,   293,   294,     0,     0,     0,     0,
     295,   296,   297,   298,   299,   300,     0,     0,   301,   302,
       0,   303,     0,   304,     0,   305,   306,   307,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,     0,
     316,   317,   318,   319,     0,     0,     0,   320,   321,     0,
       0,     0,     0,   322,   323,   324,     0,   325,   326,   327,
       0,   328,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   347,     0,   348,   349,   350,   351,   352,
       0,   353,   354,   355,     0,     0,   356,     0,     0,     0,
     357,   358,   359,   360,   361,     0,     0,   362,   363,   364,
     365,   366,     0,   367,   368,     0,   369,   370,   371,     0,
       0,   372,     0,   373,     0,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,   390,
     391,   392,   393,     0,     0,     0,   394,     0,     0,     0,
     395,     0,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,     0,     0,     0,     0,     0,     0,   405,   406,
       0,   407,     0,     0,   408,     0,     0,   409,   410,   411,
       0,     0,   412,   413,     0,   414,   415,   416,   417,   418,
     419,     0,     0,   420,   421,   422,   423,     0,   424,   425,
       0,     0,   426,   427,   428,   429,     0,     0,   430,   431,
       0,   432,   433,   434,   435,     0,     0,     0,     0,     0,
     436,   437,     0,     0,     0,   438,   439,   440,   441,     0,
     442,   443,     0,   444,   445,     0,   446,   447,     0,     0,
     448,     0,     0,   449,     0,   450,     0,   451,   452,     0,
       0,     0,     0,     0,     0,   453,     0,     0,   454,     0,
       0,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,     0,   459,   460,     0,   461,   462,   463,     0,     0,
     464,     0,     0,   135,     0,   136,   137,   138,   139,   140,
       0,     0,     0,     0,     0,   141,     0,     0,   142,  2413,
     143,   144,   145,   146,   147,   148,   149,     0,   150,     0,
       0,     0,   151,     0,     0,     0,   152,     0,     0,   153,
     154,   155,     0,   156,     0,   157,   158,     0,     0,   159,
       0,     0,   160,   161,     0,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,     0,
     173,   174,   175,   176,   177,   178,   179,   180,   181,     0,
     182,   183,     0,   184,   185,   186,   187,   188,     0,   189,
       0,     0,   190,     0,     0,   191,     0,     0,     0,   192,
       0,     0,     0,   193,   194,   195,     0,     0,   196,     0,
       0,     0,     0,   197,   198,     0,     0,     0,     0,   199,
       0,   200,     0,     0,     0,   201,     0,   202,   203,   204,
     205,     0,     0,     0,   206,     0,     0,   207,   208,   209,
       0,     0,     0,   210,     0,   211,   212,     0,   213,   214,
     215,     0,     0,   216,   217,     0,   218,   219,   220,   221,
     222,     0,     0,   223,   224,   225,     0,     0,   226,   227,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
     232,     0,   233,     0,   234,     0,   235,   236,   237,   238,
     239,     0,   240,     0,     0,     0,   241,   242,     0,   243,
       0,     0,   244,   245,     0,     0,     0,   246,   247,   248,
     249,     0,     0,   250,   251,   252,     0,     0,   253,     0,
       0,     0,     0,   254,   255,     0,     0,     0,   256,     0,
     257,   258,     0,   259,   260,     0,     0,     0,   261,     0,
       0,   262,   263,     0,     0,   264,     0,     0,   265,   266,
     590,     0,     0,     0,     0,   267,   268,     0,   269,     0,
     270,     0,   271,   272,     0,     0,     0,     0,     0,     0,
       0,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,     0,   286,   287,   288,     0,   289,
     290,   291,   292,     0,   293,   294,     0,     0,     0,     0,
     295,   296,   297,   298,   299,   300,     0,     0,   301,   302,
       0,   303,     0,   304,     0,   305,   306,   307,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,     0,
     316,   317,   318,   319,     0,     0,     0,   320,   321,     0,
       0,     0,     0,   322,   323,   324,     0,   325,   326,   327,
       0,   328,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,     0,     0,   344,
     345,   346,     0,   347,     0,   348,   349,   350,   351,   352,
       0,   353,   354,   355,     0,     0,   356,     0,     0,     0,
     357,   358,   359,   360,   361,     0,     0,   362,   363,   364,
     365,   366,     0,   367,   368,     0,   369,   370,   371,     0,
       0,   372,     0,   373,     0,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,   390,
     391,   392,   393,     0,     0,     0,   394,     0,     0,     0,
     395,     0,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,     0,     0,     0,     0,     0,     0,   405,   406,
       0,   407,     0,     0,   408,     0,     0,   409,   410,   411,
       0,     0,   412,   413,     0,   414,   415,   416,   417,   418,
     419,     0,     0,   420,   421,   422,   423,     0,   424,   425,
       0,     0,   426,   427,   428,   429,     0,   132,   430,   431,
       0,   432,   433,   434,   435,     0,     0,     0,     0,     0,
     436,   437,     0,     0,     0,   438,   439,   440,   441,     0,
     442,   443,     0,   444,   445,     0,   446,   447,     0,     0,
     448,     0,     0,   449,     0,   450,     0,   451,   452,     0,
       0,     0,     0,     0,     0,   453,     0,     0,   454,     0,
       0,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,     0,   459,   460,     0,   461,   462,   463,     0,     0,
     464,     0,   135,     0,   136,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   142,  1608,   143,
     144,   145,   146,   147,   148,   149,     0,   150,     0,     0,
       0,   151,     0,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,     0,
       0,   160,   161,     0,   162,   163,     0,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,     0,   184,   185,   186,   187,   188,     0,   189,     0,
       0,   190,     0,     0,   191,     0,     0,     0,   192,     0,
       0,     0,   193,   194,   195,     0,     0,   196,     0,     0,
       0,     0,   197,   198,     0,     0,     0,     0,   199,     0,
     200,     0,     0,     0,   201,     0,   202,   203,   204,   205,
       0,     0,     0,   206,     0,     0,   207,   208,   209,     0,
       0,     0,   210,     0,   211,   212,     0,   213,   214,   215,
       0,     0,   216,   217,     0,   218,   219,   220,   221,   222,
       0,     0,   223,   224,   225,     0,     0,   226,   227,     0,
     228,   229,   230,     0,     0,   231,     0,     0,     0,   232,
       0,   233,     0,   234,     0,   235,   236,   237,   238,   239,
       0,   240,     0,     0,     0,   241,   242,     0,   243,     0,
       0,   244,   245,     0,     0,     0,   246,   247,   248,   249,
       0,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,     0,   254,   255,     0,     0,     0,   256,     0,   257,
     258,     0,   259,   260,     0,     0,     0,   261,     0,     0,
     262,   263,     0,     0,   264,     0,     0,   265,   266,   590,
       0,     0,     0,     0,   267,   268,     0,   269,     0,   270,
       0,   271,   272,     0,     0,     0,     0,     0,     0,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,   288,     0,   289,   290,
     291,   292,     0,   293,   294,     0,     0,     0,     0,   295,
     296,   297,   298,   299,   300,     0,     0,   301,   302,     0,
     303,     0,   304,     0,   305,   306,   307,   308,   309,   310,
     311,   312,   313,     0,     0,   314,   315,     0,     0,   316,
     317,   318,   319,     0,     0,     0,   320,   321,     0,     0,
       0,     0,   322,   323,   324,     0,   325,   326,   327,     0,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   347,     0,   348,   349,   350,   351,   352,     0,
     353,   354,   355,     0,     0,   356,     0,     0,     0,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,   365,
     366,     0,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,   373,     0,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,   390,   391,
     392,   393,     0,     0,     0,   394,     0,     0,     0,   395,
       0,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,     0,     0,     0,     0,     0,     0,   405,   406,     0,
     407,     0,     0,   408,     0,     0,   409,   410,   411,     0,
       0,   412,   413,     0,   414,   415,   416,   417,   418,   419,
       0,     0,   420,   421,   422,   423,     0,   424,   425,     0,
       0,   426,   427,   428,   429,     0,   132,   430,   431,     0,
     432,   433,   434,   435,     0,     0,     0,     0,     0,   436,
     437,     0,     0,     0,   438,   439,   440,   441,     0,   442,
     443,     0,   444,   445,     0,   446,   447,     0,     0,   448,
       0,     0,   449,     0,   450,     0,   451,   452,     0,     0,
       0,     0,     0,     0,   453,     0,     0,   454,     0,     0,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
       0,   459,   460,     0,   461,   462,   463,     0,     0,   464,
       0,   135,     0,   136,   137,   138,   139,   140,     0,     0,
       0,     0,     0,   141,     0,     0,   142,  2681,   143,   144,
     145,   146,   147,   148,   149,     0,   150,     0,     0,     0,
     151,     0,     0,     0,   152,     0,     0,   153,   154,   155,
       0,   156,     0,   157,   158,     0,     0,   159,     0,     0,
     160,   161,     0,   162,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,     0,   182,   183,
       0,   184,   185,   186,   187,   188,     0,   189,     0,     0,
     190,     0,     0,   191,     0,     0,     0,   192,     0,     0,
       0,   193,   194,   195,     0,     0,   196,     0,     0,     0,
       0,   197,   198,     0,     0,     0,     0,   199,     0,   200,
       0,     0,     0,   201,     0,   202,   203,   204,   205,     0,
       0,     0,   206,     0,     0,   207,   208,   209,     0,     0,
       0,   210,     0,   211,   212,     0,   213,   214,   215,     0,
       0,   216,   217,     0,   218,   219,   220,   221,   222,     0,
       0,   223,   224,   225,     0,     0,   226,   227,     0,   228,
     229,   230,     0,     0,   231,     0,     0,     0,   232,     0,
     233,     0,   234,     0,   235,   236,   237,   238,   239,     0,
     240,     0,     0,     0,   241,   242,     0,   243,     0,     0,
     244,   245,     0,     0,     0,   246,   247,   248,   249,     0,
       0,   250,   251,   252,     0,     0,   253,     0,     0,     0,
       0,   254,   255,     0,     0,     0,   256,     0,   257,   258,
       0,   259,   260,     0,     0,     0,   261,     0,     0,   262,
     263,     0,     0,   264,     0,     0,   265,   266,   590,     0,
       0,     0,     0,   267,   268,     0,   269,     0,   270,     0,
     271,   272,     0,     0,     0,     0,     0,     0,     0,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,     0,   286,   287,   288,     0,   289,   290,   291,
     292,     0,   293,   294,     0,     0,     0,     0,   295,   296,
     297,   298,   299,   300,     0,     0,   301,   302,     0,   303,
       0,   304,     0,   305,   306,   307,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,     0,   316,   317,
     318,   319,     0,     0,     0,   320,   321,     0,     0,     0,
       0,   322,   323,   324,     0,   325,   326,   327,     0,   328,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,     0,     0,   344,   345,   346,
       0,   347,     0,   348,   349,   350,   351,   352,     0,   353,
     354,   355,     0,     0,   356,     0,     0,     0,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,   365,   366,
       0,   367,   368,     0,   369,   370,   371,     0,     0,   372,
       0,   373,     0,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,   390,   391,   392,
     393,     0,     0,     0,   394,     0,     0,     0,   395,     0,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
       0,     0,     0,     0,     0,     0,   405,   406,     0,   407,
       0,     0,   408,     0,     0,   409,   410,   411,     0,     0,
     412,   413,     0,   414,   415,   416,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,   424,   425,     0,     0,
     426,   427,   428,   429,     0,   132,   430,   431,     0,   432,
     433,   434,   435,     0,     0,     0,     0,     0,   436,   437,
       0,     0,     0,   438,   439,   440,   441,     0,   442,   443,
       0,   444,   445,     0,   446,   447,     0,     0,   448,     0,
       0,   449,     0,   450,     0,   451,   452,     0,     0,     0,
       0,     0,     0,   453,     0,     0,   454,     0,     0,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,     0,
     459,   460,     0,   461,   462,   463,     0,     0,   464,     0,
     135,     0,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,     0,  3288,   143,   144,   145,
     146,   147,   148,     0,     0,  -327,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,     0,     0,     0,     0,   159,  3701,     0,   160,
     161,     0,   162,     0,     0,     0,     0,   165,   166,   167,
    3702,   169,   170,     0,   171,   172,     0,   173,     0,   175,
       0,   177,   178,   179,   180,   181,     0,   182,   183,     0,
     184,   185,   186,     0,   188,     0,   189,     0,     0,   190,
       0,     0,   191,     0,     0,     0,   192,     0,     0,     0,
     193,   194,   195,     0,     0,   196,     0,     0,     0,     0,
     197,     0,     0,     0,     0,     0,   199,     0,   200,     0,
       0,     0,   201,     0,   202,   203,   204,   205,     0,     0,
       0,     0,     0,     0,   207,   208,   209,     0,     0,     0,
     210,     0,     0,   212,     0,   213,   214,   215,     0,     0,
     216,   217,     0,   218,   219,   220,   221,     0,     0,     0,
     223,   224,   225,     0,     0,   226,   227,  3703,   228,   229,
     230,     0,     0,     0,     0,     0,     0,   232,     0,   233,
       0,   234,     0,   235,   236,   237,   238,   239,     0,   240,
       0,     0,     0,     0,   242,     0,     0,     0,     0,     0,
     245,     0,     0,     0,   246,   247,   248,   249,  3704,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,     0,
     254,     0,     0,     0,     0,   256,     0,   257,   258,     0,
     259,   260,  3705,     0,     0,   261,     0,     0,     0,   263,
       0,     0,   264,  3706,     0,   265,   266,     0,     0,     0,
       0,     0,   267,   268,     0,   269,     0,   270,     0,   271,
     272,     0,     0,     0,     0,  -282,     0,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,   288,     0,   289,   290,   291,   292,
       0,   293,   294,     0,     0,     0,     0,   295,   296,   297,
     298,   299,   300,     0,     0,   301,   302,     0,   303,     0,
     304,     0,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     0,     0,   314,   315,     0,     0,   316,   317,   318,
     319,     0,     0,     0,     0,   321,     0,     0,     0,     0,
     322,   323,   324,     0,   325,   326,  3707,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   330,
     331,     0,     0,   333,   334,   335,     0,   337,   338,   339,
     340,   341,   342,     0,     0,     0,     0,   345,   346,     0,
     347,     0,   348,   349,   350,   351,   352,     0,   353,   354,
     355,     0,     0,   356,     0,     0,     0,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,   365,   366,     0,
     367,     0,     0,   369,     0,   371,  -282,     0,   372,     0,
       0,     0,   374,     0,     0,   376,   377,  3708,     0,     0,
       0,   379,   380,   381,   382,   383,   384,     0,   386,   387,
       0,   388,     0,     0,     0,     0,   390,   391,   392,     0,
       0,     0,     0,   394,     0,     0,     0,   395,     0,     0,
     397,     0,   399,     0,   400,     0,     0,   403,   404,     0,
       0,     0,     0,     0,     0,   405,   406,     0,   407,     0,
       0,   408,     0,     0,   409,     0,   411,     0,     0,     0,
     413,     0,   414,   415,   416,   417,   418,   419,     0,     0,
     420,   421,   422,   423,     0,   424,   425,     0,     0,   426,
     427,   428,   429,     0,     0,   430,   431,     0,   432,   433,
     434,   435,     0,     0,     0,     0,     0,   436,   437,     0,
       0,     0,     0,   439,   440,   441,     0,   442,   443,     0,
     444,   445,     0,     0,     0,     0,     0,   448,     0,     0,
     449,     0,     0,     0,   451,   452,     0,     0,     0,     0,
       0,     0,   453,     0,     0,   454,     0,     0,     0,   455,
     456,   457,   458,     0,     0,  -282,     0,     0,     0,   459,
       0,     0,   461,     0,   463,     0,   135,   464,   136,   137,
     138,   139,   140,     0,     0,     0,     0,     0,   141,     0,
    4219,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,   150,     0,     0,     0,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,   157,   158,
       0,     0,   159,     0,     0,   160,   161,     0,   162,   163,
       0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,     0,   184,   185,   186,   187,
     188,     0,   189,     0,     0,   190,     0,     0,   191,     0,
       0,     0,   192,     0,     0,     0,   193,   194,   195,     0,
       0,   196,     0,     0,     0,     0,   197,   198,     0,     0,
       0,     0,   199,     0,   200,     0,     0,     0,   201,     0,
     202,   203,   204,   205,     0,     0,     0,   206,     0,     0,
     207,   208,   209,     0,     0,     0,   210,     0,   211,   212,
       0,   213,   214,   215,     0,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,     0,   223,   224,   225,     0,
       0,   226,   227,     0,   228,   229,   230,     0,     0,   231,
       0,     0,     0,   232,     0,   233,     0,   234,     0,   235,
     236,   237,   238,   239,     0,   240,     0,     0,     0,   241,
     242,     0,   243,     0,     0,   244,   245,     0,     0,     0,
     246,   247,   248,   249,     0,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,     0,   254,   255,     0,     0,
       0,   256,     0,   257,   258,     0,   259,   260,     0,     0,
       0,   261,     0,     0,   262,   263,     0,     0,   264,     0,
       0,   265,   266,     0,     0,     0,     0,     0,   267,   268,
       0,   269,     0,   270,     0,   271,   272,     0,     0,     0,
       0,     0,     0,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
     288,     0,   289,   290,   291,   292,     0,   293,   294,     0,
       0,     0,     0,   295,   296,   297,   298,   299,   300,     0,
       0,   301,   302,     0,   303,     0,   304,     0,   305,   306,
     307,   308,   309,   310,   311,   312,   313,     0,     0,   314,
     315,     0,     0,   316,   317,   318,   319,     0,     0,     0,
     320,   321,     0,     0,     0,     0,   322,   323,   324,     0,
     325,   326,   327,     0,   328,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   347,     0,   348,   349,
     350,   351,   352,     0,   353,   354,   355,     0,     0,   356,
       0,     0,     0,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,   365,   366,     0,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,   373,     0,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,   390,   391,   392,   393,     0,     0,     0,   394,
       0,     0,     0,   395,     0,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   405,   406,     0,   407,     0,     0,   408,     0,     0,
     409,   410,   411,     0,     0,   412,   413,     0,   414,   415,
     416,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,   424,   425,     0,     0,   426,   427,   428,   429,     0,
       0,   430,   431,     0,   432,   433,   434,   435,     0,     0,
       0,     0,     0,   436,   437,     0,     0,     0,   438,   439,
     440,   441,     0,   442,   443,     0,   444,   445,     0,   446,
     447,     0,     0,   448,     0,     0,   449,     0,   450,     0,
     451,   452,     0,     0,     0,     0,     0,     0,   453,     0,
       0,   454,     0,     0,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,     0,   459,   460,     0,   461,   462,
     463,     0,   135,   464,   136,   137,   138,   139,   140,  2007,
       0,     0,     0,     0,   141,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,   150,     0,     0,
       0,   151,     0,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,     0,
       0,   160,   161,     0,   162,   163,     0,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,     0,   184,   185,   186,   187,   188,     0,   189,     0,
       0,   190,     0,     0,   191,     0,     0,     0,   192,     0,
       0,     0,   193,   194,   195,     0,     0,   196,     0,     0,
       0,     0,   197,   198,     0,     0,     0,     0,   199,     0,
     200,     0,     0,     0,   201,     0,   202,   203,   204,   205,
       0,     0,     0,   206,     0,     0,   207,   208,   209,     0,
       0,     0,   210,     0,   211,   212,     0,   213,   214,   215,
       0,     0,   216,   217,     0,   218,   219,   220,   221,   222,
       0,     0,   223,   224,   225,     0,     0,   226,   227,     0,
     228,   229,   230,     0,     0,   231,     0,     0,     0,   232,
       0,   233,     0,   234,     0,   235,   236,   237,   238,   239,
       0,   240,     0,     0,     0,   241,   242,     0,   243,     0,
       0,   244,   245,     0,     0,     0,   246,   247,   248,   249,
       0,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,     0,   254,   255,     0,     0,     0,   256,     0,   257,
     258,     0,   259,   260,     0,     0,     0,   261,     0,     0,
     262,   263,     0,     0,   264,     0,     0,   265,   266,     0,
       0,     0,     0,     0,   267,   268,     0,   269,     0,   270,
       0,   271,   272,     0,     0,     0,     0,     0,     0,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,   288,     0,   289,   290,
     291,   292,     0,   293,   294,     0,     0,     0,     0,   295,
     296,   297,   298,   299,   300,     0,     0,   301,   302,     0,
     303,     0,   304,     0,   305,   306,   307,   308,   309,   310,
     311,   312,   313,     0,     0,   314,   315,     0,     0,   316,
     317,   318,   319,     0,     0,     0,   320,   321,     0,     0,
       0,     0,   322,   323,   324,     0,   325,   326,   327,     0,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   347,     0,   348,   349,   350,   351,   352,     0,
     353,   354,   355,     0,     0,   356,     0,     0,     0,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,   365,
     366,     0,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,   373,     0,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,   390,   391,
     392,   393,     0,     0,     0,   394,     0,     0,     0,   395,
       0,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,     0,     0,     0,     0,     0,     0,   405,   406,     0,
     407,     0,     0,   408,     0,     0,   409,   410,   411,     0,
       0,   412,   413,     0,   414,   415,   416,   417,   418,   419,
       0,     0,   420,   421,   422,   423,     0,   424,   425,     0,
       0,   426,   427,   428,   429,     0,     0,   430,   431,     0,
     432,   433,   434,   435,     0,     0,     0,     0,     0,   436,
     437,     0,     0,     0,   438,   439,   440,   441,     0,   442,
     443,     0,   444,   445,     0,   446,   447,     0,     0,   448,
       0,     0,   449,     0,   450,     0,   451,   452,     0,     0,
       0,     0,     0,     0,   453,     0,     0,   454,     0,     0,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
       0,   459,   460,     0,   461,   462,   463,     0,   135,   464,
     136,   137,   138,   139,   140,  2669,     0,     0,     0,     0,
     141,     0,     0,   142,     0,   143,   144,   145,   146,   147,
     148,   149,     0,   150,     0,     0,     0,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
     157,   158,     0,     0,   159,     0,     0,   160,   161,     0,
     162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,     0,   184,   185,
     186,   187,   188,     0,   189,     0,     0,   190,     0,     0,
     191,     0,     0,     0,   192,     0,     0,     0,   193,   194,
     195,     0,     0,   196,     0,     0,     0,     0,   197,   198,
       0,     0,     0,     0,   199,     0,   200,     0,     0,     0,
     201,     0,   202,   203,   204,   205,     0,     0,     0,   206,
       0,     0,   207,   208,   209,     0,     0,     0,   210,     0,
     211,   212,     0,   213,   214,   215,     0,     0,   216,   217,
       0,   218,   219,   220,   221,   222,     0,     0,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,     0,   233,     0,   234,
       0,   235,   236,   237,   238,   239,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,     0,   244,   245,     0,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,     0,   254,   255,
       0,     0,     0,   256,     0,   257,   258,     0,   259,   260,
       0,     0,     0,   261,     0,     0,   262,   263,     0,     0,
     264,     0,     0,   265,   266,     0,     0,     0,     0,     0,
     267,   268,     0,   269,     0,   270,     0,   271,   272,     0,
       0,     0,     0,     0,     0,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,   288,     0,   289,   290,   291,   292,     0,   293,
     294,     0,     0,     0,     0,   295,   296,   297,   298,   299,
     300,     0,     0,   301,   302,     0,   303,     0,   304,     0,
     305,   306,   307,   308,   309,   310,   311,   312,   313,     0,
       0,   314,   315,     0,     0,   316,   317,   318,   319,     0,
       0,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,     0,   325,   326,   327,     0,   328,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   347,     0,
     348,   349,   350,   351,   352,     0,   353,   354,   355,     0,
       0,   356,     0,     0,     0,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,   365,   366,     0,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,   373,     0,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,   390,   391,   392,   393,     0,     0,
       0,   394,     0,     0,     0,   395,     0,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,     0,     0,     0,
       0,     0,     0,   405,   406,     0,   407,     0,     0,   408,
       0,     0,   409,   410,   411,     0,     0,   412,   413,     0,
     414,   415,   416,   417,   418,   419,     0,     0,   420,   421,
     422,   423,     0,   424,   425,     0,     0,   426,   427,   428,
     429,     0,     0,   430,   431,     0,   432,   433,   434,   435,
       0,     0,     0,     0,     0,   436,   437,     0,     0,     0,
     438,   439,   440,   441,     0,   442,   443,     0,   444,   445,
       0,   446,   447,     0,     0,   448,     0,     0,   449,     0,
     450,     0,   451,   452,     0,     0,     0,     0,     0,     0,
     453,     0,     0,   454,     0,     0,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,     0,   459,   460,     0,
     461,   462,   463,     0,   135,   464,   136,   137,   138,   139,
     140,  2972,     0,     0,     0,     0,   141,     0,     0,   142,
       0,   143,   144,   145,   146,   147,   148,   149,     0,   150,
       0,     0,     0,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,     0,     0,   160,   161,     0,   162,   163,     0,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
       0,   173,   174,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,     0,   184,   185,   186,   187,   188,     0,
     189,     0,     0,   190,     0,     0,   191,     0,     0,     0,
     192,     0,     0,     0,   193,   194,   195,     0,     0,   196,
       0,     0,     0,     0,   197,   198,     0,     0,     0,     0,
     199,     0,   200,     0,     0,     0,   201,     0,   202,   203,
     204,   205,     0,     0,     0,   206,     0,     0,   207,   208,
     209,     0,     0,     0,   210,     0,   211,   212,     0,   213,
     214,   215,     0,     0,   216,   217,     0,   218,   219,   220,
     221,   222,     0,     0,   223,   224,   225,     0,     0,   226,
     227,     0,   228,   229,   230,     0,     0,   231,     0,     0,
       0,   232,     0,   233,     0,   234,     0,   235,   236,   237,
     238,   239,     0,   240,     0,     0,     0,   241,   242,     0,
     243,     0,     0,   244,   245,     0,     0,     0,   246,   247,
     248,   249,     0,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,     0,   254,   255,     0,     0,     0,   256,
       0,   257,   258,     0,   259,   260,     0,     0,     0,   261,
       0,     0,   262,   263,     0,     0,   264,     0,     0,   265,
     266,     0,     0,     0,     0,     0,   267,   268,     0,   269,
       0,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,   288,     0,
     289,   290,   291,   292,     0,   293,   294,     0,     0,     0,
       0,   295,   296,   297,   298,   299,   300,     0,     0,   301,
     302,     0,   303,     0,   304,     0,   305,   306,   307,   308,
     309,   310,   311,   312,   313,     0,     0,   314,   315,     0,
       0,   316,   317,   318,   319,     0,     0,     0,   320,   321,
       0,     0,     0,     0,   322,   323,   324,     0,   325,   326,
     327,     0,   328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   347,     0,   348,   349,   350,   351,
     352,     0,   353,   354,   355,     0,     0,   356,     0,     0,
       0,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,   365,   366,     0,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,   373,     0,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
     390,   391,   392,   393,     0,     0,     0,   394,     0,     0,
       0,   395,     0,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,     0,     0,     0,     0,     0,     0,   405,
     406,     0,   407,     0,     0,   408,     0,     0,   409,   410,
     411,     0,     0,   412,   413,     0,   414,   415,   416,   417,
     418,   419,     0,     0,   420,   421,   422,   423,     0,   424,
     425,     0,     0,   426,   427,   428,   429,     0,     0,   430,
     431,     0,   432,   433,   434,   435,     0,     0,     0,     0,
       0,   436,   437,     0,     0,     0,   438,   439,   440,   441,
       0,   442,   443,     0,   444,   445,     0,   446,   447,     0,
       0,   448,     0,     0,   449,     0,   450,     0,   451,   452,
       0,     0,     0,     0,     0,     0,   453,     0,     0,   454,
       0,     0,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,     0,   459,   460,     0,   461,   462,   463,     0,
     135,   464,   136,   137,   138,   139,   140,  3293,     0,     0,
       0,     0,   141,     0,     0,   142,     0,   143,   144,   145,
     146,   147,   148,   149,     0,   150,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,     0,     0,   160,
     161,     0,   162,   163,     0,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,     0,
     184,   185,   186,   187,   188,     0,   189,     0,     0,   190,
       0,     0,   191,     0,     0,     0,   192,     0,     0,     0,
     193,   194,   195,     0,     0,   196,     0,     0,     0,     0,
     197,   198,  2327,     0,     0,     0,   199,     0,   200,     0,
       0,     0,   201,     0,   202,   203,   204,   205,     0,     0,
       0,   206,     0,     0,   207,   208,   209,     0,     0,     0,
     210,     0,   211,   212,     0,   213,   214,   215,     0,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,     0,
     223,   224,   225,     0,     0,   226,   227,     0,   228,   229,
     230,  2328,     0,   231,     0,     0,     0,   232,     0,   233,
       0,   234,     0,   235,   236,   237,   238,   239,     0,   240,
       0,     0,     0,   241,   242,     0,   243,  2329,     0,   244,
     245,     0,     0,     0,   246,   247,   248,   249,     0,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,     0,
     254,   255,     0,     0,     0,   256,     0,   257,   258,     0,
     259,   260,     0,     0,     0,   261,     0,     0,   262,   263,
       0,     0,   264,     0,     0,   265,   266,     0,     0,     0,
       0,     0,   267,   268,     0,   269,     0,   270,     0,   271,
     272,     0,     0,  2330,     0,     0,     0,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,   288,     0,   289,   290,   291,   292,
       0,   293,   294,     0,     0,     0,     0,   295,   296,   297,
     298,   299,   300,     0,     0,   301,   302,     0,   303,     0,
     304,     0,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     0,     0,   314,   315,     0,     0,   316,   317,   318,
     319,   982,   983,     0,   320,   321,     0,     0,  2331,     0,
     322,   323,   324,     0,   325,   326,   327,     0,   328,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     347,     0,   348,   349,   350,   351,   352,     0,   353,   354,
     355,     0,     0,   356,     0,     0,     0,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,   365,   366,     0,
     367,   368,     0,   369,   370,   371,     0,     0,   372,     0,
     373,     0,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,   390,   391,   392,   393,
       0,     0,     0,   394,     0,     0,     0,   395,     0,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,     0,
       0,  4199,   537,  4200,     0,   405,   406,     0,   407,     0,
       0,   408,     0,     0,   409,   410,   411,     0,     0,   412,
     413,     0,   414,   415,   416,   417,   418,   419,     0,     0,
     420,   421,   422,   423,     0,   424,   425,     0,     0,   426,
     427,   428,   429,     0,     0,   430,   431,     0,   432,   433,
     434,   435,     0,     0,     0,     0,     0,   436,   437,     0,
       0,     0,   438,   439,   440,   441,  2332,   442,   443,     0,
     444,   445,     0,   446,   447,     0,     0,   448,     0,     0,
     449,     0,   450,     0,   451,   452,     0,     0,     0,     0,
       0,     0,   453,     0,     0,   454,     0,     0,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,     0,   459,
     460,     0,   461,   462,   463,     0,   135,   464,   136,   137,
     138,   139,   140,     0,     0,     0,     0,     0,   141,     0,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,   150,     0,     0,  2521,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,   157,   158,
       0,     0,   159,     0,     0,   160,   161,     0,   162,   163,
       0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,     0,   184,   185,   186,   187,
     188,     0,   189,     0,     0,   190,     0,     0,   191,     0,
       0,     0,   192,     0,     0,     0,   193,   194,   195,     0,
       0,   196,     0,     0,     0,     0,   197,   198,     0,     0,
       0,  2675,   199,     0,   200,     0,     0,     0,   201,     0,
     202,   203,   204,   205,     0,     0,     0,   206,     0,     0,
     207,   208,   209,     0,     0,     0,   210,     0,   211,   212,
       0,   213,   214,   215,  2150,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,     0,   223,   224,   225,     0,
       0,   226,   227,     0,   228,   229,   230,     0,     0,   231,
       0,     0,     0,   232,     0,   233,     0,   234,     0,   235,
     236,   237,   238,   239,     0,   240,     0,     0,     0,   241,
     242,     0,   243,     0,     0,   244,   245,     0,     0,     0,
     246,   247,   248,   249,     0,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,     0,   254,   255,     0,     0,
       0,   256,     0,   257,   258,     0,   259,   260,     0,     0,
       0,   261,     0,     0,   262,   263,     0,     0,   264,     0,
       0,   265,   266,   590,     0,     0,     0,     0,   267,   268,
       0,   269,     0,   270,     0,   271,   272,     0,     0,     0,
       0,     0,     0,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
     288,     0,   289,   290,   291,   292,     0,   293,   294,     0,
       0,     0,     0,   295,   296,   297,   298,   299,   300,     0,
       0,   301,   302,     0,   303,     0,   304,     0,   305,   306,
     307,   308,   309,   310,   311,   312,   313,     0,     0,   314,
     315,     0,     0,   316,   317,   318,   319,     0,     0,     0,
     320,   321,     0,     0,     0,     0,   322,   323,   324,     0,
     325,   326,   327,     0,   328,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   347,     0,   348,   349,
     350,   351,   352,     0,   353,   354,   355,     0,     0,   356,
       0,     0,     0,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,   365,   366,     0,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,   373,     0,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,   390,   391,   392,   393,     0,     0,  2151,   394,
       0,     0,     0,   395,     0,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   405,   406,     0,   407,     0,     0,   408,     0,     0,
     409,   410,   411,     0,     0,   412,   413,     0,   414,   415,
     416,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,   424,   425,     0,     0,   426,   427,   428,   429,     0,
     132,   430,   431,     0,   432,   433,   434,   435,     0,     0,
       0,     0,     0,   436,   437,     0,     0,     0,   438,   439,
     440,   441,     0,   442,   443,     0,   444,   445,     0,   446,
     447,     0,     0,   448,     0,     0,   449,     0,   450,     0,
     451,   452,     0,     0,     0,     0,     0,     0,   453,     0,
       0,   454,     0,     0,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,     0,   459,   460,     0,   461,   462,
     463,     0,   135,   464,   136,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,   150,     0,     0,
       0,   151,     0,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,     0,
       0,   160,   161,     0,   162,   163,     0,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,     0,   184,   185,   186,   187,   188,     0,   189,     0,
       0,   190,     0,     0,   191,     0,     0,     0,   192,     0,
       0,     0,   193,   194,   195,     0,     0,   196,     0,     0,
       0,     0,   197,   198,     0,     0,     0,     0,   199,     0,
     200,     0,     0,     0,   201,     0,   202,   203,   204,   205,
       0,     0,     0,   206,     0,     0,   207,   208,   209,     0,
       0,     0,   210,     0,   211,   212,     0,   213,   214,   215,
       0,     0,   216,   217,     0,   218,   219,   220,   221,   222,
       0,     0,   223,   224,   225,     0,     0,   226,   227,     0,
     228,   229,   230,     0,     0,   231,     0,     0,     0,   232,
       0,   233,     0,   234,     0,   235,   236,   237,   238,   239,
       0,   240,     0,     0,     0,   241,   242,     0,   243,     0,
       0,   244,   245,     0,     0,     0,   246,   247,   248,   249,
       0,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,     0,   254,   255,     0,     0,     0,   256,     0,   257,
     258,     0,   259,   260,     0,     0,     0,   261,     0,     0,
     262,   263,     0,     0,   264,     0,     0,   265,   266,     0,
       0,     0,     0,     0,   267,   268,     0,   269,     0,   270,
       0,   271,   272,     0,     0,  1768,     0,     0,     0,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,   288,     0,   289,   290,
     291,   292,     0,   293,   294,     0,     0,     0,     0,   295,
     296,   297,   298,   299,   300,     0,     0,   301,   302,     0,
     303,     0,   304,     0,   305,   306,   307,   308,   309,   310,
     311,   312,   313,     0,     0,   314,   315,     0,     0,   316,
     317,   318,   319,     0,     0,     0,   320,   321,     0,     0,
    1769,     0,   322,   323,   324,     0,   325,   326,   327,     0,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     329,   330,   331,   696,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   347,     0,   348,   349,   350,   351,   352,     0,
     353,   354,   355,     0,     0,   356,     0,     0,     0,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,   365,
     366,     0,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,   373,     0,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,   390,   391,
     392,   393,     0,     0,     0,   394,     0,     0,     0,   395,
       0,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,     0,     0,     0,     0,     0,     0,   405,   406,     0,
     407,     0,     0,   408,     0,     0,   409,   410,   411,     0,
       0,   412,   413,     0,   414,   415,   416,   417,   418,   419,
       0,     0,   420,   421,   422,   423,     0,   424,   425,     0,
       0,   426,   427,   428,   429,     0,     0,   430,   431,     0,
     432,   433,   434,   435,     0,     0,     0,     0,     0,   436,
     437,     0,     0,     0,   438,   439,   440,   441,  1770,   442,
     443,     0,   444,   445,     0,   446,   447,     0,     0,   448,
       0,     0,   449,     0,   450,     0,   451,   452,     0,     0,
       0,     0,     0,     0,   453,     0,     0,   454,     0,     0,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
       0,   459,   460,     0,   461,   462,   463,     0,   135,   464,
     136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,   142,     0,   143,   144,   145,   146,   147,
     148,   149,     0,   150,     0,     0,  2683,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
     157,   158,     0,     0,   159,     0,     0,   160,   161,     0,
     162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,     0,   184,   185,
     186,   187,   188,     0,   189,     0,     0,   190,     0,     0,
     191,     0,     0,     0,   192,     0,     0,     0,   193,   194,
     195,     0,     0,   196,     0,     0,     0,     0,   197,   198,
       0,     0,     0,  2684,   199,     0,   200,     0,     0,     0,
     201,     0,   202,   203,   204,   205,     0,     0,     0,   206,
       0,     0,   207,   208,   209,     0,     0,     0,   210,     0,
     211,   212,     0,   213,   214,   215,     0,     0,   216,   217,
       0,   218,   219,   220,   221,   222,     0,     0,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,     0,   233,     0,   234,
       0,   235,   236,   237,   238,   239,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,     0,   244,   245,     0,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,     0,   254,   255,
       0,     0,     0,   256,     0,   257,   258,     0,   259,   260,
       0,     0,     0,   261,     0,     0,   262,   263,     0,     0,
     264,     0,     0,   265,   266,   590,     0,     0,     0,     0,
     267,   268,     0,   269,     0,   270,     0,   271,   272,     0,
       0,     0,     0,     0,     0,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,   288,     0,   289,   290,   291,   292,     0,   293,
     294,     0,     0,     0,     0,   295,   296,   297,   298,   299,
     300,     0,     0,   301,   302,     0,   303,     0,   304,     0,
     305,   306,   307,   308,   309,   310,   311,   312,   313,     0,
       0,   314,   315,     0,     0,   316,   317,   318,   319,     0,
       0,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,     0,   325,   326,   327,     0,   328,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   347,     0,
     348,   349,   350,   351,   352,     0,   353,   354,   355,     0,
       0,   356,     0,     0,     0,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,   365,   366,     0,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,   373,     0,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,   390,   391,   392,   393,     0,     0,
       0,   394,     0,     0,     0,   395,     0,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,     0,     0,     0,
       0,     0,     0,   405,   406,     0,   407,     0,     0,   408,
       0,     0,   409,   410,   411,     0,     0,   412,   413,     0,
     414,   415,   416,   417,   418,   419,     0,     0,   420,   421,
     422,   423,     0,   424,   425,     0,     0,   426,   427,   428,
     429,     0,   132,   430,   431,     0,   432,   433,   434,   435,
       0,     0,     0,     0,     0,   436,   437,     0,     0,     0,
     438,   439,   440,   441,     0,   442,   443,     0,   444,   445,
       0,   446,   447,     0,     0,   448,     0,     0,   449,     0,
     450,     0,   451,   452,     0,     0,     0,     0,     0,     0,
     453,     0,     0,   454,     0,     0,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,     0,   459,   460,     0,
     461,   462,   463,     0,   135,   464,   136,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,   142,
       0,   143,   144,   145,   146,   147,   148,   149,     0,   150,
       0,     0,  2521,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,     0,     0,   160,   161,     0,   162,   163,     0,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
       0,   173,   174,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,     0,   184,   185,   186,   187,   188,     0,
     189,     0,     0,   190,     0,     0,   191,     0,     0,     0,
     192,     0,     0,     0,   193,   194,   195,     0,     0,   196,
       0,     0,     0,     0,   197,   198,     0,     0,     0,  2675,
     199,     0,   200,     0,     0,     0,   201,     0,   202,   203,
     204,   205,     0,     0,     0,   206,     0,     0,   207,   208,
     209,     0,     0,     0,   210,     0,   211,   212,     0,   213,
     214,   215,     0,     0,   216,   217,     0,   218,   219,   220,
     221,   222,     0,     0,   223,   224,   225,     0,     0,   226,
     227,     0,   228,   229,   230,     0,     0,   231,     0,     0,
       0,   232,     0,   233,     0,   234,     0,   235,   236,   237,
     238,   239,     0,   240,     0,     0,     0,   241,   242,     0,
     243,     0,     0,   244,   245,     0,     0,     0,   246,   247,
     248,   249,     0,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,     0,   254,   255,     0,     0,     0,   256,
       0,   257,   258,     0,   259,   260,     0,     0,     0,   261,
       0,     0,   262,   263,     0,     0,   264,     0,     0,   265,
     266,   590,     0,     0,     0,     0,   267,   268,     0,   269,
       0,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,   288,     0,
     289,   290,   291,   292,     0,   293,   294,     0,     0,     0,
       0,   295,   296,   297,   298,   299,   300,     0,     0,   301,
     302,     0,   303,     0,   304,     0,   305,   306,   307,   308,
     309,   310,   311,   312,   313,     0,     0,   314,   315,     0,
       0,   316,   317,   318,   319,     0,     0,     0,   320,   321,
       0,     0,     0,     0,   322,   323,   324,     0,   325,   326,
     327,     0,   328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   347,     0,   348,   349,   350,   351,
     352,     0,   353,   354,   355,     0,     0,   356,     0,     0,
       0,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,   365,   366,     0,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,   373,     0,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
     390,   391,   392,   393,     0,     0,     0,   394,     0,     0,
       0,   395,     0,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,     0,     0,     0,     0,     0,     0,   405,
     406,     0,   407,     0,     0,   408,     0,     0,   409,   410,
     411,     0,     0,   412,   413,     0,   414,   415,   416,   417,
     418,   419,     0,     0,   420,   421,   422,   423,     0,   424,
     425,     0,     0,   426,   427,   428,   429,     0,   132,   430,
     431,     0,   432,   433,   434,   435,     0,     0,     0,     0,
       0,   436,   437,     0,     0,     0,   438,   439,   440,   441,
       0,   442,   443,     0,   444,   445,     0,   446,   447,     0,
       0,   448,     0,     0,   449,     0,   450,     0,   451,   452,
       0,     0,     0,     0,     0,     0,   453,     0,     0,   454,
       0,     0,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,     0,   459,   460,     0,   461,   462,   463,     0,
     135,   464,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,   142,     0,   143,   144,   145,
     146,   147,   148,   149,     0,   150,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,     0,     0,   160,
     161,     0,   162,   163,     0,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,     0,
     184,   185,   186,   187,   188,     0,   189,     0,     0,   190,
       0,     0,   191,     0,   941,     0,   192,     0,     0,     0,
     193,   194,   195,     0,     0,   196,     0,     0,     0,     0,
     197,   198,     0,     0,     0,     0,   199,     0,   200,     0,
       0,     0,   201,     0,   202,   203,   204,   205,     0,     0,
       0,   206,     0,     0,   207,   208,   209,     0,     0,     0,
     210,     0,   211,   212,     0,   213,   214,   215,     0,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,     0,
     223,   224,   225,     0,     0,   226,   227,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,   232,     0,   233,
       0,   234,     0,   235,   236,   237,   238,   239,     0,   240,
       0,     0,     0,   241,   242,     0,   243,     0,     0,   244,
     245,     0,     0,     0,   246,   247,   248,   249,     0,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,     0,
     254,   255,     0,     0,     0,   256,     0,   257,   258,     0,
     259,   260,     0,     0,     0,   261,     0,     0,   262,   263,
       0,     0,   264,     0,     0,   265,   266,   590,     0,     0,
       0,     0,   267,   268,     0,   269,     0,   270,     0,   271,
     272,     0,     0,     0,     0,     0,     0,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,   288,     0,   289,   290,   291,   292,
       0,   293,   294,     0,     0,     0,     0,   295,   296,   297,
     298,   299,   300,     0,     0,   301,   302,     0,   303,     0,
     304,     0,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     0,     0,   314,   315,     0,     0,   316,   317,   318,
     319,     0,     0,     0,   320,   321,     0,     0,     0,     0,
     322,   323,   324,     0,   325,   326,   327,     0,   328,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     347,     0,   348,   349,   350,   351,   352,     0,   353,   354,
     355,     0,     0,   356,     0,     0,     0,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,   365,   366,     0,
     367,   368,     0,   369,   370,   371,     0,     0,   372,     0,
     373,     0,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,   390,   391,   392,   393,
       0,     0,     0,   394,     0,     0,     0,   395,     0,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,     0,
       0,     0,     0,     0,     0,   405,   406,     0,   407,     0,
       0,   408,     0,     0,   409,   410,   411,     0,     0,   412,
     413,     0,   414,   415,   416,   417,   418,   419,     0,     0,
     420,   421,   422,   423,     0,   424,   425,     0,     0,   426,
     427,   428,   429,     0,   132,   430,   431,     0,   432,   433,
     434,   435,     0,     0,     0,     0,     0,   436,   437,     0,
       0,     0,   438,   439,   440,   441,     0,   442,   443,     0,
     444,   445,     0,   446,   447,     0,     0,   448,     0,     0,
     449,     0,   450,     0,   451,   452,     0,     0,     0,     0,
       0,     0,   453,     0,     0,   454,     0,     0,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,     0,   459,
     460,     0,   461,   462,   463,     0,   135,   464,   136,   137,
     138,   139,   140,  1312,     0,     0,     0,     0,   141,     0,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,   150,     0,     0,     0,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,   157,   158,
       0,     0,   159,     0,     0,   160,   161,     0,   162,   163,
       0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,     0,   184,   185,   186,   187,
     188,     0,   189,     0,     0,   190,     0,     0,   191,     0,
       0,     0,   192,     0,     0,     0,   193,   194,   195,     0,
       0,   196,     0,     0,     0,     0,   197,   198,     0,     0,
       0,     0,   199,     0,   200,     0,     0,     0,   201,     0,
     202,   203,   204,   205,     0,     0,     0,   206,     0,     0,
     207,   208,   209,     0,     0,     0,   210,     0,   211,   212,
       0,   213,   214,   215,     0,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,     0,   223,   224,   225,     0,
       0,   226,   227,     0,   228,   229,   230,     0,     0,   231,
       0,     0,     0,   232,     0,   233,     0,   234,     0,   235,
     236,   237,   238,   239,     0,   240,     0,     0,     0,   241,
     242,     0,   243,     0,     0,   244,   245,     0,     0,     0,
     246,   247,   248,   249,     0,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,     0,   254,   255,     0,     0,
       0,   256,     0,   257,   258,     0,   259,   260,     0,     0,
       0,   261,     0,     0,   262,   263,     0,     0,   264,     0,
       0,   265,   266,   590,     0,     0,     0,     0,   267,   268,
       0,   269,     0,   270,     0,   271,   272,     0,     0,     0,
       0,     0,     0,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
     288,     0,   289,   290,   291,   292,     0,   293,   294,     0,
       0,     0,     0,   295,   296,   297,   298,   299,   300,     0,
       0,   301,   302,     0,   303,     0,   304,     0,   305,   306,
     307,   308,   309,   310,   311,   312,   313,     0,     0,   314,
     315,     0,     0,   316,   317,   318,   319,     0,     0,     0,
     320,   321,     0,     0,     0,     0,   322,   323,   324,     0,
     325,   326,   327,     0,   328,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   347,     0,   348,   349,
     350,   351,   352,     0,   353,   354,   355,     0,     0,   356,
       0,     0,     0,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,   365,   366,     0,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,   373,     0,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,   390,   391,   392,   393,     0,     0,     0,   394,
       0,     0,     0,   395,     0,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   405,   406,     0,   407,     0,     0,   408,     0,     0,
     409,   410,   411,     0,     0,   412,   413,     0,   414,   415,
     416,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,   424,   425,     0,     0,   426,   427,   428,   429,     0,
     132,   430,   431,     0,   432,   433,   434,   435,     0,     0,
       0,     0,     0,   436,   437,     0,     0,     0,   438,   439,
     440,   441,     0,   442,   443,     0,   444,   445,     0,   446,
     447,     0,     0,   448,     0,     0,   449,     0,   450,     0,
     451,   452,     0,     0,     0,     0,     0,     0,   453,     0,
       0,   454,     0,     0,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,     0,   459,   460,     0,   461,   462,
     463,     0,   135,   464,   136,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,   150,     0,     0,
       0,   151,   919,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,     0,
       0,   160,   161,     0,   162,   163,     0,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,     0,   184,   185,   186,   187,   188,     0,   189,     0,
       0,   190,     0,     0,   191,     0,     0,     0,   192,     0,
       0,     0,   193,   194,   195,     0,     0,   196,     0,     0,
       0,     0,   197,   198,     0,     0,     0,     0,   199,     0,
     200,     0,     0,     0,   201,     0,   202,   203,   204,   205,
       0,     0,     0,   206,     0,     0,   207,   208,   209,     0,
       0,     0,   210,     0,   211,   212,     0,   213,   214,   215,
       0,     0,   216,   217,     0,   218,   219,   220,   221,   222,
       0,     0,   223,   224,   225,     0,     0,   226,   227,     0,
     228,   229,   230,     0,     0,   231,     0,     0,     0,   232,
       0,   233,     0,   234,     0,   235,   236,   237,   238,   239,
       0,   240,     0,     0,     0,   241,   242,     0,   243,   920,
       0,   244,   245,     0,     0,     0,   246,   247,   248,   249,
       0,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,     0,   254,   255,     0,     0,     0,   256,     0,   257,
     258,     0,   259,   260,     0,     0,     0,   261,     0,     0,
     262,   263,     0,     0,   264,     0,     0,   265,   266,     0,
       0,     0,     0,     0,   267,   268,     0,   269,     0,   270,
       0,   271,   272,     0,     0,     0,     0,     0,     0,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,   288,     0,   289,   290,
     291,   292,     0,   293,   294,     0,     0,     0,     0,   295,
     296,   297,   298,   299,   300,     0,     0,   301,   302,     0,
     303,     0,   304,     0,   305,   306,   307,   308,   309,   310,
     311,   312,   313,     0,     0,   314,   315,     0,     0,   316,
     317,   318,   319,     0,     0,     0,   320,   321,     0,     0,
       0,     0,   322,   323,   324,     0,   325,   326,   327,     0,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   347,     0,   348,   349,   350,   351,   352,     0,
     353,   354,   355,     0,     0,   356,     0,     0,     0,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,   365,
     366,     0,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,   373,     0,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,   390,   391,
     392,   393,     0,     0,     0,   394,     0,     0,     0,   395,
       0,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,     0,     0,     0,     0,     0,     0,   405,   406,     0,
     407,     0,     0,   408,     0,     0,   409,   410,   411,     0,
       0,   412,   413,     0,   414,   415,   416,   417,   418,   419,
       0,     0,   420,   421,   422,   423,     0,   424,   425,     0,
       0,   426,   427,   428,   429,     0,   921,   430,   431,     0,
     432,   433,   434,   435,     0,     0,     0,     0,     0,   436,
     437,     0,     0,     0,   438,   439,   440,   441,     0,   442,
     443,     0,   444,   445,     0,   446,   447,     0,     0,   448,
       0,     0,   449,     0,   450,     0,   451,   452,     0,     0,
       0,     0,     0,     0,   453,     0,     0,   454,     0,     0,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
       0,   459,   460,     0,   461,   462,   463,     0,   135,   464,
     136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,   142,     0,   143,   144,   145,   146,   147,
     148,   149,     0,   150,     0,     0,  2521,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
     157,   158,     0,     0,   159,     0,     0,   160,   161,     0,
     162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,     0,   184,   185,
     186,   187,   188,     0,   189,     0,     0,   190,     0,     0,
     191,     0,     0,     0,   192,     0,     0,     0,   193,   194,
     195,     0,     0,   196,     0,     0,     0,     0,   197,   198,
       0,     0,     0,     0,   199,     0,   200,     0,     0,     0,
     201,     0,   202,   203,   204,   205,     0,     0,     0,   206,
       0,     0,   207,   208,   209,     0,     0,     0,   210,     0,
     211,   212,     0,   213,   214,   215,     0,     0,   216,   217,
       0,   218,   219,   220,   221,   222,     0,     0,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,     0,   233,     0,   234,
       0,   235,   236,   237,   238,   239,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,     0,   244,   245,     0,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,     0,   254,   255,
       0,     0,     0,   256,     0,   257,   258,     0,   259,   260,
       0,     0,     0,   261,     0,     0,   262,   263,     0,     0,
     264,     0,     0,   265,   266,   590,     0,     0,     0,     0,
     267,   268,     0,   269,     0,   270,     0,   271,   272,     0,
       0,     0,     0,     0,     0,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,   288,     0,   289,   290,   291,   292,     0,   293,
     294,     0,     0,     0,     0,   295,   296,   297,   298,   299,
     300,     0,     0,   301,   302,     0,   303,     0,   304,     0,
     305,   306,   307,   308,   309,   310,   311,   312,   313,     0,
       0,   314,   315,     0,     0,   316,   317,   318,   319,     0,
       0,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,     0,   325,   326,   327,     0,   328,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   347,     0,
     348,   349,   350,   351,   352,     0,   353,   354,   355,     0,
       0,   356,     0,     0,     0,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,   365,   366,     0,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,   373,     0,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,   390,   391,   392,   393,     0,     0,
       0,   394,     0,     0,     0,   395,     0,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,     0,     0,     0,
       0,     0,     0,   405,   406,     0,   407,     0,     0,   408,
       0,     0,   409,   410,   411,     0,     0,   412,   413,     0,
     414,   415,   416,   417,   418,   419,     0,     0,   420,   421,
     422,   423,     0,   424,   425,     0,     0,   426,   427,   428,
     429,     0,   132,   430,   431,     0,   432,   433,   434,   435,
       0,     0,     0,     0,     0,   436,   437,     0,     0,     0,
     438,   439,   440,   441,     0,   442,   443,     0,   444,   445,
       0,   446,   447,     0,     0,   448,     0,     0,   449,     0,
     450,     0,   451,   452,     0,     0,     0,     0,     0,     0,
     453,     0,     0,   454,     0,     0,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,     0,   459,   460,     0,
     461,   462,   463,     0,   135,   464,   136,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,   142,
       0,   143,   144,   145,   146,   147,   148,   149,     0,   150,
       0,     0,     0,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,     0,     0,   160,   161,     0,   162,   163,     0,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
       0,   173,   174,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,     0,   184,   185,   186,   187,   188,     0,
     189,     0,     0,   190,     0,     0,   191,     0,     0,     0,
     192,     0,     0,     0,   193,   194,   195,     0,     0,   196,
       0,     0,     0,     0,   197,   198,     0,     0,     0,  2723,
     199,     0,   200,     0,     0,     0,   201,     0,   202,   203,
     204,   205,     0,     0,     0,   206,     0,     0,   207,   208,
     209,     0,     0,     0,   210,     0,   211,   212,     0,   213,
     214,   215,     0,     0,   216,   217,     0,   218,   219,   220,
     221,   222,     0,     0,   223,   224,   225,     0,     0,   226,
     227,     0,   228,   229,   230,     0,     0,   231,     0,     0,
       0,   232,     0,   233,     0,   234,     0,   235,   236,   237,
     238,   239,     0,   240,     0,     0,     0,   241,   242,     0,
     243,     0,     0,   244,   245,     0,     0,     0,   246,   247,
     248,   249,     0,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,     0,   254,   255,     0,     0,     0,   256,
       0,   257,   258,     0,   259,   260,     0,     0,     0,   261,
       0,     0,   262,   263,     0,     0,   264,     0,     0,   265,
     266,   590,     0,     0,     0,     0,   267,   268,     0,   269,
       0,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,   288,     0,
     289,   290,   291,   292,     0,   293,   294,     0,     0,     0,
       0,   295,   296,   297,   298,   299,   300,     0,     0,   301,
     302,     0,   303,     0,   304,     0,   305,   306,   307,   308,
     309,   310,   311,   312,   313,     0,     0,   314,   315,     0,
       0,   316,   317,   318,   319,     0,     0,     0,   320,   321,
       0,     0,     0,     0,   322,   323,   324,     0,   325,   326,
     327,     0,   328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   347,     0,   348,   349,   350,   351,
     352,     0,   353,   354,   355,     0,     0,   356,     0,     0,
       0,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,   365,   366,     0,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,   373,     0,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
     390,   391,   392,   393,     0,     0,     0,   394,     0,     0,
       0,   395,     0,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,     0,     0,     0,     0,     0,     0,   405,
     406,     0,   407,     0,     0,   408,     0,     0,   409,   410,
     411,     0,     0,   412,   413,     0,   414,   415,   416,   417,
     418,   419,     0,     0,   420,   421,   422,   423,     0,   424,
     425,     0,     0,   426,   427,   428,   429,     0,   132,   430,
     431,     0,   432,   433,   434,   435,     0,     0,     0,     0,
       0,   436,   437,     0,     0,     0,   438,   439,   440,   441,
       0,   442,   443,     0,   444,   445,     0,   446,   447,     0,
       0,   448,     0,     0,   449,     0,   450,     0,   451,   452,
       0,     0,     0,     0,     0,     0,   453,     0,     0,   454,
       0,     0,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,     0,   459,   460,     0,   461,   462,   463,     0,
     135,   464,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,   142,     0,   143,   144,   145,
     146,   147,   148,   149,     0,   150,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,     0,     0,   160,
     161,     0,   162,   163,     0,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,     0,
     184,   185,   186,   187,   188,     0,   189,     0,     0,   190,
       0,     0,   191,     0,     0,     0,   192,     0,     0,     0,
     193,   194,   195,     0,     0,   196,     0,     0,     0,     0,
     197,   198,     0,     0,     0,     0,   199,     0,   200,     0,
       0,     0,   201,     0,   202,   203,   204,   205,     0,     0,
       0,   206,     0,     0,   207,   208,   209,     0,     0,     0,
     210,     0,   211,   212,     0,   213,   214,   215,     0,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,     0,
     223,   224,   225,     0,     0,   226,   227,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,   232,     0,   233,
       0,   234,     0,   235,   236,   237,   238,   239,     0,   240,
       0,     0,     0,   241,   242,     0,   243,     0,     0,   244,
     245,     0,     0,     0,   246,   247,   248,   249,     0,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,     0,
     254,   255,     0,     0,     0,   256,     0,   257,   258,     0,
     259,   260,     0,     0,     0,   261,     0,     0,   262,   263,
       0,     0,   264,     0,     0,   265,   266,   590,     0,     0,
       0,     0,   267,   268,     0,   269,     0,   270,     0,   271,
     272,     0,     0,     0,     0,     0,     0,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,   288,     0,   289,   290,   291,   292,
       0,   293,   294,     0,     0,     0,     0,   295,   296,   297,
     298,   299,   300,     0,     0,   301,   302,     0,   303,     0,
     304,     0,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     0,     0,   314,   315,     0,     0,   316,   317,   318,
     319,     0,     0,     0,   320,   321,     0,     0,     0,     0,
     322,   323,   324,     0,   325,   326,   327,     0,   328,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     347,     0,   348,   349,   350,   351,   352,     0,   353,   354,
     355,     0,     0,   356,     0,     0,     0,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,   365,   366,     0,
     367,   368,     0,   369,   370,   371,     0,     0,   372,     0,
     373,     0,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,   390,   391,   392,   393,
       0,     0,     0,   394,     0,     0,     0,   395,     0,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,     0,
       0,     0,     0,     0,     0,   405,   406,     0,   407,     0,
       0,   408,     0,     0,   409,   410,   411,     0,     0,   412,
     413,     0,   414,   415,   416,   417,   418,   419,     0,     0,
     420,   421,   422,   423,     0,   424,   425,     0,     0,   426,
     427,   428,   429,     0,   132,   430,   431,     0,   432,   433,
     434,   435,     0,     0,     0,     0,     0,   436,   437,     0,
       0,     0,   438,   439,   440,   441,     0,   442,   443,     0,
     444,   445,     0,   446,   447,     0,     0,   448,     0,     0,
     449,     0,   450,     0,   451,   452,     0,     0,     0,     0,
       0,     0,   453,     0,     0,   454,     0,     0,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,     0,   459,
     460,     0,   461,   462,   463,     0,   135,   464,   136,   137,
     138,   139,   140,     0,     0,     0,     0,     0,   141,  2665,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,   150,     0,     0,     0,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,   157,   158,
       0,     0,   159,     0,     0,   160,   161,     0,   162,   163,
       0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,     0,   184,   185,   186,   187,
     188,     0,   189,     0,     0,   190,     0,     0,   191,     0,
       0,     0,   192,     0,     0,     0,   193,   194,   195,     0,
       0,   196,     0,     0,     0,     0,   197,   198,     0,     0,
       0,     0,   199,     0,   200,     0,     0,     0,   201,     0,
     202,   203,   204,   205,     0,     0,     0,   206,     0,     0,
     207,   208,   209,     0,     0,     0,   210,     0,   211,   212,
       0,   213,   214,   215,     0,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,     0,   223,   224,   225,     0,
       0,   226,   227,     0,   228,   229,   230,     0,     0,   231,
       0,     0,     0,   232,     0,   233,     0,   234,     0,   235,
     236,   237,   238,   239,     0,   240,     0,     0,     0,   241,
     242,     0,   243,     0,     0,   244,   245,     0,     0,     0,
     246,   247,   248,   249,     0,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,     0,   254,   255,     0,     0,
       0,   256,     0,   257,   258,     0,   259,   260,     0,     0,
       0,   261,     0,     0,   262,   263,     0,     0,   264,     0,
       0,   265,   266,     0,     0,     0,     0,     0,   267,   268,
       0,   269,     0,   270,     0,   271,   272,     0,     0,     0,
       0,     0,     0,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
     288,     0,   289,   290,   291,   292,     0,   293,   294,     0,
       0,     0,     0,   295,   296,   297,   298,   299,   300,     0,
       0,   301,   302,     0,   303,     0,   304,     0,   305,   306,
     307,   308,   309,   310,   311,   312,   313,     0,     0,   314,
     315,     0,     0,   316,   317,   318,   319,     0,     0,     0,
     320,   321,     0,     0,     0,     0,   322,   323,   324,     0,
     325,   326,   327,     0,   328,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   347,     0,   348,   349,
     350,   351,   352,     0,   353,   354,   355,     0,     0,   356,
       0,     0,     0,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,   365,   366,     0,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,   373,     0,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,   390,   391,   392,   393,     0,     0,     0,   394,
       0,     0,     0,   395,     0,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   405,   406,     0,   407,     0,     0,   408,     0,     0,
     409,   410,   411,     0,     0,   412,   413,     0,   414,   415,
     416,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,   424,   425,     0,     0,   426,   427,   428,   429,     0,
     132,   430,   431,     0,   432,   433,   434,   435,     0,     0,
       0,     0,     0,   436,   437,     0,     0,     0,   438,   439,
     440,   441,     0,   442,   443,     0,   444,   445,     0,   446,
     447,     0,     0,   448,     0,     0,   449,     0,   450,     0,
     451,   452,     0,     0,     0,     0,     0,     0,   453,     0,
       0,   454,     0,     0,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,     0,   459,   460,     0,   461,   462,
     463,     0,   135,   464,   136,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,   150,     0,     0,
       0,   151,     0,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,     0,
       0,   160,   161,     0,   162,   163,     0,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,     0,   184,   185,   186,   187,   188,  4117,   189,     0,
       0,   190,     0,     0,   191,     0,     0,     0,   192,     0,
       0,     0,   193,   194,   195,     0,     0,   196,     0,     0,
       0,     0,   197,   198,     0,     0,     0,     0,   199,     0,
     200,     0,     0,     0,   201,     0,   202,   203,   204,   205,
       0,     0,     0,   206,     0,     0,   207,   208,   209,     0,
       0,     0,   210,     0,   211,   212,     0,   213,   214,   215,
       0,     0,   216,   217,     0,   218,   219,   220,   221,   222,
       0,  4118,   223,   224,   225,     0,     0,   226,   227,     0,
     228,   229,   230,     0,     0,   231,     0,     0,     0,   232,
       0,   233,     0,   234,     0,   235,   236,   237,   238,   239,
       0,   240,     0,     0,     0,   241,   242,     0,   243,     0,
       0,   244,   245,     0,     0,     0,   246,   247,   248,   249,
       0,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,     0,   254,   255,     0,     0,     0,   256,     0,   257,
     258,     0,   259,   260,     0,     0,     0,   261,     0,     0,
     262,   263,     0,     0,   264,     0,     0,   265,   266,     0,
       0,     0,     0,     0,   267,   268,     0,   269,     0,   270,
       0,   271,   272,     0,     0,     0,     0,     0,     0,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,   288,     0,   289,   290,
     291,   292,     0,   293,   294,     0,     0,     0,     0,   295,
     296,   297,   298,   299,   300,     0,     0,   301,   302,     0,
     303,     0,   304,     0,   305,   306,   307,   308,   309,   310,
     311,   312,   313,     0,     0,   314,   315,     0,     0,   316,
     317,   318,   319,     0,     0,     0,   320,   321,     0,     0,
       0,     0,   322,   323,   324,     0,   325,   326,   327,     0,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   347,     0,   348,   349,   350,   351,   352,     0,
     353,   354,   355,     0,     0,   356,     0,     0,     0,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,   365,
     366,     0,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,   373,     0,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,   390,   391,
     392,   393,     0,     0,     0,   394,     0,     0,     0,   395,
       0,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,     0,     0,     0,     0,     0,     0,   405,   406,     0,
     407,     0,     0,   408,     0,     0,   409,   410,   411,     0,
       0,   412,   413,     0,   414,   415,   416,   417,   418,   419,
       0,     0,   420,   421,   422,   423,     0,   424,   425,     0,
       0,   426,   427,   428,   429,     0,     0,   430,   431,     0,
     432,   433,   434,   435,     0,     0,     0,     0,     0,   436,
     437,     0,     0,     0,   438,   439,   440,   441,     0,   442,
     443,     0,   444,   445,     0,   446,   447,     0,     0,   448,
       0,     0,   449,     0,   450,     0,   451,   452,     0,     0,
       0,     0,     0,     0,   453,     0,     0,   454,     0,     0,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
       0,   459,   460,     0,   461,   462,   463,     0,   135,   464,
     136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,   142,     0,   143,   144,   145,   146,   147,
     148,   149,     0,   150,     0,     0,     0,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
     157,   158,     0,     0,   159,     0,     0,   160,   161,     0,
     162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,     0,   184,   185,
     186,   187,   188,     0,   189,     0,     0,   190,     0,     0,
     191,     0,     0,     0,   192,     0,     0,     0,   193,   194,
     195,     0,     0,   196,     0,     0,     0,     0,   197,   198,
       0,     0,     0,     0,   199,     0,   200,     0,     0,     0,
     201,     0,   202,   203,   204,   205,     0,     0,     0,   206,
       0,     0,   207,   208,   209,     0,     0,     0,   210,     0,
     211,   212,     0,   213,   214,   215,     0,     0,   216,   217,
       0,   218,   219,   220,   221,   222,     0,     0,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,     0,   233,     0,   234,
       0,   235,   236,   237,   238,   239,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,     0,   244,   245,     0,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,     0,   254,   255,
       0,     0,     0,   256,     0,   257,   258,     0,   259,   260,
       0,     0,     0,   261,     0,     0,   262,   263,     0,     0,
     264,     0,     0,   265,   266,     0,     0,     0,     0,     0,
     267,   268,     0,   269,     0,   270,     0,   271,   272,     0,
       0,     0,     0,     0,     0,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,   288,     0,   289,   290,   291,   292,     0,   293,
     294,     0,     0,     0,     0,   295,   296,   297,   298,   299,
     300,     0,     0,   301,   302,     0,   303,     0,   304,     0,
     305,   306,   307,   308,   309,   310,   311,   312,   313,     0,
       0,   314,   315,     0,     0,   316,   317,   318,   319,     0,
       0,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,     0,   325,   326,   327,     0,   328,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,   345,   346,     0,   347,     0,
     348,   349,   350,   351,   352,     0,   353,   354,   355,     0,
       0,   356,     0,     0,     0,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,   365,   366,     0,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,   373,     0,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,   390,   391,   392,   393,     0,     0,
       0,   394,     0,     0,     0,   395,     0,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,     0,     0,     0,
     537,     0,     0,   405,   406,     0,   407,     0,     0,   408,
       0,     0,   409,   410,   411,     0,     0,   412,   413,     0,
     414,   415,   416,   417,   418,   419,     0,     0,   420,   421,
     422,   423,     0,   424,   425,     0,     0,   426,   427,   428,
     429,     0,     0,   430,   431,     0,   432,   433,   434,   435,
       0,     0,     0,     0,     0,   436,   437,     0,     0,     0,
     438,   439,   440,   441,     0,   442,   443,     0,   444,   445,
       0,   446,   447,     0,     0,   448,     0,     0,   449,     0,
     450,     0,   451,   452,     0,     0,     0,     0,     0,     0,
     453,     0,     0,   454,     0,     0,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,     0,   459,   460,     0,
     461,   462,   463,     0,   135,   464,   136,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,   142,
       0,   143,   144,   145,   146,   147,   148,   149,     0,   150,
       0,     0,     0,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,     0,     0,   160,   161,     0,   162,   163,     0,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
       0,   173,   174,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,     0,   184,   185,   186,   187,   188,     0,
     189,     0,     0,   190,     0,     0,   191,     0,     0,     0,
     192,     0,     0,     0,   193,   194,   195,     0,     0,   196,
       0,     0,     0,     0,   197,   198,     0,     0,     0,     0,
     199,     0,   200,     0,     0,     0,   201,     0,   202,   203,
     204,   205,     0,     0,     0,   206,     0,     0,   207,   208,
     209,     0,     0,     0,   210,     0,   211,   212,     0,   213,
     214,   215,     0,     0,   216,   217,     0,   218,   219,   220,
     221,   222,     0,     0,   223,   224,   225,     0,     0,   226,
     227,     0,   228,   229,   230,     0,     0,   231,     0,     0,
       0,   232,  1018,   233,     0,   234,     0,   235,   236,   237,
     238,   239,     0,   240,     0,     0,     0,   241,   242,     0,
     243,     0,     0,   244,   245,     0,     0,     0,   246,   247,
     248,   249,     0,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,     0,   254,   255,     0,     0,     0,   256,
       0,   257,   258,     0,   259,   260,     0,     0,     0,   261,
       0,     0,   262,   263,     0,     0,   264,     0,     0,   265,
     266,     0,     0,     0,     0,     0,   267,   268,     0,   269,
       0,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,   288,     0,
     289,   290,   291,   292,     0,   293,   294,     0,     0,     0,
       0,   295,   296,   297,   298,   299,   300,     0,     0,   301,
     302,     0,   303,     0,   304,     0,   305,   306,   307,   308,
     309,   310,   311,   312,   313,     0,     0,   314,   315,     0,
       0,   316,   317,   318,   319,     0,     0,     0,   320,   321,
       0,     0,     0,     0,   322,   323,   324,     0,   325,   326,
     327,     0,   328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   347,     0,   348,   349,   350,   351,
     352,     0,   353,   354,   355,     0,     0,   356,     0,     0,
       0,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,   365,   366,     0,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,   373,     0,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
     390,   391,   392,   393,     0,     0,     0,   394,     0,     0,
       0,   395,     0,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,     0,     0,     0,     0,     0,     0,   405,
     406,     0,   407,     0,     0,   408,     0,     0,   409,   410,
     411,     0,     0,   412,   413,     0,   414,   415,   416,   417,
     418,   419,     0,     0,   420,   421,   422,   423,     0,   424,
     425,     0,     0,   426,   427,   428,   429,     0,     0,   430,
     431,     0,   432,   433,   434,   435,     0,     0,     0,     0,
       0,   436,   437,     0,     0,     0,   438,   439,   440,   441,
       0,   442,   443,     0,   444,   445,     0,   446,   447,     0,
       0,   448,     0,     0,   449,     0,   450,     0,   451,   452,
       0,     0,     0,     0,     0,     0,   453,     0,     0,   454,
       0,     0,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,     0,   459,   460,     0,   461,   462,   463,     0,
     135,   464,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,   142,     0,   143,   144,   145,
     146,   147,   148,   149,     0,   150,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,     0,     0,   160,
     161,     0,   162,   163,     0,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,     0,
     184,   185,   186,   187,   188,     0,   189,     0,     0,   190,
       0,     0,   191,     0,     0,     0,   192,     0,     0,     0,
     193,   194,   195,     0,     0,   196,     0,     0,     0,     0,
     197,   198,     0,     0,     0,  1930,   199,     0,   200,     0,
       0,     0,   201,     0,   202,   203,   204,   205,     0,     0,
       0,   206,     0,     0,   207,   208,   209,     0,     0,     0,
     210,     0,   211,   212,     0,   213,   214,   215,     0,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,     0,
     223,   224,   225,     0,     0,   226,   227,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,   232,     0,   233,
       0,   234,     0,   235,   236,   237,   238,   239,     0,   240,
       0,     0,     0,   241,   242,     0,   243,     0,     0,   244,
     245,     0,     0,     0,   246,   247,   248,   249,     0,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,     0,
     254,   255,     0,     0,     0,   256,     0,   257,   258,     0,
     259,   260,     0,     0,     0,   261,     0,     0,   262,   263,
       0,     0,   264,     0,     0,   265,   266,     0,     0,     0,
       0,     0,   267,   268,     0,   269,     0,   270,     0,   271,
     272,     0,     0,     0,     0,     0,     0,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,   288,     0,   289,   290,   291,   292,
       0,   293,   294,     0,     0,     0,     0,   295,   296,   297,
     298,   299,   300,     0,     0,   301,   302,     0,   303,     0,
     304,     0,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     0,     0,   314,   315,     0,     0,   316,   317,   318,
     319,     0,     0,     0,   320,   321,     0,     0,     0,     0,
     322,   323,   324,     0,   325,   326,   327,     0,   328,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     347,     0,   348,   349,   350,   351,   352,     0,   353,   354,
     355,     0,     0,   356,     0,     0,     0,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,   365,   366,     0,
     367,   368,     0,   369,   370,   371,     0,     0,   372,     0,
     373,     0,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,   390,   391,   392,   393,
       0,     0,     0,   394,     0,     0,     0,   395,     0,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,     0,
       0,     0,     0,     0,     0,   405,   406,     0,   407,     0,
       0,   408,     0,     0,   409,   410,   411,     0,     0,   412,
     413,     0,   414,   415,   416,   417,   418,   419,     0,     0,
     420,   421,   422,   423,     0,   424,   425,     0,     0,   426,
     427,   428,   429,     0,     0,   430,   431,     0,   432,   433,
     434,   435,     0,     0,     0,     0,     0,   436,   437,     0,
       0,     0,   438,   439,   440,   441,     0,   442,   443,     0,
     444,   445,     0,   446,   447,     0,     0,   448,     0,     0,
     449,     0,   450,     0,   451,   452,     0,     0,     0,     0,
       0,     0,   453,     0,     0,   454,     0,     0,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,     0,   459,
     460,     0,   461,   462,   463,     0,   135,   464,   136,   137,
     138,   139,   140,     0,     0,     0,     0,     0,   141,     0,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,   150,     0,     0,     0,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,   157,   158,
       0,     0,   159,     0,     0,   160,   161,     0,   162,   163,
       0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,     0,   184,   185,   186,   187,
     188,     0,   189,     0,     0,   190,     0,     0,   191,     0,
       0,     0,   192,     0,     0,     0,   193,   194,   195,     0,
       0,   196,     0,     0,     0,     0,   197,   198,     0,     0,
       0,  2260,   199,     0,   200,     0,     0,     0,   201,     0,
     202,   203,   204,   205,     0,     0,     0,   206,     0,     0,
     207,   208,   209,     0,     0,     0,   210,     0,   211,   212,
       0,   213,   214,   215,     0,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,     0,   223,   224,   225,     0,
       0,   226,   227,     0,   228,   229,   230,     0,     0,   231,
       0,     0,     0,   232,     0,   233,     0,   234,     0,   235,
     236,   237,   238,   239,     0,   240,     0,     0,     0,   241,
     242,     0,   243,     0,     0,   244,   245,     0,     0,     0,
     246,   247,   248,   249,     0,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,     0,   254,   255,     0,     0,
       0,   256,     0,   257,   258,     0,   259,   260,     0,     0,
       0,   261,     0,     0,   262,   263,     0,     0,   264,     0,
       0,   265,   266,     0,     0,     0,     0,     0,   267,   268,
       0,   269,     0,   270,     0,   271,   272,     0,     0,     0,
       0,     0,     0,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
     288,     0,   289,   290,   291,   292,     0,   293,   294,     0,
       0,     0,     0,   295,   296,   297,   298,   299,   300,     0,
       0,   301,   302,     0,   303,     0,   304,     0,   305,   306,
     307,   308,   309,   310,   311,   312,   313,     0,     0,   314,
     315,     0,     0,   316,   317,   318,   319,     0,     0,     0,
     320,   321,     0,     0,     0,     0,   322,   323,   324,     0,
     325,   326,   327,     0,   328,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   347,     0,   348,   349,
     350,   351,   352,     0,   353,   354,   355,     0,     0,   356,
       0,     0,     0,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,   365,   366,     0,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,   373,     0,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,   390,   391,   392,   393,     0,     0,     0,   394,
       0,     0,     0,   395,     0,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   405,   406,     0,   407,     0,     0,   408,     0,     0,
     409,   410,   411,     0,     0,   412,   413,     0,   414,   415,
     416,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,   424,   425,     0,     0,   426,   427,   428,   429,     0,
       0,   430,   431,     0,   432,   433,   434,   435,     0,     0,
       0,     0,     0,  2261,   437,     0,     0,     0,   438,   439,
     440,   441,     0,   442,   443,     0,   444,   445,     0,   446,
     447,     0,     0,   448,     0,     0,   449,     0,   450,     0,
     451,   452,     0,     0,     0,     0,     0,     0,   453,     0,
       0,   454,     0,     0,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,     0,   459,   460,     0,   461,   462,
     463,     0,   135,   464,   136,   137,   138,   139,   140,  2761,
       0,     0,     0,     0,   141,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,   150,     0,     0,
       0,   151,     0,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,     0,
       0,   160,   161,     0,   162,   163,     0,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,     0,   184,   185,   186,   187,   188,     0,   189,     0,
       0,   190,     0,     0,   191,     0,     0,     0,   192,     0,
       0,     0,   193,   194,   195,     0,     0,   196,     0,     0,
       0,     0,   197,   198,     0,     0,     0,     0,   199,     0,
     200,     0,     0,     0,   201,     0,   202,   203,   204,   205,
       0,     0,     0,   206,     0,     0,   207,   208,   209,     0,
       0,     0,   210,     0,   211,   212,     0,   213,   214,   215,
       0,     0,   216,   217,     0,   218,   219,   220,   221,   222,
       0,     0,   223,   224,   225,     0,     0,   226,   227,     0,
     228,   229,   230,     0,     0,   231,     0,     0,     0,   232,
       0,   233,     0,   234,     0,   235,   236,   237,   238,   239,
       0,   240,     0,     0,     0,   241,   242,     0,   243,     0,
       0,   244,   245,     0,     0,     0,   246,   247,   248,   249,
       0,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,     0,   254,   255,     0,     0,     0,   256,     0,   257,
     258,     0,   259,   260,     0,     0,     0,   261,     0,     0,
     262,   263,     0,     0,   264,     0,     0,   265,   266,     0,
       0,     0,     0,     0,   267,   268,     0,   269,     0,   270,
       0,   271,   272,     0,     0,     0,     0,     0,     0,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,   288,     0,   289,   290,
     291,   292,     0,   293,   294,     0,     0,     0,     0,   295,
     296,   297,   298,   299,   300,     0,     0,   301,   302,     0,
     303,     0,   304,     0,   305,   306,   307,   308,   309,   310,
     311,   312,   313,     0,     0,   314,   315,     0,     0,   316,
     317,   318,   319,     0,     0,     0,   320,   321,     0,     0,
       0,     0,   322,   323,   324,     0,   325,   326,   327,     0,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   347,     0,   348,   349,   350,   351,   352,     0,
     353,   354,   355,     0,     0,   356,     0,     0,     0,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,   365,
     366,     0,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,   373,     0,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,   390,   391,
     392,   393,     0,     0,     0,   394,     0,     0,     0,   395,
       0,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,     0,     0,     0,     0,     0,     0,   405,   406,     0,
     407,     0,     0,   408,     0,     0,   409,   410,   411,     0,
       0,   412,   413,     0,   414,   415,   416,   417,   418,   419,
       0,     0,   420,   421,   422,   423,     0,   424,   425,     0,
       0,   426,   427,   428,   429,     0,     0,   430,   431,     0,
     432,   433,   434,   435,     0,     0,     0,     0,     0,   436,
     437,     0,     0,     0,   438,   439,   440,   441,     0,   442,
     443,     0,   444,   445,     0,   446,   447,     0,     0,   448,
       0,     0,   449,     0,   450,     0,   451,   452,     0,     0,
       0,     0,     0,     0,   453,     0,     0,   454,     0,     0,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
       0,   459,   460,     0,   461,   462,   463,     0,   135,   464,
     136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,   142,     0,   143,   144,   145,   146,   147,
     148,   149,     0,   150,     0,     0,     0,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
     157,   158,     0,     0,   159,     0,     0,   160,   161,     0,
     162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,     0,   184,   185,
     186,   187,   188,     0,   189,     0,     0,   190,     0,     0,
     191,     0,     0,     0,   192,     0,     0,     0,   193,   194,
     195,     0,     0,   196,     0,     0,     0,     0,   197,   198,
       0,     0,     0,     0,   199,     0,   200,     0,     0,     0,
     201,     0,   202,   203,   204,   205,     0,     0,     0,   206,
       0,     0,   207,   208,   209,     0,     0,     0,   210,     0,
     211,   212,     0,   213,   214,   215,     0,     0,   216,   217,
       0,   218,   219,   220,   221,   222,     0,     0,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,   232,     0,   233,     0,   234,
       0,   235,   236,   237,   238,   239,     0,   240,     0,     0,
       0,   241,   242,     0,   243,     0,     0,   244,   245,     0,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,     0,   254,   255,
       0,     0,     0,   256,     0,   257,   258,     0,   259,   260,
       0,     0,     0,   261,     0,     0,   262,   263,     0,     0,
     264,     0,     0,   265,   266,     0,     0,     0,     0,     0,
     267,   268,     0,   269,     0,   270,     0,   271,   272,     0,
       0,     0,     0,     0,     0,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,   288,     0,   289,   290,   291,   292,     0,   293,
     294,     0,     0,     0,     0,   295,   296,   297,   298,   299,
     300,     0,     0,   301,   302,     0,   303,     0,   304,     0,
     305,   306,   307,   308,   309,   310,   311,   312,   313,     0,
       0,   314,   315,     0,     0,   316,   317,   318,   319,     0,
       0,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,     0,   325,   326,   327,     0,   328,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,     0,     0,   344,   345,   346,  2840,   347,     0,
     348,   349,   350,   351,   352,     0,   353,   354,   355,     0,
       0,   356,     0,     0,     0,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,   365,   366,     0,   367,   368,
       0,   369,   370,   371,     0,     0,   372,     0,   373,     0,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,     0,     0,     0,   390,   391,   392,   393,     0,     0,
       0,   394,     0,     0,     0,   395,     0,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,     0,     0,     0,
       0,     0,     0,   405,   406,     0,   407,     0,     0,   408,
       0,     0,   409,   410,   411,     0,     0,   412,   413,     0,
     414,   415,   416,   417,   418,   419,     0,     0,   420,   421,
     422,   423,     0,   424,   425,     0,     0,   426,   427,   428,
     429,     0,     0,   430,   431,     0,   432,   433,   434,   435,
       0,     0,     0,     0,     0,   436,   437,     0,     0,     0,
     438,   439,   440,   441,     0,   442,   443,     0,   444,   445,
       0,   446,   447,     0,     0,   448,     0,     0,   449,     0,
     450,     0,   451,   452,     0,     0,     0,     0,     0,     0,
     453,     0,     0,   454,     0,     0,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,     0,   459,   460,     0,
     461,   462,   463,     0,   135,   464,   136,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,   142,
       0,   143,   144,   145,   146,   147,   148,   149,     0,   150,
       0,     0,     0,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,     0,     0,   160,   161,     0,   162,   163,     0,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
       0,   173,   174,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,     0,   184,   185,   186,   187,   188,     0,
     189,     0,     0,   190,     0,     0,   191,     0,     0,     0,
     192,     0,     0,     0,   193,   194,   195,     0,     0,   196,
       0,     0,     0,     0,   197,   198,     0,     0,     0,     0,
     199,     0,   200,     0,     0,     0,   201,     0,   202,   203,
     204,   205,     0,     0,     0,   206,     0,     0,   207,   208,
     209,     0,     0,     0,   210,     0,   211,   212,     0,   213,
     214,   215,     0,     0,   216,   217,     0,   218,   219,   220,
     221,   222,     0,     0,   223,   224,   225,     0,     0,   226,
     227,     0,   228,   229,   230,     0,     0,   231,     0,     0,
       0,   232,     0,   233,     0,   234,     0,   235,   236,   237,
     238,   239,     0,   240,     0,     0,     0,   241,   242,     0,
     243,     0,     0,   244,   245,     0,     0,     0,   246,   247,
     248,   249,     0,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,     0,   254,   255,     0,     0,     0,   256,
       0,   257,   258,     0,   259,   260,     0,     0,     0,   261,
       0,     0,   262,   263,     0,     0,   264,     0,     0,   265,
     266,     0,     0,     0,     0,     0,   267,   268,     0,   269,
       0,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,   288,     0,
     289,   290,   291,   292,     0,   293,   294,     0,     0,     0,
       0,   295,   296,   297,   298,   299,   300,     0,     0,   301,
     302,     0,   303,     0,   304,     0,   305,   306,   307,   308,
     309,   310,   311,   312,   313,     0,     0,   314,   315,     0,
       0,   316,   317,   318,   319,     0,     0,     0,   320,   321,
       0,     0,     0,     0,   322,   323,   324,     0,   325,   326,
     327,     0,   328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,     0,     0,
     344,   345,   346,     0,   347,     0,   348,   349,   350,   351,
     352,     0,   353,   354,   355,     0,     0,   356,     0,     0,
       0,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,   365,   366,     0,   367,   368,     0,   369,   370,   371,
       0,     0,   372,     0,   373,     0,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,     0,     0,     0,
     390,   391,   392,   393,     0,     0,     0,   394,     0,     0,
       0,   395,     0,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,     0,     0,     0,     0,     0,     0,   405,
     406,     0,   407,     0,     0,   408,     0,     0,   409,   410,
     411,     0,     0,   412,   413,     0,   414,   415,   416,   417,
     418,   419,     0,     0,   420,   421,   422,   423,     0,   424,
     425,     0,     0,   426,   427,   428,   429,     0,   132,   430,
     431,     0,   432,   433,   434,   435,     0,     0,     0,     0,
       0,   436,   437,     0,     0,     0,   438,   439,   440,   441,
       0,   442,   443,     0,   444,   445,     0,   446,   447,     0,
       0,   448,     0,     0,   449,     0,   450,     0,   451,   452,
       0,     0,     0,     0,     0,     0,   453,     0,     0,   454,
       0,     0,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,     0,   459,   460,     0,   461,   462,   463,     0,
     135,   464,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,   142,     0,   143,   144,   145,
     146,   147,   148,   149,     0,   150,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,     0,     0,   160,
     161,     0,   162,   163,     0,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,     0,
     184,   185,   186,   187,   188,     0,   189,     0,     0,   190,
       0,     0,   191,     0,     0,     0,   192,     0,     0,     0,
     193,   194,   195,     0,     0,   196,     0,     0,     0,     0,
     197,   198,     0,     0,     0,  2260,   199,     0,   200,     0,
       0,     0,   201,     0,   202,   203,   204,   205,     0,     0,
       0,   206,     0,     0,   207,   208,   209,     0,     0,     0,
     210,     0,   211,   212,     0,   213,   214,   215,     0,     0,
     216,   217,     0,   218,   219,   220,   221,   222,     0,     0,
     223,   224,   225,     0,     0,   226,   227,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,   232,     0,   233,
       0,   234,     0,   235,   236,   237,   238,   239,     0,   240,
       0,     0,     0,   241,   242,     0,   243,     0,     0,   244,
     245,     0,     0,     0,   246,   247,   248,   249,     0,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,     0,
     254,   255,     0,     0,     0,   256,     0,   257,   258,     0,
     259,   260,     0,     0,     0,   261,     0,     0,   262,   263,
       0,     0,   264,     0,     0,   265,   266,     0,     0,     0,
       0,     0,   267,   268,     0,   269,     0,   270,     0,   271,
     272,     0,     0,     0,     0,     0,     0,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,   288,     0,   289,   290,   291,   292,
       0,   293,   294,     0,     0,     0,     0,   295,   296,   297,
     298,   299,   300,     0,     0,   301,   302,     0,   303,     0,
     304,     0,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     0,     0,   314,   315,     0,     0,   316,   317,   318,
     319,     0,     0,     0,   320,   321,     0,     0,     0,     0,
     322,   323,   324,     0,   325,   326,   327,     0,   328,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,     0,     0,   344,   345,   346,     0,
     347,     0,   348,   349,   350,   351,   352,     0,   353,   354,
     355,     0,     0,   356,     0,     0,     0,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,   365,   366,     0,
     367,   368,     0,   369,   370,   371,     0,     0,   372,     0,
     373,     0,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,   390,   391,   392,   393,
       0,     0,     0,   394,     0,     0,     0,   395,     0,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,     0,
       0,     0,     0,     0,     0,   405,   406,     0,   407,     0,
       0,   408,     0,     0,   409,   410,   411,     0,     0,   412,
     413,     0,   414,   415,   416,   417,   418,   419,     0,     0,
     420,   421,   422,   423,     0,   424,   425,     0,     0,   426,
     427,   428,   429,     0,     0,   430,   431,     0,   432,   433,
     434,   435,     0,     0,     0,     0,     0,   436,   437,     0,
       0,     0,   438,   439,   440,   441,     0,   442,   443,     0,
     444,   445,     0,   446,   447,     0,     0,   448,     0,     0,
     449,     0,   450,     0,   451,   452,     0,     0,     0,     0,
       0,     0,   453,     0,     0,   454,     0,     0,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,     0,   459,
     460,     0,   461,   462,   463,     0,   135,   464,   136,   137,
     138,   139,   140,     0,     0,     0,     0,     0,   141,     0,
       0,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,   150,     0,     0,     0,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,   157,   158,
       0,     0,   159,     0,     0,   160,   161,     0,   162,   163,
       0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,     0,   184,   185,   186,   187,
     188,     0,   189,     0,     0,   190,     0,     0,   191,     0,
       0,     0,   192,     0,     0,     0,   193,   194,   195,     0,
       0,   196,     0,     0,     0,     0,   197,   198,     0,     0,
       0,     0,   199,     0,   200,     0,     0,     0,   201,     0,
     202,   203,   204,   205,     0,     0,     0,   206,     0,     0,
     207,   208,   209,     0,     0,     0,   210,     0,   211,   212,
       0,   213,   214,   215,     0,     0,   216,   217,     0,   218,
     219,   220,   221,   222,     0,     0,   223,   224,   225,     0,
       0,   226,   227,     0,   228,   229,   230,     0,     0,   231,
       0,     0,     0,   232,     0,   233,     0,   234,     0,   235,
     236,   237,   238,   239,     0,   240,     0,     0,     0,   241,
     242,     0,   243,     0,     0,   244,   245,     0,     0,     0,
     246,   247,   248,   249,     0,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,     0,   254,   255,     0,     0,
       0,   256,     0,   257,   258,     0,   259,   260,     0,     0,
       0,   261,     0,     0,   262,   263,     0,     0,   264,     0,
       0,   265,   266,     0,     0,     0,     0,     0,   267,   268,
       0,   269,     0,   270,     0,   271,   272,     0,     0,     0,
       0,     0,     0,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
     288,     0,   289,   290,   291,   292,     0,   293,   294,     0,
       0,     0,     0,   295,   296,   297,   298,   299,   300,     0,
       0,   301,   302,     0,   303,     0,   304,     0,   305,   306,
     307,   308,   309,   310,   311,   312,   313,     0,     0,   314,
     315,     0,     0,   316,   317,   318,   319,     0,     0,     0,
     320,   321,     0,     0,     0,     0,   322,   323,   324,     0,
     325,   326,   327,     0,   328,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
       0,     0,   344,   345,   346,     0,   347,     0,   348,   349,
     350,   351,   352,     0,   353,   354,   355,     0,     0,   356,
       0,     0,     0,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,   365,   366,     0,   367,   368,     0,   369,
     370,   371,     0,     0,   372,     0,   373,     0,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,     0,
       0,     0,   390,   391,   392,   393,     0,     0,     0,   394,
       0,     0,     0,   395,     0,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   405,   406,     0,   407,     0,     0,   408,     0,     0,
     409,   410,   411,     0,     0,   412,   413,     0,   414,   415,
     416,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,   424,   425,     0,     0,   426,   427,   428,   429,     0,
       0,   430,   431,     0,   432,   433,   434,   435,     0,     0,
       0,     0,     0,   436,   437,     0,     0,     0,   438,   439,
     440,   441,     0,   442,   443,     0,   444,   445,     0,   446,
     447,     0,     0,   448,     0,     0,   449,     0,   450,     0,
     451,   452,     0,     0,     0,     0,     0,     0,   453,     0,
       0,   454,     0,     0,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,     0,   459,   460,     0,   461,   462,
     463,     0,   135,   464,   136,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,   150,     0,     0,
       0,   151,     0,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,     0,
       0,   160,   161,     0,   162,   163,     0,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,     0,   184,   185,   186,   187,   188,     0,   189,     0,
       0,   190,     0,     0,   191,     0,     0,     0,   192,     0,
       0,     0,   193,   194,   195,     0,     0,   196,     0,     0,
       0,     0,   197,   198,     0,     0,     0,     0,   199,     0,
     200,     0,     0,     0,   201,     0,   202,   203,   204,   205,
       0,     0,     0,   206,     0,     0,   207,   208,   209,     0,
       0,     0,   210,     0,   211,   212,     0,   213,   214,   215,
       0,     0,   216,   217,     0,   218,   219,   220,   221,   222,
       0,     0,   223,   224,   225,     0,     0,   226,   227,     0,
     228,  1689,   230,     0,     0,   231,     0,     0,     0,   232,
       0,   233,     0,   234,     0,   235,   236,   237,   238,   239,
       0,   240,     0,     0,     0,   241,   242,     0,   243,     0,
       0,   244,   245,     0,     0,     0,   246,   247,   248,   249,
       0,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,     0,   254,   255,     0,     0,     0,   256,     0,   257,
     258,     0,   259,   260,     0,     0,     0,   261,     0,     0,
     262,   263,     0,     0,   264,     0,     0,   265,   266,     0,
       0,     0,     0,     0,   267,   268,     0,   269,     0,   270,
       0,   271,   272,     0,     0,     0,     0,     0,     0,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,   288,     0,   289,   290,
     291,   292,     0,   293,   294,     0,     0,     0,     0,   295,
     296,   297,   298,   299,   300,     0,     0,   301,   302,     0,
     303,     0,   304,     0,   305,   306,   307,   308,   309,   310,
     311,   312,   313,     0,     0,   314,   315,     0,     0,   316,
    1690,   318,   319,     0,     0,     0,   320,   321,     0,     0,
       0,     0,   322,   323,   324,     0,   325,   326,   327,     0,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,     0,     0,   344,   345,
     346,     0,   347,     0,   348,   349,   350,   351,   352,     0,
     353,   354,   355,     0,     0,   356,     0,     0,     0,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,   365,
     366,     0,   367,   368,     0,   369,   370,   371,     0,     0,
     372,     0,   373,     0,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,     0,     0,     0,   390,   391,
     392,   393,     0,     0,     0,   394,     0,     0,     0,   395,
       0,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,     0,     0,     0,     0,     0,     0,   405,   406,     0,
     407,     0,     0,   408,     0,     0,   409,   410,   411,     0,
       0,   412,   413,     0,   414,   415,   416,   417,   418,   419,
       0,     0,   420,   421,   422,   423,     0,   424,   425,     0,
       0,   426,   427,   428,   429,     0,     0,   430,   431,     0,
     432,   433,   434,   435,     0,     0,     0,     0,     0,   436,
     437,     0,     0,     0,   438,   439,   440,   441,     0,   442,
     443,     0,   444,   445,     0,   446,   447,     0,     0,   448,
       0,     0,   449,     0,   450,     0,   451,   452,     0,     0,
       0,     0,     0,     0,   453,     0,     0,   454,     0,     0,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
       0,   459,   460,     0,   461,   462,   463,     0,   135,   464,
     136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,     0,     0,   143,   144,   145,   146,   147,
     148,     0,     0,  -327,     0,     0,     0,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
       0,     0,     0,     0,   159,  3701,     0,   160,   161,     0,
     162,     0,     0,     0,     0,   165,   166,   167,  3702,   169,
     170,     0,   171,   172,     0,   173,     0,   175,     0,   177,
     178,   179,   180,   181,     0,   182,   183,     0,   184,   185,
     186,     0,   188,     0,   189,     0,     0,   190,     0,     0,
     191,     0,     0,     0,   192,     0,     0,     0,   193,   194,
     195,     0,     0,   196,     0,     0,     0,     0,   197,     0,
       0,     0,     0,     0,   199,     0,   200,     0,     0,     0,
     201,     0,   202,   203,   204,   205,     0,     0,     0,     0,
       0,     0,   207,   208,   209,     0,  -297,  -297,   210,     0,
    -297,   212,     0,   213,   214,   215,     0,     0,   216,   217,
       0,   218,   219,   220,   221,     0,     0,     0,   223,   224,
     225,     0,     0,   226,   227,  3703,   228,   229,   230,     0,
       0,     0,     0,     0,     0,   232,     0,   233,     0,   234,
       0,   235,   236,   237,   238,   239,     0,   240,     0,     0,
       0,     0,   242,     0,     0,     0,     0,     0,   245,     0,
       0,     0,   246,   247,   248,   249,  3704,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,     0,   254,     0,
       0,     0,     0,   256,     0,   257,   258,     0,   259,   260,
    3705,     0,     0,   261,     0,     0,     0,   263,     0,     0,
     264,  3706,     0,   265,   266,     0,     0,     0,     0,     0,
     267,   268,     0,   269,     0,   270,     0,   271,   272,     0,
       0,     0,     0,  -282,     0,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,   288,     0,   289,   290,   291,   292,     0,   293,
     294,     0,     0,     0,     0,   295,   296,   297,   298,   299,
     300,     0,     0,   301,   302,     0,   303,     0,   304,     0,
     305,   306,   307,   308,   309,   310,   311,   312,   313,     0,
       0,   314,   315,     0,     0,   316,   317,   318,   319,     0,
       0,     0,     0,   321,     0,     0,     0,     0,   322,   323,
     324,     0,   325,   326,  3707,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   330,   331,     0,
       0,   333,   334,   335,     0,   337,   338,   339,   340,   341,
     342,     0,     0,     0,     0,   345,   346,     0,   347,     0,
     348,   349,   350,   351,   352,     0,   353,   354,   355,     0,
       0,   356,     0,     0,     0,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,   365,   366,     0,   367,     0,
       0,   369,     0,   371,  -282,     0,   372,     0,     0,     0,
     374,     0,     0,   376,   377,  3708,     0,     0,     0,   379,
     380,   381,   382,   383,   384,     0,   386,   387,     0,   388,
       0,     0,     0,     0,   390,   391,   392,     0,     0,     0,
       0,   394,     0,     0,     0,   395,     0,     0,   397,     0,
     399,     0,   400,     0,     0,   403,   404,     0,     0,     0,
       0,     0,     0,   405,   406,     0,   407,     0,     0,   408,
       0,     0,   409,     0,   411,     0,     0,     0,   413,     0,
     414,   415,   416,   417,   418,   419,     0,     0,   420,   421,
     422,   423,     0,   424,   425,     0,     0,   426,   427,   428,
     429,     0,     0,   430,   431,     0,   432,   433,   434,   435,
       0,     0,     0,     0,     0,   436,   437,     0,     0,     0,
       0,   439,   440,   441,     0,   442,   443,     0,   444,   445,
       0,     0,     0,     0,     0,   448,     0,     0,   449,     0,
       0,     0,   451,   452,     0,     0,     0,     0,     0,     0,
     453,     0,     0,   454,     0,     0,     0,   455,   456,   457,
     458,     0,     0,  -282,     0,     0,     0,   459,     0,     0,
     461,     0,   463,     0,   135,   464,   136,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,     0,
       0,   143,   144,   145,   146,   147,   148,     0,     0,  -327,
       0,     0,     0,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,     0,     0,     0,     0,
     159,  3701,     0,   160,   161,     0,   162,     0,     0,     0,
       0,   165,   166,   167,  3702,   169,   170,     0,   171,   172,
       0,   173,     0,   175,     0,   177,   178,   179,   180,   181,
       0,   182,   183,     0,   184,   185,   186,     0,   188,     0,
     189,     0,     0,   190,     0,     0,   191,     0,     0,     0,
     192,     0,     0,     0,   193,   194,   195,     0,     0,   196,
       0,     0,     0,     0,   197,     0,     0,     0,     0,     0,
     199,     0,   200,     0,     0,     0,   201,     0,   202,   203,
     204,   205,     0,     0,     0,     0,     0,     0,   207,   208,
     209,     0,  -318,     0,   210,     0,  -318,   212,     0,   213,
     214,   215,     0,     0,   216,   217,     0,   218,   219,   220,
     221,     0,     0,     0,   223,   224,   225,     0,     0,   226,
     227,  3703,   228,   229,   230,     0,     0,     0,     0,     0,
       0,   232,     0,   233,     0,   234,     0,   235,   236,   237,
     238,   239,     0,   240,     0,     0,     0,     0,   242,     0,
       0,     0,     0,     0,   245,     0,     0,     0,   246,   247,
     248,   249,  3704,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,     0,   254,     0,     0,     0,     0,   256,
       0,   257,   258,     0,   259,   260,  3705,     0,     0,   261,
       0,     0,     0,   263,     0,     0,   264,  3706,     0,   265,
     266,     0,     0,     0,     0,     0,   267,   268,     0,   269,
       0,   270,     0,   271,   272,     0,     0,     0,     0,  -282,
       0,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,   288,     0,
     289,   290,   291,   292,     0,   293,   294,     0,     0,     0,
       0,   295,   296,   297,   298,   299,   300,     0,     0,   301,
     302,     0,   303,     0,   304,     0,   305,   306,   307,   308,
     309,   310,   311,   312,   313,     0,     0,   314,   315,     0,
       0,   316,   317,   318,   319,     0,     0,     0,     0,   321,
       0,     0,     0,     0,   322,   323,   324,     0,   325,   326,
    3707,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   330,   331,     0,     0,   333,   334,   335,
       0,   337,   338,   339,   340,   341,   342,     0,     0,     0,
       0,   345,   346,     0,   347,     0,   348,   349,   350,   351,
     352,     0,   353,   354,   355,     0,     0,   356,     0,     0,
       0,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,   365,   366,     0,   367,     0,     0,   369,     0,   371,
    -282,     0,   372,     0,     0,     0,   374,     0,     0,   376,
     377,  3708,     0,     0,     0,   379,   380,   381,   382,   383,
     384,     0,   386,   387,     0,   388,     0,     0,     0,     0,
     390,   391,   392,     0,     0,     0,     0,   394,     0,     0,
       0,   395,     0,     0,   397,     0,   399,     0,   400,     0,
       0,   403,   404,     0,     0,     0,     0,     0,     0,   405,
     406,     0,   407,     0,     0,   408,     0,     0,   409,     0,
     411,     0,     0,     0,   413,     0,   414,   415,   416,   417,
     418,   419,     0,     0,   420,   421,   422,   423,     0,   424,
     425,     0,     0,   426,   427,   428,   429,     0,     0,   430,
     431,     0,   432,   433,   434,   435,     0,     0,     0,     0,
       0,   436,   437,     0,     0,     0,     0,   439,   440,   441,
       0,   442,   443,     0,   444,   445,     0,     0,     0,     0,
       0,   448,     0,     0,   449,     0,     0,     0,   451,   452,
       0,     0,     0,     0,     0,     0,   453,     0,     0,   454,
       0,     0,     0,   455,   456,   457,   458,  -318,     0,  -282,
       0,     0,     0,   459,     0,     0,   461,     0,   463,     0,
     135,   464,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,     0,     0,   143,   144,   145,
     146,   147,   148,     0,     0,  -327,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,     0,     0,     0,     0,   159,  3701,     0,   160,
     161,     0,   162,     0,     0,     0,     0,   165,   166,   167,
    3702,   169,   170,     0,   171,   172,     0,   173,     0,   175,
       0,   177,   178,   179,   180,   181,     0,   182,   183,     0,
     184,   185,   186,     0,   188,     0,   189,     0,     0,   190,
       0,     0,   191,     0,     0,     0,   192,     0,     0,     0,
     193,   194,   195,     0,     0,   196,     0,     0,     0,     0,
     197,     0,     0,     0,     0,     0,   199,     0,   200,     0,
       0,     0,   201,     0,   202,   203,   204,   205,     0,     0,
       0,     0,     0,     0,   207,   208,   209,     0,  -315,     0,
     210,     0,  -315,   212,     0,   213,   214,   215,     0,     0,
     216,   217,     0,   218,   219,   220,   221,     0,     0,     0,
     223,   224,   225,     0,     0,   226,   227,  3703,   228,   229,
     230,     0,     0,     0,     0,     0,     0,   232,     0,   233,
       0,   234,     0,   235,   236,   237,   238,   239,     0,   240,
       0,     0,     0,     0,   242,     0,     0,     0,     0,     0,
     245,     0,     0,     0,   246,   247,   248,   249,  3704,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,     0,
     254,     0,     0,     0,     0,   256,     0,   257,   258,     0,
     259,   260,  3705,     0,     0,   261,     0,     0,     0,   263,
       0,     0,   264,  3706,     0,   265,   266,     0,     0,     0,
       0,     0,   267,   268,     0,   269,     0,   270,     0,   271,
     272,     0,     0,     0,     0,  -282,     0,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,   288,     0,   289,   290,   291,   292,
       0,   293,   294,     0,     0,     0,     0,   295,   296,   297,
     298,   299,   300,     0,     0,   301,   302,     0,   303,     0,
     304,     0,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     0,     0,   314,   315,     0,     0,   316,   317,   318,
     319,     0,     0,     0,     0,   321,     0,     0,     0,     0,
     322,   323,   324,     0,   325,   326,  3707,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   330,
     331,     0,     0,   333,   334,   335,     0,   337,   338,   339,
     340,   341,   342,     0,     0,     0,     0,   345,   346,     0,
     347,     0,   348,   349,   350,   351,   352,     0,   353,   354,
     355,     0,     0,   356,     0,     0,     0,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,   365,   366,     0,
     367,     0,     0,   369,     0,   371,  -282,     0,   372,     0,
       0,     0,   374,     0,     0,   376,   377,  3708,     0,     0,
       0,   379,   380,   381,   382,   383,   384,     0,   386,   387,
       0,   388,     0,     0,     0,     0,   390,   391,   392,     0,
       0,     0,     0,   394,     0,     0,     0,   395,     0,     0,
     397,     0,   399,     0,   400,     0,     0,   403,   404,     0,
       0,     0,     0,     0,     0,   405,   406,     0,   407,     0,
       0,   408,     0,     0,   409,     0,   411,     0,     0,     0,
     413,     0,   414,   415,   416,   417,   418,   419,     0,     0,
     420,   421,   422,   423,     0,   424,   425,     0,     0,   426,
     427,   428,   429,     0,     0,   430,   431,     0,   432,   433,
     434,   435,     0,     0,     0,     0,     0,   436,   437,     0,
       0,     0,     0,   439,   440,   441,     0,   442,   443,     0,
     444,   445,     0,     0,     0,     0,     0,   448,     0,     0,
     449,     0,     0,     0,   451,   452,     0,     0,     0,     0,
       0,     0,   453,     0,     0,   454,     0,     0,     0,   455,
     456,   457,   458,  -315,     0,  -282,     0,     0,     0,   459,
       0,     0,   461,     0,   463,     0,   135,   464,   136,   137,
     138,   139,   140,     0,     0,     0,     0,     0,   141,     0,
       0,     0,     0,   143,   144,   145,   146,   147,   148,     0,
       0,  -327,     0,     0,     0,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,     0,     0,
       0,     0,   159,  3701,     0,   160,   161,     0,   162,     0,
       0,     0,     0,   165,   166,   167,  3702,   169,   170,     0,
     171,   172,     0,   173,     0,   175,     0,   177,   178,   179,
     180,   181,     0,   182,   183,     0,   184,   185,   186,     0,
     188,     0,   189,     0,     0,   190,     0,     0,   191,     0,
       0,     0,   192,     0,     0,     0,   193,   194,   195,     0,
       0,   196,     0,     0,     0,     0,   197,     0,     0,     0,
       0,     0,   199,     0,   200,     0,     0,     0,   201,     0,
     202,   203,   204,   205,     0,     0,     0,     0,     0,     0,
     207,   208,   209,     0,     0,     0,   210,     0,  4016,   212,
       0,   213,   214,   215,     0,     0,   216,   217,     0,   218,
     219,   220,   221,     0,     0,     0,   223,   224,   225,     0,
       0,   226,   227,  3703,   228,   229,   230,     0,     0,     0,
       0,     0,     0,   232,     0,   233,     0,   234,     0,   235,
     236,   237,   238,   239,     0,   240,     0,     0,     0,     0,
     242,     0,     0,     0,     0,     0,   245,     0,     0,     0,
     246,   247,   248,   249,  3704,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,     0,   254,     0,     0,     0,
       0,   256,     0,   257,   258,     0,   259,   260,  3705,     0,
       0,   261,     0,     0,     0,   263,     0,     0,   264,  3706,
       0,   265,   266,     0,     0,     0,     0,     0,   267,   268,
       0,   269,     0,   270,     0,   271,   272,     0,     0,     0,
       0,  -282,     0,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
     288,     0,   289,   290,   291,   292,     0,   293,   294,     0,
       0,     0,     0,   295,   296,   297,   298,   299,   300,     0,
       0,   301,   302,     0,   303,     0,   304,     0,   305,   306,
     307,   308,   309,   310,   311,   312,   313,     0,     0,   314,
     315,     0,     0,   316,   317,   318,   319,     0,     0,     0,
       0,   321,     0,     0,     0,     0,   322,   323,   324,     0,
     325,   326,  3707,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   330,   331,     0,     0,   333,
     334,   335,     0,   337,   338,   339,   340,   341,   342,     0,
       0,     0,     0,   345,   346,     0,   347,     0,   348,   349,
     350,   351,   352,     0,   353,   354,   355,     0,     0,   356,
       0,     0,     0,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,   365,   366,     0,   367,     0,     0,   369,
       0,   371,  -282,     0,   372,     0,     0,     0,   374,     0,
       0,   376,   377,  3708,     0,     0,     0,   379,   380,   381,
     382,   383,   384,     0,   386,   387,     0,   388,     0,     0,
       0,     0,   390,   391,   392,     0,     0,     0,     0,   394,
       0,     0,     0,   395,     0,     0,   397,     0,   399,     0,
     400,     0,     0,   403,   404,     0,     0,     0,     0,     0,
       0,   405,   406,     0,   407,     0,     0,   408,     0,     0,
     409,     0,   411,     0,     0,     0,   413,     0,   414,   415,
     416,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,   424,   425,     0,     0,   426,   427,   428,   429,     0,
       0,   430,   431,     0,   432,   433,   434,   435,     0,     0,
       0,     0,     0,   436,   437,     0,     0,     0,     0,   439,
     440,   441,     0,   442,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   448,     0,     0,   449,     0,     0,     0,
     451,   452,     0,     0,     0,     0,     0,     0,   453,     0,
       0,   454,     0,     0,     0,   455,   456,   457,   458,     0,
       0,  -282,     0,     0,     0,   459,     0,     0,   461,     0,
     463,     0,   135,   464,   136,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,     0,     0,   143,
     144,   145,   146,   147,   148,     0,     0,  -327,     0,     0,
       0,   151,     0,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,     0,     0,     0,     0,   159,  3701,
       0,   160,   161,     0,   162,     0,     0,     0,     0,   165,
     166,   167,  3702,   169,   170,     0,   171,   172,     0,   173,
       0,   175,     0,   177,   178,   179,   180,   181,     0,   182,
     183,     0,   184,   185,   186,     0,   188,     0,   189,     0,
       0,   190,     0,     0,   191,     0,     0,     0,   192,     0,
       0,     0,   193,   194,   195,     0,     0,   196,     0,     0,
       0,     0,   197,     0,     0,     0,     0,     0,   199,     0,
     200,     0,     0,     0,   201,     0,   202,   203,   204,   205,
       0,     0,     0,     0,     0,     0,   207,   208,   209,     0,
       0,     0,   210,     0,  -320,   212,     0,   213,   214,   215,
       0,     0,   216,   217,     0,   218,   219,   220,   221,     0,
       0,     0,   223,   224,   225,     0,     0,   226,   227,  3703,
     228,   229,   230,     0,     0,     0,     0,     0,     0,   232,
       0,   233,     0,   234,     0,   235,   236,   237,   238,   239,
       0,   240,     0,     0,     0,     0,   242,     0,     0,     0,
       0,     0,   245,     0,     0,     0,   246,   247,   248,   249,
    3704,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,     0,   254,     0,     0,     0,     0,   256,     0,   257,
     258,     0,   259,   260,  3705,     0,     0,   261,     0,     0,
       0,   263,     0,     0,   264,  3706,     0,   265,   266,     0,
       0,     0,     0,     0,   267,   268,     0,   269,     0,   270,
       0,   271,   272,     0,     0,     0,     0,  -282,     0,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,   288,     0,   289,   290,
     291,   292,     0,   293,   294,     0,     0,     0,     0,   295,
     296,   297,   298,   299,   300,     0,     0,   301,   302,     0,
     303,     0,   304,     0,   305,   306,   307,   308,   309,   310,
     311,   312,   313,     0,     0,   314,   315,     0,     0,   316,
     317,   318,   319,     0,     0,     0,     0,   321,     0,     0,
       0,     0,   322,   323,   324,     0,   325,   326,  3707,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   330,   331,     0,     0,   333,   334,   335,     0,   337,
     338,   339,   340,   341,   342,     0,     0,     0,     0,   345,
     346,     0,   347,     0,   348,   349,   350,   351,   352,     0,
     353,   354,   355,     0,     0,   356,     0,     0,     0,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,   365,
     366,     0,   367,     0,     0,   369,     0,   371,  -282,     0,
     372,     0,     0,     0,   374,     0,     0,   376,   377,  3708,
       0,     0,     0,   379,   380,   381,   382,   383,   384,     0,
     386,   387,     0,   388,     0,     0,     0,     0,   390,   391,
     392,     0,     0,     0,     0,   394,     0,     0,     0,   395,
       0,     0,   397,     0,   399,     0,   400,     0,     0,   403,
     404,     0,     0,     0,     0,     0,     0,   405,   406,     0,
     407,     0,     0,   408,     0,     0,   409,     0,   411,     0,
       0,     0,   413,     0,   414,   415,   416,   417,   418,   419,
       0,     0,   420,   421,   422,   423,     0,   424,   425,     0,
       0,   426,   427,   428,   429,     0,     0,   430,   431,     0,
     432,   433,   434,   435,     0,     0,     0,     0,     0,   436,
     437,     0,     0,     0,     0,   439,   440,   441,     0,   442,
     443,     0,   444,   445,     0,     0,     0,     0,     0,   448,
       0,     0,   449,     0,     0,     0,   451,   452,     0,     0,
       0,     0,     0,     0,   453,     0,     0,   454,     0,     0,
       0,   455,   456,   457,   458,     0,     0,  -282,     0,     0,
       0,   459,     0,     0,   461,     0,   463,     0,   135,   464,
     136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,     0,     0,   143,   144,   145,   146,   147,
     148,     0,     0,  -327,     0,     0,     0,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
       0,     0,     0,     0,   159,  3701,     0,   160,   161,     0,
     162,     0,     0,     0,     0,   165,   166,   167,  3702,   169,
     170,     0,   171,   172,     0,   173,     0,   175,     0,   177,
     178,   179,   180,   181,     0,   182,   183,     0,   184,   185,
     186,     0,   188,     0,   189,     0,     0,   190,     0,     0,
     191,     0,     0,     0,   192,     0,     0,     0,   193,   194,
     195,     0,     0,   196,     0,     0,     0,     0,   197,     0,
       0,     0,     0,     0,   199,     0,   200,     0,     0,     0,
     201,     0,   202,   203,   204,   205,     0,     0,     0,     0,
       0,     0,   207,   208,   209,     0,     0,     0,   210,     0,
    4122,   212,     0,   213,   214,   215,     0,     0,   216,   217,
       0,   218,   219,   220,   221,     0,     0,     0,   223,   224,
     225,     0,     0,   226,   227,  3703,   228,   229,   230,     0,
       0,     0,     0,     0,     0,   232,     0,   233,     0,   234,
       0,   235,   236,   237,   238,   239,     0,   240,     0,     0,
       0,     0,   242,     0,     0,     0,     0,     0,   245,     0,
       0,     0,   246,   247,   248,   249,  3704,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,     0,   254,     0,
       0,     0,     0,   256,     0,   257,   258,     0,   259,   260,
    3705,     0,     0,   261,     0,     0,     0,   263,     0,     0,
     264,  3706,     0,   265,   266,     0,     0,     0,     0,     0,
     267,   268,     0,   269,     0,   270,     0,   271,   272,     0,
       0,     0,     0,  -282,     0,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,   288,     0,   289,   290,   291,   292,     0,   293,
     294,     0,     0,     0,     0,   295,   296,   297,   298,   299,
     300,     0,     0,   301,   302,     0,   303,     0,   304,     0,
     305,   306,   307,   308,   309,   310,   311,   312,   313,     0,
       0,   314,   315,     0,     0,   316,   317,   318,   319,     0,
       0,     0,     0,   321,     0,     0,     0,     0,   322,   323,
     324,     0,   325,   326,  3707,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   330,   331,     0,
       0,   333,   334,   335,     0,   337,   338,   339,   340,   341,
     342,     0,     0,     0,     0,   345,   346,     0,   347,     0,
     348,   349,   350,   351,   352,     0,   353,   354,   355,     0,
       0,   356,     0,     0,     0,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,   365,   366,     0,   367,     0,
       0,   369,     0,   371,  -282,     0,   372,     0,     0,     0,
     374,     0,     0,   376,   377,  3708,     0,     0,     0,   379,
     380,   381,   382,   383,   384,     0,   386,   387,     0,   388,
       0,     0,     0,     0,   390,   391,   392,     0,     0,     0,
       0,   394,     0,     0,     0,   395,     0,     0,   397,     0,
     399,     0,   400,     0,     0,   403,   404,     0,     0,     0,
       0,     0,     0,   405,   406,     0,   407,     0,     0,   408,
       0,     0,   409,     0,   411,     0,     0,     0,   413,     0,
     414,   415,   416,   417,   418,   419,     0,     0,   420,   421,
     422,   423,     0,   424,   425,     0,     0,   426,   427,   428,
     429,     0,     0,   430,   431,     0,   432,   433,   434,   435,
       0,     0,     0,     0,     0,   436,   437,     0,     0,     0,
       0,   439,   440,   441,     0,   442,   443,     0,   444,   445,
       0,     0,     0,     0,     0,   448,     0,     0,   449,     0,
       0,     0,   451,   452,     0,     0,     0,     0,     0,     0,
     453,     0,     0,   454,     0,     0,     0,   455,   456,   457,
     458,     0,     0,  -282,     0,     0,     0,   459,     0,     0,
     461,     0,   463,     0,   135,   464,   136,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,     0,
       0,   143,   144,   145,   146,   147,   148,     0,     0,  -327,
       0,     0,     0,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,     0,     0,     0,     0,
     159,  3701,     0,   160,   161,     0,   162,     0,     0,     0,
       0,   165,   166,   167,  3702,   169,   170,     0,   171,   172,
       0,   173,     0,   175,     0,   177,   178,   179,   180,   181,
       0,   182,   183,     0,   184,   185,   186,     0,   188,     0,
     189,     0,     0,   190,     0,     0,   191,     0,     0,     0,
     192,     0,     0,     0,   193,   194,   195,     0,     0,   196,
       0,     0,     0,     0,   197,     0,     0,     0,     0,     0,
     199,     0,   200,     0,     0,     0,   201,     0,   202,   203,
     204,   205,     0,     0,     0,     0,     0,     0,   207,   208,
     209,     0,     0,     0,   210,     0,  4168,   212,     0,   213,
     214,   215,     0,     0,   216,   217,     0,   218,   219,   220,
     221,     0,     0,     0,   223,   224,   225,     0,     0,   226,
     227,  3703,   228,   229,   230,     0,     0,     0,     0,     0,
       0,   232,     0,   233,     0,   234,     0,   235,   236,   237,
     238,   239,     0,   240,     0,     0,     0,     0,   242,     0,
       0,     0,     0,     0,   245,     0,     0,     0,   246,   247,
     248,   249,  3704,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,     0,   254,     0,     0,     0,     0,   256,
       0,   257,   258,     0,   259,   260,  3705,     0,     0,   261,
       0,     0,     0,   263,     0,     0,   264,  3706,     0,   265,
     266,     0,     0,     0,     0,     0,   267,   268,     0,   269,
       0,   270,     0,   271,   272,     0,     0,     0,     0,  -282,
       0,     0,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,     0,   286,   287,   288,     0,
     289,   290,   291,   292,     0,   293,   294,     0,     0,     0,
       0,   295,   296,   297,   298,   299,   300,     0,     0,   301,
     302,     0,   303,     0,   304,     0,   305,   306,   307,   308,
     309,   310,   311,   312,   313,     0,     0,   314,   315,     0,
       0,   316,   317,   318,   319,     0,     0,     0,     0,   321,
       0,     0,     0,     0,   322,   323,   324,     0,   325,   326,
    3707,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   330,   331,     0,     0,   333,   334,   335,
       0,   337,   338,   339,   340,   341,   342,     0,     0,     0,
       0,   345,   346,     0,   347,     0,   348,   349,   350,   351,
     352,     0,   353,   354,   355,     0,     0,   356,     0,     0,
       0,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,   365,   366,     0,   367,     0,     0,   369,     0,   371,
    -282,     0,   372,     0,     0,     0,   374,     0,     0,   376,
     377,  3708,     0,     0,     0,   379,   380,   381,   382,   383,
     384,     0,   386,   387,     0,   388,     0,     0,     0,     0,
     390,   391,   392,     0,     0,     0,     0,   394,     0,     0,
       0,   395,     0,     0,   397,     0,   399,     0,   400,     0,
       0,   403,   404,     0,     0,     0,     0,     0,     0,   405,
     406,     0,   407,     0,     0,   408,     0,     0,   409,     0,
     411,     0,     0,     0,   413,     0,   414,   415,   416,   417,
     418,   419,     0,     0,   420,   421,   422,   423,     0,   424,
     425,     0,     0,   426,   427,   428,   429,     0,     0,   430,
     431,     0,   432,   433,   434,   435,     0,     0,     0,     0,
       0,   436,   437,     0,     0,     0,     0,   439,   440,   441,
       0,   442,   443,     0,   444,   445,     0,     0,     0,     0,
       0,   448,     0,     0,   449,     0,     0,     0,   451,   452,
       0,     0,     0,     0,     0,     0,   453,     0,     0,   454,
       0,     0,     0,   455,   456,   457,   458,     0,     0,  -282,
       0,     0,     0,   459,     0,     0,   461,     0,   463,     0,
     135,   464,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,     0,     0,   143,   144,   145,
     146,   147,   148,     0,     0,  -327,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,     0,     0,     0,     0,   159,  3701,     0,   160,
     161,     0,   162,     0,     0,     0,     0,   165,   166,   167,
    3702,   169,   170,     0,   171,   172,     0,   173,     0,   175,
       0,   177,   178,   179,   180,   181,     0,   182,   183,     0,
     184,   185,   186,     0,   188,     0,   189,     0,     0,   190,
       0,     0,   191,     0,     0,     0,   192,     0,     0,     0,
     193,   194,   195,     0,     0,   196,     0,     0,     0,     0,
     197,     0,     0,     0,     0,     0,   199,     0,   200,     0,
       0,     0,   201,     0,   202,   203,   204,   205,     0,     0,
       0,     0,     0,     0,   207,   208,   209,     0,     0,     0,
     210,     0,  -301,   212,     0,   213,   214,   215,     0,     0,
     216,   217,     0,   218,   219,   220,   221,     0,     0,     0,
     223,   224,   225,     0,     0,   226,   227,  3703,   228,   229,
     230,     0,     0,     0,     0,     0,     0,   232,     0,   233,
       0,   234,     0,   235,   236,   237,   238,   239,     0,   240,
       0,     0,     0,     0,   242,     0,     0,     0,     0,     0,
     245,     0,     0,     0,   246,   247,   248,   249,  3704,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,     0,
     254,     0,     0,     0,     0,   256,     0,   257,   258,     0,
     259,   260,  3705,     0,     0,   261,     0,     0,     0,   263,
       0,     0,   264,  3706,     0,   265,   266,     0,     0,     0,
       0,     0,   267,   268,     0,   269,     0,   270,     0,   271,
     272,     0,     0,     0,     0,  -282,     0,     0,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,     0,   286,   287,   288,     0,   289,   290,   291,   292,
       0,   293,   294,     0,     0,     0,     0,   295,   296,   297,
     298,   299,   300,     0,     0,   301,   302,     0,   303,     0,
     304,     0,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     0,     0,   314,   315,     0,     0,   316,   317,   318,
     319,     0,     0,     0,     0,   321,     0,     0,     0,     0,
     322,   323,   324,     0,   325,   326,  3707,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   330,
     331,     0,     0,   333,   334,   335,     0,   337,   338,   339,
     340,   341,   342,     0,     0,     0,     0,   345,   346,     0,
     347,     0,   348,   349,   350,   351,   352,     0,   353,   354,
     355,     0,     0,   356,     0,     0,     0,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,   365,   366,     0,
     367,     0,     0,   369,     0,   371,  -282,     0,   372,     0,
       0,     0,   374,     0,     0,   376,   377,  3708,     0,     0,
       0,   379,   380,   381,   382,   383,   384,     0,   386,   387,
       0,   388,     0,     0,     0,     0,   390,   391,   392,     0,
       0,     0,     0,   394,     0,     0,     0,   395,     0,     0,
     397,     0,   399,     0,   400,     0,     0,   403,   404,     0,
       0,     0,     0,     0,     0,   405,   406,     0,   407,     0,
       0,   408,     0,     0,   409,     0,   411,     0,     0,     0,
     413,     0,   414,   415,   416,   417,   418,   419,     0,     0,
     420,   421,   422,   423,     0,   424,   425,     0,     0,   426,
     427,   428,   429,     0,     0,   430,   431,     0,   432,   433,
     434,   435,     0,     0,     0,     0,     0,   436,   437,     0,
       0,     0,     0,   439,   440,   441,     0,   442,   443,     0,
     444,   445,     0,     0,     0,     0,     0,   448,     0,     0,
     449,     0,     0,     0,   451,   452,     0,     0,     0,     0,
       0,     0,   453,     0,     0,   454,     0,     0,     0,   455,
     456,   457,   458,     0,     0,  -282,     0,     0,     0,   459,
       0,     0,   461,     0,   463,     0,   135,   464,   136,   137,
     138,   139,   140,     0,     0,     0,     0,     0,   141,     0,
       0,     0,     0,   143,   144,   145,   146,   147,   148,     0,
       0,  -327,     0,     0,     0,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,     0,     0,
       0,     0,   159,  3701,     0,   160,   161,     0,   162,     0,
       0,     0,     0,   165,   166,   167,  3702,   169,   170,     0,
     171,   172,     0,   173,     0,   175,     0,   177,   178,   179,
     180,   181,     0,   182,   183,     0,   184,   185,   186,     0,
     188,     0,   189,     0,     0,   190,     0,     0,   191,     0,
       0,     0,   192,     0,     0,     0,   193,   194,   195,     0,
       0,   196,     0,     0,     0,     0,   197,     0,     0,     0,
       0,     0,   199,     0,   200,     0,     0,     0,   201,     0,
     202,   203,   204,   205,     0,     0,     0,     0,     0,     0,
     207,   208,   209,     0,     0,     0,   210,     0,     0,   212,
       0,   213,   214,   215,     0,     0,   216,   217,     0,   218,
     219,   220,   221,     0,     0,     0,   223,   224,   225,     0,
       0,   226,   227,  3703,   228,   229,   230,     0,     0,     0,
       0,     0,     0,   232,     0,   233,     0,   234,     0,   235,
     236,   237,   238,   239,     0,   240,     0,     0,     0,     0,
     242,     0,     0,     0,     0,     0,   245,     0,     0,     0,
     246,   247,   248,   249,  3704,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,     0,   254,     0,     0,     0,
       0,   256,     0,   257,   258,     0,   259,   260,  3705,     0,
       0,   261,     0,     0,     0,   263,     0,     0,   264,  3706,
       0,   265,   266,     0,     0,     0,     0,     0,   267,   268,
       0,   269,     0,   270,     0,   271,   272,     0,     0,     0,
       0,  -282,     0,     0,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,     0,   286,   287,
     288,     0,   289,   290,   291,   292,     0,   293,   294,     0,
       0,     0,     0,   295,   296,   297,   298,   299,   300,     0,
       0,   301,   302,     0,   303,     0,   304,     0,   305,   306,
     307,   308,   309,   310,   311,   312,   313,     0,     0,   314,
     315,     0,     0,   316,   317,   318,   319,     0,     0,     0,
       0,   321,     0,     0,     0,     0,   322,   323,   324,     0,
     325,   326,  3707,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   330,   331,     0,     0,   333,
     334,   335,     0,   337,   338,   339,   340,   341,   342,     0,
       0,     0,     0,   345,   346,     0,   347,     0,   348,   349,
     350,   351,   352,     0,   353,   354,   355,     0,     0,   356,
       0,     0,     0,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,   365,   366,     0,   367,     0,     0,   369,
       0,   371,  -282,     0,   372,     0,     0,     0,   374,     0,
       0,   376,   377,  3708,     0,     0,     0,   379,   380,   381,
     382,   383,   384,     0,   386,   387,     0,   388,     0,     0,
       0,     0,   390,   391,   392,     0,     0,     0,     0,   394,
       0,     0,     0,   395,     0,     0,   397,     0,   399,     0,
     400,     0,     0,   403,   404,     0,     0,     0,     0,     0,
       0,   405,   406,     0,   407,     0,     0,   408,     0,     0,
     409,     0,   411,     0,     0,     0,   413,     0,   414,   415,
     416,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,   424,   425,     0,     0,   426,   427,   428,   429,     0,
       0,   430,   431,     0,   432,   433,   434,   435,     0,     0,
       0,     0,     0,   436,   437,     0,     0,     0,     0,   439,
     440,   441,     0,   442,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   448,     0,     0,   449,     0,     0,     0,
     451,   452,     0,     0,     0,     0,     0,     0,   453,     0,
       0,   454,     0,     0,     0,   455,   456,   457,   458,     0,
       0,  -282,     0,     0,     0,   459,     0,     0,   461,     0,
     463,     0,   135,   464,   136,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,     0,     0,   143,
     144,   145,   146,   147,   148,     0,     0,  -327,     0,     0,
       0,   151,     0,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,     0,     0,     0,     0,   159,  3701,
       0,   160,   161,     0,   162,     0,     0,     0,     0,   165,
     166,   167,  3702,   169,   170,     0,   171,   172,     0,   173,
       0,   175,     0,   177,   178,   179,   180,   181,     0,   182,
     183,     0,   184,   185,   186,     0,   188,     0,   189,     0,
       0,   190,     0,     0,   191,     0,     0,     0,   192,     0,
       0,     0,   193,   194,   195,     0,     0,   196,     0,     0,
       0,     0,   197,     0,     0,     0,     0,     0,   199,     0,
     200,     0,     0,     0,   201,     0,   202,   203,   204,   205,
       0,     0,     0,     0,     0,     0,   207,   208,   209,     0,
       0,     0,   210,     0,     0,   212,     0,   213,   214,   215,
       0,     0,   216,   217,     0,   218,   219,   220,   221,     0,
       0,     0,   223,   224,   225,     0,     0,   226,   227,  3703,
     228,   229,   230,     0,     0,     0,     0,     0,     0,   232,
       0,   233,     0,   234,     0,   235,   236,   237,   238,   239,
       0,   240,     0,     0,     0,     0,   242,     0,     0,     0,
       0,     0,   245,     0,     0,     0,   246,   247,   248,   249,
    3704,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,     0,   254,     0,     0,     0,     0,   256,     0,   257,
     258,     0,   259,   260,  3705,     0,     0,   261,     0,     0,
       0,   263,     0,     0,   264,  3706,     0,   265,   266,     0,
       0,     0,     0,     0,   267,   268,     0,   269,     0,   270,
       0,   271,   272,     0,     0,     0,     0,  -282,     0,     0,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,     0,   286,   287,   288,     0,   289,   290,
     291,   292,     0,   293,   294,     0,     0,     0,     0,   295,
     296,   297,   298,   299,   300,     0,     0,   301,   302,     0,
     303,     0,   304,     0,   305,   306,   307,   308,   309,   310,
     311,   312,   313,     0,     0,   314,   315,     0,     0,   316,
     317,   318,   319,     0,     0,     0,     0,   321,     0,     0,
       0,     0,   322,   323,   324,     0,   325,   326,  3707,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   330,   331,     0,     0,   333,   334,   335,     0,   337,
     338,   339,   340,   341,   342,     0,     0,     0,     0,   345,
     346,     0,   347,     0,   348,   349,   350,   351,   352,     0,
     353,   354,   355,     0,     0,   356,     0,     0,     0,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,   365,
     366,     0,   367,     0,     0,   369,     0,   371,  -282,     0,
     372,     0,     0,     0,   374,     0,     0,   376,   377,  3708,
       0,     0,     0,   379,   380,   381,   382,   383,   384,     0,
     386,   387,     0,   388,     0,     0,     0,     0,   390,   391,
     392,     0,     0,     0,     0,   394,     0,     0,     0,   395,
       0,     0,   397,     0,   399,     0,   400,     0,     0,   403,
     404,     0,     0,     0,     0,     0,     0,   405,   406,     0,
     407,     0,     0,   408,     0,     0,   409,     0,   411,     0,
       0,     0,   413,     0,   414,   415,   416,   417,   418,   419,
       0,     0,   420,   421,   422,   423,     0,   424,   425,     0,
       0,   426,   427,   428,   429,     0,     0,   430,   431,     0,
     432,   433,   434,   435,     0,     0,     0,     0,     0,   436,
     437,     0,     0,     0,     0,   439,   440,   441,     0,   442,
     443,     0,   444,   445,     0,     0,     0,     0,     0,   448,
       0,     0,  4019,     0,     0,     0,   451,   452,     0,     0,
       0,     0,     0,     0,   453,     0,     0,   454,     0,     0,
       0,   455,   456,   457,   458,     0,     0,  -282,     0,     0,
       0,   459,     0,     0,   461,     0,   463,     0,   135,   464,
     136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,     0,     0,   143,   144,   145,   146,   147,
     148,     0,     0,     0,     0,     0,     0,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
       0,     0,     0,     0,   159,     0,     0,   160,   161,     0,
     162,     0,     0,     0,     0,   165,   166,   167,     0,   169,
     170,     0,   171,   172,     0,   173,     0,   175,     0,   177,
     178,   179,   180,   181,     0,   182,   183,     0,   184,   185,
     186,     0,   188,     0,   189,     0,     0,   190,     0,     0,
     191,     0,     0,     0,   192,     0,     0,     0,   193,   194,
     195,     0,     0,   196,     0,     0,     0,     0,   197,     0,
       0,     0,     0,     0,   199,     0,   200,     0,     0,     0,
     201,     0,   202,   203,   204,   205,     0,     0,     0,     0,
       0,     0,   207,   208,   209,     0,     0,     0,   210,     0,
       0,   212,     0,   213,   214,   215,     0,     0,   216,   217,
       0,   218,   219,   220,   221,     0,     0,     0,   223,   224,
     225,     0,     0,   226,   227,     0,   228,   229,   230,     0,
       0,     0,     0,     0,     0,   232,     0,   233,     0,   234,
       0,   235,   236,   237,   238,   239,     0,   240,     0,     0,
       0,     0,   242,     0,     0,     0,     0,     0,   245,     0,
       0,     0,   246,   247,   248,   249,     0,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,     0,   254,     0,
       0,     0,     0,   256,     0,   257,   258,     0,   259,   260,
       0,     0,     0,   261,     0,     0,     0,   263,     0,     0,
     264,     0,     0,   265,   266,     0,     0,     0,     0,     0,
     267,   268,     0,   269,     0,   270,     0,   271,   272,     0,
       0,     0,     0,     0,     0,     0,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,     0,
     286,   287,   288,     0,   289,   290,   291,   292,     0,   293,
     294,     0,     0,     0,     0,   295,   296,   297,   298,   299,
     300,     0,     0,   301,   302,     0,   303,     0,   304,     0,
     305,   306,   307,   308,   309,   310,   311,   312,   313,     0,
       0,   314,   315,     0,     0,   316,   317,   318,   319,     0,
       0,     0,     0,   321,     0,     0,     0,     0,   322,   323,
     324,     0,   325,   326,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   330,   331,     0,
       0,   333,   334,   335,     0,   337,   338,   339,   340,   341,
     342,     0,     0,     0,     0,   345,   346,     0,   347,     0,
     348,   349,   350,   351,   352,     0,   353,   354,   355,     0,
       0,   356,     0,     0,     0,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,   365,   366,     0,   367,     0,
       0,   369,     0,   371,     0,     0,   372,     0,     0,     0,
     374,     0,     0,   376,   377,     0,     0,     0,     0,   379,
     380,   381,   382,   383,   384,     0,   386,   387,     0,   388,
       0,     0,     0,     0,   390,   391,   392,     0,     0,     0,
       0,   394,     0,     0,     0,   395,     0,     0,   397,     0,
     399,     0,   400,     0,     0,   403,   404,     0,     0,     0,
       0,     0,     0,   405,   406,     0,   407,     0,     0,   408,
       0,     0,   409,     0,   411,     0,     0,     0,   413,     0,
     414,   415,   416,   417,   418,   419,     0,     0,   420,   421,
     422,   423,     0,   424,   425,     0,     0,   426,   427,   428,
     429,     0,     0,   430,   431,     0,   432,   433,   434,   435,
       0,     0,     0,     0,     0,   436,   437,     0,     0,     0,
       0,   439,   440,   441,     0,   442,   443,     0,   444,   445,
       0,     0,     0,     0,     0,   448,     0,     0,   449,     0,
       0,     0,   451,   452,     0,     0,     0,     0,     0,     0,
     453,     0,     0,   454,     0,     0,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,     0,   459,     0,     0,
     461,     0,   463,     0,     0,   464
};

#define yypact_value_is_default(yystate) \
  ((yystate) == (-3598))

#define yytable_value_is_error(yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       6,   550,   613,   550,   934,  1116,   935,   572,  1605,    20,
    1087,   851,   121,    19,   622,   623,    22,  1116,    29,  1022,
    1740,  1708,  1414,  1240,    35,    31,     6,  1315,  1063,   655,
     656,   640,    38,  1016,  1017,    41,   660,   875,   770,    45,
     586,   679,  2379,  1727,   899,  1412,  1958,    53,  2230,  1138,
     877,   495,  2263,  2264,  2265,  1179,  1145,  1377,  2309,  2186,
    2023,   939,   900,  2648,  2700,  2028,   692,  1054,  1395,  1146,
    1147,  3063,   899,  1150,  1151,  1152,  1153,  1403,  1155,  1156,
    1157,  1158,  1159,  1160,  1161,  1162,   712,    93,  2002,   939,
     714,    22,     4,   717,  1868,   609,   610,  2498,   724,   725,
     726,  2297,  1246,  2484,  1326,  2115,  1727,  1866,  1797,   115,
    3069,   117,  1983,  1869,   120,   121,   122,  1873,  2274,  2275,
    2832,  1866,  1344,   732,   733,   734,  2253,  2374,  1884,  1456,
    1352,  1353,   743,   627,  1983,   744,  2353,   117,  1894,  3278,
     120,  1849,  2512,    18,  1821,  1822,  2516,  2290,  3126,  3127,
    2158,  2954,  3130,    33,    70,  2298,    16,    15,    16,    50,
    1385,  1838,    93,   834,    15,    16,     9,  1858,    46,    59,
      29,  3149,    73,    18,    16,  3325,  3087,  3155,  1855,  1856,
      15,    16,  1738,   901,  2109,    28,  2486,   104,   166,    45,
    2751,    34,    18,    62,  1871,  1872,  1972,  1874,   124,    31,
    1877,  1878,    67,  2641,  1881,   220,  2460,   137,  2356,  1886,
    2567,  1921,    65,  1890,  1891,  1892,  1893,    15,    16,   156,
    1897,   166,  1899,   127,  1983,    20,   772,  1840,  1905,    35,
      24,  1908,   186,  1910,    15,    16,  1944,  2515,  1983,  2338,
    2339,  1949,  3335,    35,   915,   153,    57,  1955,  1956,   253,
      11,   184,  1960,  1812,   106,   254,  3853,    64,   153,   205,
      33,   357,  2826,    58,    59,  2167,   370,    50,    42,   351,
      55,  1395,     8,   181,   149,    15,    16,   238,   153,   214,
    2006,   424,  3274,   829,   256,   195,   270,   130,   249,   149,
    1967,  1968,  1969,  1970,   615,    22,   347,  3678,    24,    20,
      15,    16,   122,   431,   238,  3322,    15,    16,   153,    20,
      15,    16,    33,   255,    73,   941,   258,    15,    16,    19,
     183,   372,    33,   120,   448,   340,    47,   153,   238,   519,
      74,   260,  1456,   120,  2635,   491,    47,    58,    59,   240,
     143,  2243,   183,   199,   814,    15,    16,    58,    59,    15,
      16,   199,   149,  2452,  2453,   166,    15,    16,   357,   170,
     121,   337,   149,    58,    59,   466,   218,   236,  2282,   550,
     181,   480,  3496,   120,   160,   519,   482,   199,    15,    16,
       8,    58,    59,  3361,    15,    16,   994,   995,   996,   218,
     231,    68,  3370,   241,    15,    16,   202,   503,   581,   231,
     186,    29,   149,    61,    15,    16,   382,   516,  3532,   143,
     202,  3389,   341,    12,   570,  1053,  3394,   395,  2719,   241,
     610,   253,   605,   604,    77,   125,   220,  3737,  1066,   143,
      39,   532,   386,  3814,   161,   368,  1365,   421,   174,    15,
      16,   287,   124,   183,  1176,   271,   767,   357,   918,   963,
     395,   271,    15,    16,   396,    73,    15,    16,    15,    16,
      15,    16,   605,    18,    15,    16,   438,    67,   519,  2342,
     333,  2682,  3611,   434,   480,  3434,   482,    15,    16,   603,
     495,   240,  1320,   611,  3501,  1323,  4083,   422,    15,    16,
    1328,   302,  1884,   499,   220,  3487,   430,   503,   356,   603,
     294,   359,    15,    16,  2715,   356,   512,  1385,   359,   605,
     516,  2707,   518,  1840,   287,  3076,  1354,  1355,  2769,    15,
      16,   356,   180,  2249,   359,   531,   456,    61,  3092,   611,
    1141,  1655,   465,  2750,   133,  1385,  2753,  2754,   429,  1866,
    1149,    10,   224,    15,    16,   491,   399,  3857,    70,   457,
    1377,   550,   326,   559,   339,  2772,  1633,  1166,   356,   513,
     575,   359,   457,  1234,    15,    16,  3004,  1644,   294,  1791,
    1647,   577,   183,   399,  3533,   579,   408,  1455,    15,    16,
     586,  2881,   588,  2342,   395,   441,  2500,  1913,  1259,  2460,
    3683,  1035,  1036,   599,   600,  2303,   580,  2342,   359,   605,
    2748,   607,  2856,   609,   610,  1455,    15,    16,   614,   615,
    3246,  2460,  1056,   619,   340,   560,   356,    15,    16,   359,
     600,  1065,   240,   629,   630,   631,   491,   605,   323,   635,
     556,   500,  1350,  1077,  1078,  1079,    15,    16,  2995,   576,
    1627,   356,  1086,  2568,   359,  1972,   429,   356,  2358,  2340,
     359,   356,  2362,  2361,   359,  2363,  1983,   574,   356,   466,
     769,   359,  2370,  1395,   136,   508,  2376,  2377,   599,  3819,
    1184,   530,  1218,   679,   605,  2383,  2386,   372,  2454,   569,
     581,  2389,    15,    16,   527,   530,   356,   603,   530,   359,
     356,   534,  2369,   359,  3653,  2877,  2404,   356,  3609,  2255,
     359,  2460,  2412,   581,  2381,  2607,  2608,  2609,  2321,  3066,
    3849,   562,  3515,   519,   605,  2460,  1840,   560,  2426,   356,
     624,   581,   359,   603,  1456,   356,   384,   519,   359,  1243,
    2289,   737,   590,   739,   609,   356,  1282,   589,   359,   590,
    3110,  1966,  2656,  2657,  1258,   356,   604,   605,   359,   609,
    2652,  2653,  2654,   548,   605,   590,  2855,   763,   764,   765,
     586,   767,   768,   769,  2451,   771,   772,   876,  2776,   495,
    1441,  2497,  2482,   608,  3144,   578,    15,    16,  1324,  3796,
     356,  2458,  3152,   359,   764,    15,    16,  2998,   768,  3159,
     443,   771,   590,   356,   605,  3754,   359,   356,   542,   356,
     359,   356,   359,   809,   359,   356,   604,   605,   359,   590,
    1304,   605,   609,   819,    15,    16,    15,    16,   356,  3001,
    3959,   359,   609,   829,   830,  2192,  3037,   548,   834,   356,
    3108,  3109,   359,    15,    16,    15,    16,   548,  3116,  4149,
    1389,  3119,  3120,   356,   578,  3823,   359,  3825,  1972,   575,
     590,   572,   166,  3100,    15,    16,  3073,  3053,  3136,  1983,
     356,  3057,   609,   359,   578,   605,   388,  2740,   622,   623,
     876,  2591,  3150,   407,   556,   590,   485,  3155,  3156,  3157,
    3158,   590,   603,   103,   356,   590,  3013,   359,   819,   604,
     605,   491,   590,   551,  3606,   604,   605,   506,   298,   830,
     605,    15,    16,   339,   186,   356,  2626,   605,   359,   915,
    3053,   823,   340,  1551,  3057,   610,  3317,   386,   149,   356,
     590,   539,   359,   532,   590,   149,    15,    16,   138,   935,
    3889,   590,  1787,   776,   604,   605,    82,  2296,   604,   605,
     160,   271,  1780,   304,   562,   604,   605,   356,   107,    68,
     359,   110,  1790,   590,   149,  1793,  1794,   963,   356,   590,
    1787,   359,  1817,  2355,  2356,  2649,   186,   604,   605,   590,
    1464,  3963,    68,  2887,   605,  2052,   584,   356,   414,   590,
     359,  2740,   183,   214,   605,  2856,  2274,  2275,   510,   179,
    1817,    15,    16,   604,  2321,  2740,    15,    16,   139,   181,
     326,   117,    15,    16,   151,  2008,   346,  2856,  1014,  2698,
     179,   533,  1018,   169,   590,  2342,   485,    15,    16,  1128,
     413,  3595,   348,   356,   214,   222,   359,   590,  2649,   605,
     254,   590,    80,   590,   231,   590,  2810,  1646,  3048,   590,
    2129,   486,   605,  1651,    50,   214,   605,  1053,   605,  3430,
    3206,   448,   590,   120,   605,  2811,  1165,   372,    24,   254,
    1066,  2283,   158,   590,   181,   534,   121,   605,  2212,   399,
     192,    15,    16,   220,  3822,   146,   118,   590,   605,  2766,
      12,   395,  2408,  1014,  2301,   371,   157,  1018,  1966,  1727,
     375,  3302,   605,   486,   590,  1703,   121,  2856,    15,    16,
    2135,  2136,  3503,  2700,   386,   574,   404,  3009,  1840,   605,
    1116,  2856,   117,  3309,  3310,  1661,  1966,   356,   590,  2230,
     359,   597,  1128,  2200,    15,    16,   356,  2454,   604,   359,
     416,  3705,  3706,  2460,   442,  3705,  3706,   132,   260,   590,
    1249,  2128,   354,   117,    15,    16,   263,   575,  3062,  1663,
      71,  2138,   268,   590,   605,   356,   517,   356,   359,  1165,
     359,  3746,    15,    16,  1170,   362,   386,  3803,   605,  1175,
    1716,  1717,    15,    16,   356,   230,   356,   359,  1184,   359,
     625,   590,   543,    15,    16,   183,   342,   229,  2299,    15,
      16,   422,   590,   340,   466,   356,   605,  2321,   359,  1748,
    2299,   133,   176,   603,   519,   230,   603,   605,   962,    15,
      16,   590,  1218,  2533,   117,    15,    16,    15,    16,   117,
     361,    15,    16,   271,  1230,   604,  1232,   343,  1234,   327,
     513,   513,    15,    16,    15,    16,   562,  1243,   448,   358,
    1972,  4233,   356,  1249,  1175,   359,   560,   545,   394,  2616,
    3432,  1983,  1258,  1259,   220,  3218,   586,   590,  1012,   180,
      15,    16,   358,   268,    51,   605,   375,   356,  3842,  3843,
     359,   122,   605,   176,    61,   342,  1282,  2388,   176,  1285,
      15,    16,     0,  1392,   355,    15,    16,  1293,   265,  2388,
      12,   605,   183,   513,   268,    15,    16,   218,   254,  1305,
    1306,  1307,  1308,  1309,  1310,   327,  3202,  3203,   303,  1315,
      15,    16,  4060,  4061,   534,  1321,  1322,   381,  1324,   605,
     241,  1327,   448,  1235,    24,  1305,  1306,  1307,   294,  1309,
    2454,   453,   356,   339,   192,   359,  2460,   356,   343,   195,
     359,  1347,  1322,   356,   321,   183,   359,  1327,   495,  2708,
    2709,   590,   203,  3927,   574,   579,  2748,   448,   356,   401,
     590,   359,    15,    16,   523,   268,   605,   526,  3942,   343,
     268,   561,    12,  3083,   603,   605,   448,  1308,   609,  1310,
     536,  3955,   611,   153,   579,   609,  1392,     6,  1300,   590,
     228,   590,   561,   603,  3104,    62,   552,   607,    15,    16,
    1406,   357,   260,  1409,  1410,  3656,   605,   604,   590,   448,
     590,   133,   356,  2740,   609,   359,  1347,   174,   183,  2811,
     271,   519,   604,   429,   604,   541,    15,    16,   575,   590,
      12,  3613,    15,    16,  3330,  1441,  4010,    56,   448,   356,
     343,   448,   359,   604,   254,   343,   544,   518,  4022,  4023,
     456,   151,  4022,  4023,  1460,   497,  1462,  1463,   605,  1465,
    1466,  2405,    12,   384,   327,   356,   754,   149,   359,    40,
    3178,    38,  1478,   260,  1480,  1406,   590,   603,    45,  1410,
     513,   607,  1462,  1463,  3447,   356,  1398,   244,   359,   254,
     604,   349,  4066,   133,   566,   567,  2499,   519,  2587,   103,
     134,   590,  4076,   356,    15,    16,   359,   448,   448,    15,
      16,   153,   603,   356,   491,   604,   359,   448,   137,   357,
     220,   287,   544,  2132,   356,  2636,   121,   359,  3655,  2856,
     356,   603,  3967,   359,   222,  3970,   541,  2636,    15,    16,
    4114,   611,  4116,   231,    71,  1551,  1552,   357,    15,    16,
     356,   133,  4126,   359,   842,  1664,   356,   160,   356,   359,
     131,   359,   356,   530,   603,   359,   590,   541,  4142,   236,
    4144,   590,  4146,   356,   218,   356,   359,   590,   359,  4153,
     604,   603,   339,   133,   490,   604,  2030,    16,   494,  2321,
    4164,   604,   590,   603,   294,   453,   603,   241,    16,  2043,
     204,   356,    15,    16,   359,  1611,  4180,  4181,    15,    16,
    3843,  2235,  2236,  2237,  2981,    15,    16,    15,    16,    15,
      16,   356,  4196,  4197,   359,   213,   356,  4201,   394,   359,
      15,    16,  2076,  3545,  3546,   327,   356,  3324,   541,   359,
     340,  3537,  3538,   541,  3540,  3541,   590,  1653,  3985,  3246,
    3334,   356,  4087,   180,   359,  1661,   519,  1663,  1664,  3870,
     604,   195,   603,   603,    15,    16,   214,   488,   335,  1675,
     516,  1677,   603,   590,   362,   399,   160,  1683,  1684,   597,
    1686,   544,   316,   513,    15,    16,   604,   604,    15,    16,
    1696,   218,   539,  3377,  1700,   117,   420,   518,   120,   590,
     466,  2145,   186,   356,   218,   134,   359,    15,    16,   218,
    1716,  1717,  1718,  1719,   241,   562,    15,    16,   337,   590,
     218,  1727,  2454,   271,  1730,  1731,  1732,   451,  2460,    15,
      16,   130,  2856,   604,    15,    16,   464,   590,   386,   356,
     603,  1747,   359,   231,    15,    16,   145,   590,   562,   147,
    1756,   604,  1683,  1684,   176,  1686,    15,    16,   590,   363,
     213,   604,   250,  1051,   590,  1696,    81,   356,   372,  1700,
     359,   195,   604,   356,   378,   603,   359,  4010,   604,   398,
     202,   400,   562,   611,   590,   100,  1792,  1718,  1719,   351,
     590,   605,   590,   336,   337,   495,   590,   611,  1804,  1730,
    1731,  1732,  1714,   228,   604,  1811,   604,   590,  2648,   590,
     604,  3805,  2756,  3807,  1102,    15,    16,    46,  1106,  2368,
     487,   604,   210,   604,   212,   605,   554,   519,   183,  3619,
    3620,   611,  3049,   500,  2689,   590,   567,   485,   456,  1751,
    2695,   275,   276,  2787,   371,   356,   268,   395,   359,   604,
     356,  2795,   544,   359,  2798,   590,  2891,   384,   581,  2697,
     590,  1792,  2689,   271,    16,   593,   470,   604,  2695,   604,
     590,    96,  1981,   609,   604,   575,  1985,  2912,  2913,   356,
    1811,  4114,   359,  4116,   604,   590,   534,   316,  3392,   356,
      57,  3395,   359,   569,  3005,  2839,   572,   510,  2933,   604,
     513,  1907,   611,    15,    16,   605,   557,    15,    16,  4142,
     353,   603,   485,  1825,  2023,  1921,   951,   952,  3206,  2028,
     587,   343,  1834,  1835,   604,   605,   574,  3635,  3636,  3637,
    3638,   604,   605,  1845,  1846,  1847,  1848,   590,  1850,  1851,
     603,   510,   180,   356,   513,  3449,   359,  4180,  4181,   356,
    3061,   604,   359,   169,   989,   559,   356,   422,   356,   359,
     356,   359,  3061,   359,   598,   599,   600,   601,  3758,   604,
     605,   356,  3762,   590,   359,  1981,   562,   411,   412,  1985,
       6,  1987,   134,  3094,  1990,  2593,   611,   604,   604,   605,
     559,  1997,  1998,  1999,  2000,  3094,   221,  2003,    11,   166,
     605,   590,  2270,   170,   603,   356,   603,   590,   359,   603,
    1990,  2649,  2121,   238,   181,   604,  4227,  2023,   604,   605,
     163,   604,  2028,   603,   249,   356,  3816,  3817,   359,   356,
     459,   460,   359,  1945,  1946,    30,  1948,   603,  1950,  1951,
    1952,  1953,  1954,   134,  2153,  1957,   603,  1959,   356,   582,
     583,   359,   604,   605,    18,   522,  3776,   356,   603,  1219,
     359,   448,  1222,   117,    20,  1225,  1997,  1998,  1999,   456,
     356,  3748,   605,   359,   603,   356,   348,    33,   359,   590,
      75,   604,   605,   603,   590,   356,   603,  2633,   359,   519,
    3777,    47,  2360,   604,   495,  3078,  3079,   356,   604,   603,
     359,   326,    58,    59,   553,   554,  3783,   556,   437,  3786,
    3787,  3788,  3789,   590,   603,  2121,  2384,  2385,   603,   541,
     336,   337,   176,   590,  2856,   603,   342,   604,    73,  3164,
     604,   605,    96,  2679,   603,   302,  3528,  3529,  2582,   603,
    2146,   604,   605,    88,    12,    15,    16,  2153,   202,   604,
     605,   603,   147,  3861,   385,  2264,   356,  2266,  2267,   359,
     562,  2167,  3273,   603,   316,   594,   595,   596,   597,   598,
     599,   600,   601,    41,  3273,    58,    59,   590,   510,   566,
     567,   437,   511,   590,   603,   149,   603,   516,   603,   153,
     590,   604,   590,  2199,   590,   354,  3883,   604,   603,  2308,
    2309,  3204,  3879,  3880,   604,   590,  3803,  2213,   604,   434,
     603,  3888,   604,   605,   268,   605,   603,   181,   348,   604,
     603,    89,   603,    24,  2230,   316,    94,   603,   395,   603,
     559,   195,    24,   604,   605,   603,   200,  2243,   603,   590,
    1684,   603,  1686,   603,   356,   574,   603,   359,   356,   603,
    2256,   359,  2258,   604,    18,   604,   605,   221,  2264,   590,
    2266,  2267,   603,   590,   228,   603,    33,   603,  2274,  2275,
    2379,   496,    73,   604,   238,  3467,  3468,   604,   117,   603,
    3116,    73,   590,  3119,  3120,   249,  1730,  1731,  1732,   343,
     254,   590,    59,  2299,   604,   605,   604,  3226,   243,   263,
    3136,   603,  2308,  2309,   590,   604,    61,   459,   460,   590,
     565,   566,   603,   568,   603,   570,    71,   348,   604,   590,
     536,   604,   605,   604,   604,   605,   604,   605,   603,    84,
     603,   590,    96,   604,   604,   605,   552,   176,  2349,   603,
     107,   603,  2348,   110,  2256,   604,   603,  2353,  2359,   603,
     151,   118,  2358,   603,  2365,   603,  2362,   603,  2364,  3355,
    3356,   603,   326,   202,   603,   233,   167,   603,  2374,   314,
    2376,  2377,  3368,  2379,   214,   167,  2387,  3373,    25,   603,
    2386,  2392,  2388,   608,   348,   149,   381,  2398,  2399,   153,
     590,  2397,   603,   357,   339,   604,   605,   604,   605,  2405,
    3396,   604,   605,  3399,   604,   603,  2412,  2413,   403,   603,
     522,   604,   605,   603,   522,   179,    12,   181,  2424,   220,
    3029,    68,   386,   477,    73,   180,    73,   603,   220,   268,
     185,   195,   604,   605,   603,   303,   200,   603,    73,  4159,
     435,   603,   594,   595,   596,   597,   598,   599,   600,   601,
     214,   471,   397,   603,  2366,  2367,   603,   221,   604,   605,
     604,   605,   603,   218,   228,   603,  2397,   604,   605,   603,
     434,   604,   605,   120,   238,  2481,  2482,  2921,   590,  2391,
     604,   605,   590,   604,   605,   249,   241,   541,   604,   605,
     254,    48,   456,   294,   603,   490,   603,   365,   117,   263,
     604,   605,   294,   603,   343,   596,   597,   598,   599,   600,
     601,   604,   605,   265,  4234,    48,   151,  2961,   604,   605,
     604,   605,   604,   605,   605,    25,    26,   604,   605,  1028,
    1029,  1030,   496,   334,   348,    15,    16,   133,  2450,   340,
     485,  1040,   334,   604,   605,   348,    11,   442,   340,   550,
    2481,   604,   605,   598,   193,   604,   605,   176,    58,    59,
      60,   328,   326,   604,   605,   604,   605,  3644,    68,   604,
     605,   220,  1071,    73,   159,  1074,   456,    12,  3186,   604,
     605,   603,    82,   202,   348,   220,   550,   143,   144,   604,
     605,   210,   548,   357,   241,  1094,  1095,  2603,   562,  1098,
    2606,  2607,  2608,  2609,   254,   473,   106,   203,   181,  2615,
    1103,  1104,   568,   569,    61,   579,   371,   581,  1117,  1118,
     120,   510,   386,   123,    71,  3881,  3882,  2633,   491,   384,
    2636,   111,   112,   113,   114,   115,  3565,    84,   103,   507,
     604,   605,  3571,  2649,   608,   609,  2652,  2653,  2654,   268,
     159,   151,   291,   292,  3015,  3016,   121,   296,   297,  2665,
    2769,  2974,  2975,  3774,   491,  2671,  3215,  2673,  3255,  3256,
     434,   265,   150,  2679,    83,  3774,    76,   605,    78,    79,
     350,   506,   604,   149,  2615,   334,   120,   106,     6,   336,
     337,   340,   456,   610,   495,   342,   603,   464,   133,   334,
     105,   348,   541,   495,     4,   340,   117,   497,   498,   447,
     574,   501,   502,   231,   605,   505,   371,   507,   218,   474,
     120,   186,    55,   414,   343,   225,   206,   207,   208,   209,
     163,   106,   496,   180,   211,   611,   605,   384,   185,   605,
     240,   141,    68,    13,  2750,    12,   578,  2753,  2754,   214,
    2756,   153,   154,  2665,   604,   604,   405,   519,     9,   526,
     133,   115,   605,  2769,   611,   176,  2772,   604,   203,   604,
     405,   218,   603,   611,   575,   175,   605,   253,   611,   151,
     610,  2787,   265,   575,   265,   187,   550,   554,    48,  2795,
     265,   202,  2798,   293,   241,   197,   551,   561,   562,   264,
     605,   265,   265,   265,   605,   452,   510,   603,   260,   370,
     605,   311,   605,  2819,   530,   579,  2822,   581,   605,   530,
      12,  2827,   605,   153,   605,    95,   306,  2833,   308,   309,
     310,  2837,   234,  2839,   605,   605,   231,   317,   598,   232,
     604,   605,   508,   245,   608,   609,   495,   171,  2854,    35,
     181,  3962,   605,  2833,   124,   209,   555,   268,  2770,   605,
     495,  2867,   469,  3962,   364,   373,  2778,   137,  2874,    31,
     272,    96,   372,   129,   348,   605,   356,    96,   604,   359,
    2886,   605,  3490,   479,   480,   481,   482,   483,   484,   153,
     160,  2822,   162,   605,   153,  3824,   153,   546,   153,   153,
     496,   153,   585,   173,   551,   153,  3746,   153,   134,  3018,
     153,   546,   153,   393,   153,   153,   153,   153,  3542,  3543,
    3544,   386,   541,   193,   110,  3034,   575,    73,   330,   153,
     153,   117,   343,   153,    25,    26,   153,   384,   561,   439,
     575,   557,   186,  2874,   348,   348,   605,  2859,   218,  2955,
    3576,   348,   306,   183,   224,  3504,   310,  2963,   604,   604,
     106,  4038,   604,   317,   604,   445,   446,    58,    59,    60,
     605,   604,   134,   598,   604,   604,   183,    68,   605,   597,
     604,  2987,    73,   169,   774,   605,  1485,   604,   603,   454,
     176,    82,   604,   263,   604,   495,   221,   605,   604,  3005,
    3006,   604,   221,  3009,   604,   151,   406,   604,   550,   457,
     603,   511,  3018,   238,   514,   106,   202,   603,  3024,   238,
     601,   603,   605,   530,   249,   604,   579,   474,  3034,   120,
     249,   219,   123,  3598,   603,   502,  3042,   603,   193,   393,
     183,   611,   183,   394,   479,   480,   511,   482,   513,   484,
     550,  2963,   604,  4130,  1553,  3061,   605,   456,  1557,   605,
     151,   496,   181,   495,    33,    46,   324,  3073,   485,   231,
     485,  3697,   218,   485,    71,   485,   447,  3083,   485,  3085,
     371,  1580,   268,  4194,   371,   371,   530,   129,  3094,   521,
     316,   253,   446,   511,  3100,  4194,  3102,   577,  3104,   239,
     239,   326,   129,  3650,   551,   605,  4217,   326,   371,  3218,
     590,   591,   592,  4224,    46,   511,    96,   387,  4217,  4230,
    4049,  4050,   371,  4052,   134,  4224,   371,   218,   417,   348,
     541,  4230,   603,   603,   225,   369,   371,   407,   371,   264,
     562,   327,   603,   611,   604,   415,   147,   293,   604,   240,
     227,   227,   338,   423,   316,   604,   342,   343,   127,   604,
     611,   604,   253,   604,   604,   311,   605,   604,   530,  4098,
    3176,  4100,  4101,   611,   336,   337,   605,   530,   448,  3288,
     611,   611,   151,   611,   611,   530,   155,   519,   334,   260,
      46,   461,   462,   530,   586,  3201,  3202,  3203,   153,   183,
    3206,   354,   293,   228,   183,   603,   183,   183,   640,   434,
     611,   235,  3218,   645,   603,   434,   153,   603,   238,   188,
     311,   231,   343,   577,   611,   605,  4155,   238,   360,   307,
     106,   106,   241,   459,   460,   505,   205,   174,   592,   241,
     530,   221,  3853,   675,  3791,   611,   408,  3855,    35,   353,
     187,   603,   195,   603,   519,    18,   431,  3169,   238,   691,
     197,   603,  4192,  3269,   534,   371,  3375,  3273,   611,   249,
     357,   496,   229,   364,   603,   598,   603,   496,   229,   604,
    3192,   372,  3288,   604,   604,   604,   556,   604,   558,   611,
     604,   604,   604,   581,   598,   603,   265,   459,   460,   348,
     732,   733,   734,   735,   214,   604,   316,   244,   245,   605,
     472,   255,   744,   371,   611,   183,   556,   231,   287,   604,
     251,   605,  3871,   110,  3330,   604,    68,   238,   605,  3340,
     117,   238,   348,   519,   603,   272,   241,   523,  3447,   241,
     526,  3347,   382,   605,   605,   348,   326,    73,   439,   495,
     536,   604,   348,   603,   521,   541,    18,   604,   544,   348,
     348,   471,    46,   605,   448,   511,   254,   450,   348,  3375,
     596,   597,   598,   599,   600,   601,   605,   604,   581,   193,
     399,   603,   169,   604,   140,   603,   247,   603,   603,   176,
     604,   604,   195,   605,  3400,   458,   333,  3506,   603,   603,
     238,  3407,   238,   605,   495,   603,   120,   120,   103,   603,
     596,   597,   103,   380,   603,   202,   385,    77,   611,  3425,
     511,   466,   604,   514,   136,   394,   443,   471,   604,    18,
      33,   605,   594,   595,   596,   597,   598,   599,   600,   601,
     409,  3447,    33,    54,   604,   604,   383,   604,   604,   459,
     460,   313,    63,   604,   434,   604,   604,   604,   427,   550,
     604,    72,   243,   263,  3376,   160,   394,   354,   581,   228,
     603,   605,  4083,   603,    85,    86,    87,   604,   645,    46,
     611,   268,   200,   605,   313,   519,  3492,  4095,   519,   562,
     101,   186,   562,   399,   185,   603,   603,   466,   467,   604,
    3506,   603,  3414,   603,   603,   290,   603,   572,   675,   603,
     572,   134,   603,   556,   120,   342,   496,   241,  3524,   241,
      33,   343,   491,   218,   691,   604,   343,   218,   165,   603,
     605,  3537,  3538,   313,  3540,  3541,   519,   969,   241,   513,
     327,   510,   228,   566,   513,  4092,   519,  3656,   519,   604,
     604,   348,   338,  4161,   562,   342,   343,   562,   605,   489,
     567,   431,   354,   581,   343,   604,   556,   501,   735,   264,
     603,   603,   181,   264,  4185,   603,   148,    30,   578,   181,
     521,   129,   612,   604,   594,   595,   596,   597,   598,   599,
     600,   601,  1024,  1025,   367,   129,   151,   603,  3604,  3605,
     604,  1033,  1034,  1035,  1036,  1037,  1038,  1039,  4219,   604,
    3616,   386,  1044,    70,   407,  1047,  1048,   578,  1050,   183,
    1052,    30,    61,  4231,  1056,   354,    61,  1059,  1060,  1061,
    1062,   603,  1064,  1065,   256,   605,   604,  3643,   502,    46,
    1072,  1073,    46,  1075,  1076,  1077,  1078,  1079,     5,  1081,
    3656,  1083,  1084,  1085,  1086,  1087,  1088,  1089,  1090,  1091,
    1092,  1093,   228,   603,  1096,  1097,   348,  1099,   603,  1101,
     348,   147,   128,  1105,  3605,  1107,  1108,   354,   354,   603,
    3686,   136,   609,    46,    46,   146,   381,  1119,  1120,   556,
      46,   386,   124,   316,   305,  1127,  3702,   578,   147,   213,
     270,  3707,  1134,  1135,  1136,   609,  1138,   119,   142,   612,
     438,   322,  3643,  1145,  1146,  1147,    46,  1149,  1150,  1151,
    1152,  1153,    46,  1155,  1156,  1157,  1158,  1159,  1160,  1161,
    1162,   603,   519,    46,  1166,  1167,   523,    52,   604,   526,
     609,   440,   211,    46,   147,   605,   604,   198,   522,   536,
      73,   605,   605,   605,   541,   604,   604,   544,   609,   454,
      52,   181,   421,   454,   181,    88,   134,   181,  3774,   214,
     522,   580,   120,   603,  3780,  3884,   456,   182,   343,   605,
     134,  2160,  1961,   474,  3712,  3179,  3178,  3423,  2337,   623,
    3739,  3856,  4029,  3603,   948,  4030,  3421,  4219,  3425,  3805,
    4172,  3807,   969,  3809,    45,   128,   551,  2649,  1726,   596,
     597,  3595,  4182,  3595,  4063,  3595,   511,  3595,  3595,  3595,
     511,   516,   513,  3595,  3595,   516,  3595,  3595,  3920,  3835,
    4063,  3595,  4023,   444,  3946,  3747,   459,   460,  3595,   534,
    3595,  1401,  3945,  1655,  1920,   987,  3612,  1411,  1403,   111,
     112,   113,   114,   115,  2793,  2628,  2987,  1024,  1025,  3780,
     551,  1293,  1246,   231,   559,  2213,  1033,  1034,   559,  1301,
    1037,  1038,  1039,  3874,  3644,  3271,  3985,  1044,  3884,   574,
    1047,  1048,  4130,  1050,  3890,  1052,  4046,   498,  4092,  3791,
    1455,   490,  1059,  1060,  1061,  1062,  3195,  1064,  2860,  1913,
    3104,  2482,  1921,  2415,   515,  1072,  1073,  3083,  1075,  1076,
    3127,  3127,  3160,  3563,  1081,  3339,  1083,  1084,  1085,  3384,
     243,  1088,  1089,  1090,  1091,  1092,  1093,  3871,  3375,  1096,
    1097,  3034,  1099,    11,  1101,  4044,  3813,    11,  1105,  1469,
    1107,  1108,  3816,  3762,   206,   207,   208,   209,   316,  3817,
    3750,     6,  1119,  1120,  3758,  1995,  3962,  3571,    13,    14,
    1127,  3616,   316,  1920,  3085,  1799,  3878,  1134,  1135,  1136,
      25,    26,   595,   596,   597,   598,   599,   600,   601,  3985,
    2408,  3344,  1361,  3084,  2225,  1718,  1410,  2615,  2192,  2982,
    3597,   314,  1451,  2111,  4000,  4001,  2247,    12,    13,  2963,
    1167,    56,   571,  1737,   863,    60,    61,  1066,  2593,  2110,
    2300,    66,  2029,   336,   337,  3051,   339,  3671,    73,  3531,
    4001,  4000,  3176,  3525,  2139,  1040,  3094,    82,  3882,  4161,
    2252,  3506,  2000,  1234,  2187,  3273,  2999,    92,  4044,  3000,
    2229,  3061,  3962,   561,   306,  1788,   308,   309,   310,  1259,
     636,   106,  1478,   550,  1789,   317,  3102,  1265,  1341,  1491,
    3972,  3973,  4068,  1674,  4085,   120,  2985,  3992,   123,  4075,
    4128,  4056,  4224,  4230,   397,   130,   131,  3377,  3005,  1742,
      95,  1313,   137,  2681,  1293,  3042,  3299,  3514,  1283,  1227,
     145,   459,   460,  3633,   149,  1700,   151,   845,   542,  1460,
    2603,   543,  3639,   850,  4213,   459,   460,   486,   486,   124,
      -1,   623,   623,   623,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   137,    -1,   179,    -1,  1293,    -1,    -1,    -1,
      -1,   393,    -1,    -1,  1301,    -1,    -1,  4143,    -1,    -1,
      -1,    -1,  4148,    -1,    -1,   160,    -1,   162,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1587,  1588,  1589,   173,    -1,
      -1,   216,   485,   218,    -1,    -1,    -1,    -1,    -1,  1601,
     225,    -1,    33,    -1,    -1,    -1,    -1,    -1,   193,  4185,
      -1,    -1,    -1,   445,   446,   240,    -1,    -1,  4194,    -1,
      -1,    -1,    -1,    -1,    -1,  1627,    -1,    -1,    -1,    -1,
      -1,  1633,    -1,   218,  1636,    -1,  1638,  4213,    -1,   224,
      -1,  4217,  1644,  4219,  1646,  1647,    -1,    -1,  4224,    -1,
      -1,    -1,    -1,    -1,  4230,    -1,   594,   595,   596,   597,
     598,   599,   600,   601,    -1,    -1,    -1,    -1,   293,    -1,
     594,   595,   596,   597,   598,   599,   600,   601,   263,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   311,    -1,    -1,    -1,
     315,    -1,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1713,    -1,    -1,    -1,    25,    26,    -1,    -1,    -1,
     151,    12,    13,    -1,   155,  3927,    -1,   352,    -1,    -1,
      -1,    -1,   357,    -1,    -1,    -1,    -1,    -1,    -1,   364,
    3942,    -1,    -1,    -1,    -1,   577,   371,   372,    58,    59,
      60,    -1,    -1,  3955,  1491,    -1,    -1,   188,    68,   591,
     592,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,   205,    -1,    -1,   402,    -1,    -1,
      13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   416,   417,   418,   419,    -1,   106,    30,    -1,    -1,
      -1,    34,   387,    -1,    95,    -1,   391,    -1,    -1,    -1,
     120,    -1,    -1,   123,   439,    48,    49,    -1,    -1,    -1,
      -1,    -1,   407,    56,    -1,    -1,    -1,    60,    61,    -1,
     415,    -1,    -1,   124,   265,    -1,    -1,    -1,   423,    -1,
      -1,   151,    75,    -1,    -1,    -1,   137,    -1,    -1,    -1,
    1587,  1588,  1589,    -1,    -1,    -1,   287,    -1,    -1,    -1,
      -1,    -1,    95,   448,  4066,    -1,    -1,    -1,    -1,   160,
     495,   162,    -1,    -1,  4076,    -1,   461,   462,    -1,    -1,
      -1,    -1,   173,   116,    -1,    -1,   511,    -1,    -1,   514,
    1627,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,  1636,
      -1,  1638,   193,   136,   137,    -1,    -1,    -1,   218,    -1,
      -1,    -1,   537,    -1,    -1,   225,   149,    -1,    -1,    -1,
     505,    -1,    -1,    -1,  4126,   550,    -1,   218,    -1,   162,
     240,    -1,    -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,
    1942,    -1,  4144,    -1,  4146,   178,    -1,    -1,    -1,   534,
      -1,  4153,    -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,
     193,    -1,  4164,   394,    -1,   198,    -1,    -1,   201,    -1,
      -1,   556,   263,   558,    -1,    -1,  1713,    -1,   409,    -1,
      -1,    -1,    -1,   293,   609,    -1,    -1,    -1,    -1,    -1,
      -1,   224,    -1,   226,  4196,  4197,   427,    -1,    -1,  4201,
      -1,   311,    -1,    -1,    -1,    -1,    -1,  2009,    -1,   242,
      -1,  2013,    -1,    -1,    -1,    -1,  2018,  2019,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2027,   259,    -1,  2030,    -1,
     263,    -1,    -1,    -1,    -1,   466,   467,    -1,  2040,    -1,
    2042,  2043,    -1,  2045,  2046,  2047,  2048,  2049,    -1,    -1,
    2052,    -1,    -1,    -1,   364,    -1,    -1,    -1,    -1,  2061,
     491,    -1,   372,    -1,    -1,    -1,    -1,  2069,    -1,  2071,
      -1,  2073,  2074,  2075,  2076,    -1,    -1,    -1,  2080,  2081,
    2082,    -1,    -1,    -1,    -1,  2087,  2088,  2089,    -1,  2091,
      -1,  2093,    -1,  2095,    -1,  2097,   387,  2099,    -1,    -1,
     391,    -1,  2104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   407,    -1,    -1,   352,
    2122,    -1,    -1,    -1,   415,    -1,    -1,  2129,    -1,   439,
    2132,    -1,   423,    -1,    -1,    -1,  2138,    -1,   371,  2141,
      -1,    -1,    -1,  2145,    -1,    -1,    -1,    -1,   381,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   448,    -1,   392,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     461,   462,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   414,    -1,    -1,   417,   495,   419,    -1,    -1,   422,
      -1,    -1,   425,   426,    -1,    -1,    -1,    -1,  2200,    -1,
     433,   511,   435,    -1,   514,  1942,    -1,    -1,    -1,   442,
      -1,    -1,    -1,    -1,   505,   448,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   456,    -1,    -1,    -1,    -1,   461,    -1,
     463,    -1,    -1,   466,    -1,    -1,    -1,    -1,    -1,    -1,
     550,    -1,    -1,   534,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,    -1,    -1,
      -1,   494,    -1,    -1,    -1,   556,    -1,   558,    -1,    -1,
      -1,    -1,  2009,    -1,    -1,    -1,  2013,    -1,    -1,    13,
      14,  2018,  2019,    25,    26,    -1,    -1,    -1,    -1,    -1,
    2027,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    -1,    -1,  2040,   537,  2042,    -1,    -1,  2045,  2046,
    2047,  2048,  2049,    -1,    48,    49,   549,    -1,    60,    -1,
     553,    -1,    56,   556,  2061,    -1,    60,    61,   561,    -1,
      -1,    73,  2069,    -1,  2071,    -1,  2073,  2074,  2075,    -1,
      82,    75,    -1,  2080,  2081,  2082,    -1,    -1,    -1,    -1,
    2087,  2088,  2089,   215,  2091,   588,  2093,    -1,  2095,    -1,
    2097,    95,  2099,    -1,   106,    -1,    -1,  2104,    -1,    -1,
     603,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,
      -1,   123,   116,    -1,    -1,  2122,    -1,    -1,    -1,    -1,
     124,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2138,   136,   137,  2141,    -1,    -1,    -1,    -1,   151,
      -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,   162,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   178,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,
      -1,    -1,    -1,    -1,   198,    -1,    -1,   201,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   218,    -1,    -1,    -1,
      -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,    -1,    -1,
     224,    -1,   226,    -1,    -1,    -1,    -1,    -1,   240,    -1,
      -1,  2503,    -1,    -1,    -1,  2507,    -1,    -1,   242,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   259,    -1,  2529,  2530,   263,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2549,    -1,   411,
     412,   293,    -1,    -1,    -1,    -1,  2558,    -1,  2560,    -1,
    2562,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   311,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2582,    -1,    -1,    -1,    -1,  2587,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2611,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   352,    -1,
      -1,    -1,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2674,    -1,    -1,    -1,  2678,    -1,    -1,    -1,
     414,    -1,    -1,   417,    -1,   419,    -1,    -1,   422,    -1,
      -1,   425,   426,    -1,    -1,    -1,    -1,   439,    -1,   433,
      -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,   442,    -1,
      -1,    -1,    -1,    -1,   448,    -1,    -1,    -1,    -1,    -1,
    2722,    -1,   456,    -1,    -1,    -1,    -1,   461,    -1,   463,
      -1,    -1,   466,    -1,    -1,    -1,    -1,    -1,    32,    33,
      -1,    -1,    -1,    -1,    38,    -1,    40,    -1,    42,    43,
      -1,    -1,    -1,   495,    -1,    -1,   490,    -1,    -1,    -1,
     494,    -1,    -1,    -1,    -1,    59,  2503,    -1,    -1,   511,
    2507,    -1,   514,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2529,  2530,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   537,    -1,    -1,    -1,    -1,   550,    -1,
      -1,    -1,  2549,   107,    -1,   549,   110,    -1,    -1,   553,
      -1,  2558,   556,  2560,   118,  2562,    -1,   561,  2830,  2831,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   588,    -1,    -1,    -1,   152,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   603,
      -1,    -1,    -1,    -1,  2611,    -1,    -1,    -1,    -1,    -1,
      -1,   175,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2894,    -1,    -1,   189,   190,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2918,  2919,    -1,  2921,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2930,    -1,
      -1,    -1,    -1,  2935,    -1,   229,  2938,  2674,  2940,  2941,
      -1,  2678,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2961,
      -1,    -1,    -1,   257,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   266,   267,  2976,   269,    23,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2722,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2999,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   299,   300,   301,    -1,    -1,
      -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    69,    -1,   318,   319,   320,  3029,    -1,    -1,
      -1,   325,    -1,    -1,   328,    -1,    -1,    -1,    -1,    -1,
      -1,  3043,    -1,    -1,    91,    -1,    93,    -1,    95,    -1,
     344,   345,    -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,
      -1,  3063,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3072,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   376,   377,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2830,  2831,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   150,   151,    -1,    -1,   401,    -1,   156,
      -1,    -1,   159,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,    -1,   186,
      -1,    -1,    -1,    -1,    -1,   192,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2894,   452,    -1,
      -1,    -1,   456,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     217,   218,    -1,    -1,   468,    -1,    -1,     6,    -1,    -1,
      -1,  2918,  2919,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   239,  2930,    -1,    -1,    25,    26,  2935,    -1,
      -1,  2938,    -1,  2940,  2941,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   260,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    56,    -1,   523,
      -1,    60,   526,   527,   528,   529,    -1,    -1,    -1,  2976,
     287,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2999,    92,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3274,    -1,   568,   569,    -1,   106,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,    -1,    -1,   123,    -1,    -1,    -1,   592,    -1,
      -1,   130,    -1,    -1,   351,    -1,  3043,    -1,   137,    -1,
      -1,  3313,  3314,    -1,    -1,    -1,   145,    -1,    -1,    -1,
    3322,    -1,   151,    -1,    -1,    -1,  3063,   374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3072,    -1,    -1,   385,   386,
      -1,    -1,   389,   390,    -1,    -1,    -1,    -1,    -1,    -1,
     179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   410,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   218,
      -1,    -1,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   453,    -1,    -1,    -1,
      -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   466,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   491,    -1,    -1,    -1,   495,    -1,
      -1,    -1,    -1,    -1,  3456,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   293,    -1,   513,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   311,    -1,    -1,  3487,   315,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3501,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3514,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   570,    -1,    -1,    -1,    -1,   357,   576,
      -1,    -1,    -1,    -1,    -1,   364,    -1,  3274,    -1,    -1,
      -1,    -1,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3313,  3314,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3322,    -1,    -1,   417,    -1,
      -1,    -1,    -1,  3595,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     439,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3644,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3654,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3663,    -1,  3665,    -1,    -1,   495,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   511,    -1,    -1,   514,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3699,    -1,    -1,
      -1,    -1,    -1,  3705,  3706,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3456,
      -1,   550,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3501,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3514,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3796,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3828,    -1,  3830,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3840,    -1,
    3842,  3843,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3865,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3654,    -1,    -1,
      -1,    -1,    -1,  3925,    -1,  3927,  3663,    -1,  3665,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3942,  3943,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3955,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3963,  3699,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4009,  4010,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4022,  4023,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4038,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3796,
      -1,    -1,    -1,    -1,  4066,    -1,    -1,    -1,    -1,    -1,
      -1,  4073,    -1,    -1,  4076,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3828,    -1,  3830,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3840,    -1,  4107,    -1,    -1,    -1,    -1,
      -1,    -1,  4114,    -1,  4116,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4126,    -1,    -1,    -1,  4130,    -1,
      -1,  4133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4142,    -1,  4144,    -1,  4146,    -1,    -1,    -1,    -1,    -1,
      -1,  4153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4180,  4181,
      -1,    -1,    -1,    -1,  4186,    -1,    -1,    -1,  3925,    -1,
      -1,    -1,    -1,    -1,  4196,  4197,    -1,    -1,    -1,  4201,
      -1,    -1,    -1,    -1,    -1,    -1,  3943,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3963,    -1,    -1,    -1,
      -1,  4233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4009,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4073,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,  4133,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    44,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,  4186,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,   101,
     102,   103,    -1,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,   115,   116,   117,  4233,    -1,   120,   121,
      -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,
     132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
      -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,   201,
     202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,   213,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,   246,   247,    -1,   249,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,    -1,    -1,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,    -1,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,   340,    -1,
     342,   343,    -1,   345,   346,   347,    -1,   349,   350,   351,
      -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,    -1,   385,    -1,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,   418,   419,   420,   421,
     422,   423,    -1,   425,    -1,   427,   428,    -1,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,
     452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,
     492,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
      -1,    -1,   514,   515,   516,   517,    -1,   519,   520,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,   531,
     532,   533,    -1,   535,   536,   537,   538,   539,   540,   541,
     542,   543,   544,   545,   546,    -1,   548,   549,    -1,    -1,
     552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,
      -1,   563,   564,   565,   566,   567,    -1,    -1,   570,   571,
      -1,   573,   574,   575,   576,   577,    -1,    -1,    -1,    -1,
      -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,    -1,
     592,    -1,    -1,    -1,   596,   597,    -1,    -1,    -1,    -1,
     602,   603,    -1,    -1,   606,   607,    -1,    -1,   610,   611,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,   101,   102,   103,    -1,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,   121,    -1,   123,    -1,
      -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,
      -1,   136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,
     145,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,   171,    -1,   173,   174,
     175,   176,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,   196,    -1,   198,   199,    -1,   201,   202,    -1,   204,
     205,    -1,    -1,    -1,   209,   210,   211,   212,   213,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,   224,
     225,   226,   227,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,   247,    -1,   249,   250,   251,    -1,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,   268,    -1,    -1,    -1,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,    -1,    -1,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,    -1,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,   342,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,    -1,
     385,    -1,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,   418,   419,   420,   421,   422,   423,    -1,
     425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
      -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,
      -1,   486,    -1,    -1,   489,   490,   491,   492,   493,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,    -1,    -1,   514,
     515,   516,   517,    -1,   519,   520,   521,    -1,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,
     555,    -1,   557,    -1,   559,   560,    -1,    -1,   563,   564,
     565,   566,   567,    -1,    -1,   570,   571,    -1,   573,   574,
     575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,
     585,    -1,   587,   588,   589,    -1,    -1,   592,    -1,    -1,
      -1,   596,   597,    -1,    -1,    -1,    -1,   602,   603,    -1,
      -1,   606,   607,    -1,    -1,   610,   611,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,   101,   102,   103,    -1,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,   115,   116,   117,
      -1,    -1,   120,   121,    -1,   123,    -1,    -1,    -1,   127,
      -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,
      -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,    -1,   173,   174,   175,   176,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,   196,    -1,
     198,   199,    -1,   201,   202,    -1,   204,   205,    -1,    -1,
      -1,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,   224,   225,   226,   227,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,
      -1,   249,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
     268,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
      -1,    -1,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,    -1,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,   340,    -1,   342,   343,    -1,   345,   346,   347,
      -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,    -1,   385,    -1,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
     418,   419,   420,   421,   422,   423,    -1,   425,    -1,   427,
     428,    -1,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
      -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,
     458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,
      -1,   489,   490,   491,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,    -1,    -1,   514,   515,   516,   517,
      -1,   519,   520,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,    -1,   532,   533,    -1,   535,   536,   537,
     538,   539,   540,   541,   542,   543,   544,   545,   546,    -1,
     548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,
      -1,   559,   560,    -1,    -1,   563,   564,   565,   566,   567,
      -1,    -1,   570,   571,    -1,   573,   574,   575,   576,   577,
      -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,
     588,   589,    -1,    -1,   592,    -1,    -1,    -1,   596,   597,
      -1,    -1,    -1,    -1,   602,   603,   604,    -1,   606,   607,
      -1,    -1,   610,   611,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,   183,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,    -1,    -1,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,    -1,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,   342,   343,    -1,   345,   346,   347,    -1,   349,   350,
     351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,    -1,   385,    -1,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,
      -1,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,   418,   419,   420,
     421,   422,   423,    -1,   425,    -1,   427,   428,    -1,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,
      -1,   462,    -1,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,
     481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,
     491,   492,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,    -1,    -1,   514,   515,   516,   517,    -1,   519,   520,
     521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
      -1,   532,   533,    -1,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,   546,    -1,   548,   549,    -1,
      -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,
      -1,    -1,   563,   564,   565,   566,   567,    -1,    -1,   570,
     571,    -1,   573,   574,   575,   576,   577,    -1,    -1,    -1,
      -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,
      -1,   592,    -1,    -1,    -1,   596,   597,    -1,    -1,    -1,
      -1,   602,   603,    -1,    -1,   606,   607,    -1,    -1,   610,
     611,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,   101,   102,   103,
      -1,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,   115,   116,   117,    -1,    -1,   120,   121,    -1,   123,
      -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,
      -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,    -1,
      -1,   145,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,   171,    -1,   173,
     174,   175,   176,    -1,   178,    -1,    -1,    -1,   182,   183,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,   196,    -1,   198,   199,    -1,   201,   202,    -1,
     204,   205,    -1,    -1,    -1,   209,   210,   211,   212,   213,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
     224,   225,   226,   227,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,   247,    -1,   249,   250,   251,    -1,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,   268,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,    -1,    -1,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,    -1,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,   340,    -1,   342,   343,
      -1,   345,   346,   347,    -1,   349,   350,   351,    -1,   353,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
      -1,   385,    -1,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,   418,   419,   420,   421,   422,   423,
      -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,
     454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,
      -1,    -1,   486,    -1,    -1,   489,   490,   491,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,    -1,    -1,
     514,   515,   516,   517,    -1,   519,   520,   521,    -1,   523,
     524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,
      -1,   535,   536,   537,   538,   539,   540,   541,   542,   543,
     544,   545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,
      -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,   563,
     564,   565,   566,   567,    -1,    -1,   570,   571,    -1,   573,
     574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,
     584,   585,    -1,   587,   588,   589,    -1,    -1,   592,    -1,
      -1,    -1,   596,   597,    -1,    -1,    -1,    -1,   602,   603,
      -1,    -1,   606,   607,    -1,    -1,   610,   611,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    54,    55,    -1,
      57,    58,    59,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    -1,    -1,
      97,    98,    99,    -1,   101,   102,   103,    -1,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,   121,    -1,   123,    -1,    -1,    -1,
     127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,
      -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,   171,    -1,   173,   174,   175,   176,
      -1,   178,    -1,    -1,    -1,   182,   183,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,   196,
      -1,   198,   199,    -1,   201,   202,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,   213,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,   224,   225,   226,
     227,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,   249,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,   268,    -1,    -1,    -1,    -1,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,    -1,    -1,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,    -1,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,   342,   343,    -1,   345,   346,
     347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,    -1,   385,    -1,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,   418,   419,   420,   421,   422,   423,    -1,   425,    -1,
     427,   428,    -1,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,
      -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,
      -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,
      -1,    -1,   489,   490,   491,   492,   493,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,    -1,    -1,   514,   515,   516,
     517,    -1,   519,   520,   521,    -1,   523,   524,   525,   526,
      -1,    -1,    -1,    -1,    -1,   532,   533,    -1,   535,   536,
     537,   538,   539,   540,   541,   542,   543,   544,   545,   546,
      -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,
     557,    -1,   559,   560,    -1,    -1,   563,   564,   565,   566,
     567,    -1,    -1,   570,   571,    -1,   573,   574,   575,   576,
     577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,
     587,   588,   589,    -1,    -1,   592,    -1,    -1,    -1,   596,
     597,    -1,    -1,    -1,    -1,   602,   603,    -1,    -1,   606,
     607,    -1,    -1,   610,   611,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,   101,   102,   103,    -1,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,
     130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,
     140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,   171,    -1,   173,   174,   175,   176,    -1,   178,    -1,
      -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,   196,    -1,   198,   199,
      -1,   201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,
     210,   211,   212,   213,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,
     250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,
      -1,    -1,    -1,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,    -1,    -1,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
      -1,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,   342,   343,    -1,   345,   346,   347,    -1,   349,
     350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,    -1,   385,    -1,   387,   388,   389,
     390,   391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
      -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,   418,   419,
     420,   421,   422,   423,    -1,   425,    -1,   427,   428,    -1,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,    -1,
      -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,
      -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,
     480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,
     490,   491,   492,   493,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,    -1,    -1,   514,   515,   516,   517,    -1,   519,
     520,   521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,
      -1,    -1,   532,   533,    -1,   535,   536,   537,   538,   539,
     540,   541,   542,   543,   544,   545,   546,    -1,   548,   549,
      -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,
     560,    -1,    -1,   563,   564,   565,   566,   567,    -1,    -1,
     570,   571,    -1,   573,   574,   575,   576,   577,    -1,    -1,
      -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,
      -1,    -1,   592,    -1,    -1,    -1,   596,   597,    -1,    -1,
      -1,    -1,   602,   603,    -1,    -1,   606,   607,    -1,    -1,
     610,   611,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,   101,   102,
     103,    -1,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,   121,    -1,
     123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,
      -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,   171,    -1,
     173,   174,   175,   176,    -1,   178,    -1,    -1,    -1,   182,
      -1,   184,    -1,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,   196,    -1,   198,   199,    -1,   201,   202,
      -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,   212,
     213,    -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,
      -1,   224,   225,   226,   227,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,   247,    -1,   249,   250,   251,    -1,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,   268,    -1,    -1,    -1,    -1,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,   302,
     303,   304,   305,   306,   307,    -1,    -1,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,    -1,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,   342,
     343,    -1,   345,   346,   347,    -1,   349,   350,   351,    -1,
     353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,    -1,   385,    -1,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,
     403,   404,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,   418,   419,   420,   421,   422,
     423,    -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,
      -1,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,
     483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,   492,
     493,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,    -1,
      -1,   514,   515,   516,   517,    -1,   519,   520,   521,    -1,
     523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,
     533,    -1,   535,   536,   537,   538,   539,   540,   541,   542,
     543,   544,   545,   546,    -1,   548,   549,    -1,    -1,   552,
      -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,
     563,   564,   565,   566,   567,    -1,    -1,   570,   571,    -1,
     573,   574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,
      -1,   584,   585,    -1,   587,   588,   589,    -1,    -1,   592,
      -1,    -1,    -1,   596,   597,    -1,    -1,    -1,    -1,   602,
     603,    -1,    -1,   606,   607,    -1,    -1,   610,   611,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    -1,
      -1,    97,    98,    99,    -1,   101,   102,   103,    -1,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,   121,    -1,   123,    -1,    -1,
      -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,
     136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,   171,    -1,   173,   174,   175,
     176,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,    -1,   201,   202,    -1,   204,   205,
      -1,    -1,    -1,   209,   210,   211,   212,   213,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,   224,   225,
     226,   227,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,   247,    -1,   249,   250,   251,    -1,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,   268,    -1,    -1,    -1,    -1,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,    -1,    -1,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,    -1,    -1,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,    -1,   342,   343,    -1,   345,
     346,   347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,    -1,   385,
      -1,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,   418,   419,   420,   421,   422,   423,    -1,   425,
      -1,   427,   428,    -1,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,
      -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,
     486,    -1,    -1,   489,   490,   491,   492,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,    -1,    -1,   514,   515,
     516,   517,    -1,   519,   520,   521,    -1,   523,   524,   525,
     526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,   535,
     536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
     546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,
      -1,   557,    -1,   559,   560,    -1,    -1,   563,   564,   565,
     566,   567,    -1,    -1,   570,   571,    -1,   573,   574,   575,
     576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,
      -1,   587,   588,   589,    -1,    -1,   592,    -1,    -1,    -1,
     596,   597,    -1,    -1,    -1,    -1,   602,   603,    -1,    -1,
     606,   607,    -1,    -1,   610,   611,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    55,    -1,    57,    58,
      59,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    -1,    -1,    97,    98,
      99,    -1,   101,   102,   103,    -1,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,
     129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,    -1,   173,   174,   175,   176,    -1,   178,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,    -1,   201,   202,    -1,   204,   205,    -1,    -1,    -1,
     209,   210,   211,   212,   213,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,   224,   225,   226,   227,    -1,
      -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,
     249,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,   268,
      -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,    -1,
      -1,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,    -1,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,   342,   343,    -1,   345,   346,   347,    -1,
     349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,   385,    -1,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,   418,
     419,   420,   421,   422,   423,    -1,   425,    -1,   427,   428,
      -1,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,
      -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,
      -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,
     489,   490,   491,   492,   493,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,    -1,    -1,   514,   515,   516,   517,    -1,
     519,   520,   521,    -1,   523,   524,   525,   526,    -1,    -1,
      -1,    -1,    -1,   532,   533,    -1,   535,   536,   537,   538,
     539,   540,   541,   542,   543,   544,   545,   546,    -1,   548,
     549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,
     559,   560,    -1,    -1,   563,   564,   565,   566,   567,    -1,
      -1,   570,   571,    -1,   573,   574,   575,   576,   577,    -1,
      -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,
     589,    -1,    -1,   592,    -1,    -1,    -1,   596,   597,    -1,
      -1,    -1,    -1,   602,   603,    -1,    -1,   606,   607,    -1,
      -1,   610,   611,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,   101,
     102,   103,    -1,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,   121,
      -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,
     132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
      -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,   201,
     202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,   213,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,    -1,    -1,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,    -1,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,   340,    -1,
     342,   343,    -1,   345,   346,   347,    -1,   349,   350,   351,
      -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,    -1,   385,    -1,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,   418,   419,   420,   421,
     422,   423,    -1,   425,    -1,   427,   428,    -1,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,
     452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,
     492,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
      -1,    -1,   514,   515,   516,   517,    -1,   519,   520,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,
     532,   533,    -1,   535,   536,   537,   538,   539,   540,   541,
     542,   543,   544,   545,   546,    -1,   548,   549,    -1,    -1,
     552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,
      -1,   563,   564,   565,   566,   567,    -1,    -1,   570,   571,
      -1,   573,   574,   575,   576,   577,    -1,    -1,    -1,    -1,
      -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,    -1,
     592,    -1,    -1,    -1,   596,   597,    -1,    -1,    -1,    -1,
     602,   603,    -1,    -1,   606,   607,    -1,    -1,   610,   611,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,   101,   102,   103,    -1,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,   121,    -1,   123,    -1,
      -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,
      -1,   136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,
     145,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,   171,    -1,   173,   174,
     175,   176,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,   196,    -1,   198,   199,    -1,   201,   202,    -1,   204,
     205,    -1,    -1,    -1,   209,   210,   211,   212,   213,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,   224,
     225,   226,   227,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,   247,    -1,   249,   250,   251,    -1,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,   268,    -1,    -1,    -1,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,    -1,    -1,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,    -1,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,   342,   343,    -1,
     345,   346,   347,    -1,   349,   350,   351,    -1,   353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,    -1,
     385,    -1,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,   418,   419,   420,   421,   422,   423,    -1,
     425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
      -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,
      -1,   486,    -1,    -1,   489,   490,   491,   492,   493,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,    -1,    -1,   514,
     515,   516,   517,    -1,   519,   520,   521,    -1,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,
     555,    -1,   557,    -1,   559,   560,    -1,    -1,   563,   564,
     565,   566,   567,    -1,    -1,   570,   571,    -1,   573,   574,
     575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,
     585,    -1,   587,   588,   589,    -1,    -1,   592,    -1,    -1,
      -1,   596,   597,    -1,    -1,    -1,    -1,   602,   603,    -1,
      -1,   606,   607,    -1,    -1,   610,   611,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,   101,   102,   103,    -1,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,   115,   116,   117,
      -1,    -1,   120,   121,    -1,   123,    -1,    -1,    -1,   127,
      -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,
      -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,    -1,   173,   174,   175,   176,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,   196,    -1,
     198,   199,    -1,   201,   202,    -1,   204,   205,    -1,    -1,
      -1,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,   224,   225,   226,   227,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,
      -1,   249,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
     268,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
      -1,    -1,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,    -1,    -1,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,    -1,   342,   343,    -1,   345,   346,   347,
      -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,    -1,   385,    -1,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
     418,   419,   420,   421,   422,   423,    -1,   425,    -1,   427,
     428,    -1,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
      -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,
     458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,
      -1,   489,   490,   491,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,    -1,    -1,   514,   515,   516,   517,
      -1,   519,   520,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,    -1,   532,   533,    -1,   535,   536,   537,
     538,   539,   540,   541,   542,   543,   544,   545,   546,    -1,
     548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,
      -1,   559,   560,    -1,    -1,   563,   564,   565,   566,   567,
      -1,    -1,   570,   571,    -1,   573,   574,   575,   576,   577,
      -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,
     588,   589,    -1,    -1,   592,    -1,    -1,    -1,   596,   597,
      -1,    -1,    -1,    -1,   602,   603,    -1,    -1,   606,   607,
      -1,    -1,   610,   611,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,    -1,    -1,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,    -1,
      -1,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
      -1,   342,   343,    -1,   345,   346,   347,    -1,   349,   350,
     351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,    -1,   385,    -1,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,
      -1,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,   418,   419,   420,
     421,   422,   423,    -1,   425,    -1,   427,   428,    -1,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,
      -1,   462,    -1,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,
     481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,
     491,   492,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,    -1,    -1,   514,   515,   516,   517,    -1,   519,   520,
     521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
      -1,   532,   533,    -1,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,   546,    -1,   548,   549,    -1,
      -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,
      -1,    -1,   563,   564,   565,   566,   567,    -1,    -1,   570,
     571,    -1,   573,   574,   575,   576,   577,    -1,    -1,    -1,
      -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,
      -1,   592,    -1,    -1,    -1,   596,   597,    -1,    -1,    -1,
      -1,   602,   603,    -1,    -1,   606,   607,    -1,    -1,   610,
     611,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,   101,   102,   103,
      -1,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,   115,   116,   117,    -1,    -1,   120,   121,    -1,   123,
      -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,
      -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,    -1,
      -1,   145,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,   171,    -1,   173,
     174,   175,   176,    -1,   178,    -1,    -1,    -1,   182,    -1,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,   196,    -1,   198,   199,    -1,   201,   202,    -1,
     204,   205,    -1,    -1,    -1,   209,   210,   211,   212,   213,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
     224,   225,   226,   227,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,   247,    -1,   249,   250,   251,    -1,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,   268,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,    -1,    -1,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,    -1,    -1,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,    -1,   342,   343,
      -1,   345,   346,   347,    -1,   349,   350,   351,    -1,   353,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
      -1,   385,    -1,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,   418,   419,   420,   421,   422,   423,
      -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,
     454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,
      -1,    -1,   486,    -1,    -1,   489,   490,   491,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,    -1,    -1,
     514,   515,   516,   517,    -1,   519,   520,   521,    -1,   523,
     524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,
      -1,   535,   536,   537,   538,   539,   540,   541,   542,   543,
     544,   545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,
      -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,   563,
     564,   565,   566,   567,    -1,    -1,   570,   571,    -1,   573,
     574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,
     584,   585,    -1,   587,   588,   589,    -1,    -1,   592,    -1,
      -1,    -1,   596,   597,    -1,    -1,    -1,    -1,   602,   603,
      -1,    -1,   606,   607,    -1,    -1,   610,   611,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    54,    55,    -1,
      57,    58,    59,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    -1,    -1,
      97,    98,    99,    -1,   101,   102,   103,    -1,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,   121,    -1,   123,    -1,    -1,    -1,
     127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,
      -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,   171,    -1,   173,   174,   175,   176,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,   196,
      -1,   198,   199,    -1,   201,   202,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,   213,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,   224,   225,   226,
     227,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,   249,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,   268,    -1,    -1,    -1,    -1,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,    -1,    -1,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,    -1,    -1,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,    -1,   342,   343,    -1,   345,   346,
     347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,    -1,   385,    -1,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,   418,   419,   420,   421,   422,   423,    -1,   425,    -1,
     427,   428,    -1,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,
      -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,
      -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,
      -1,    -1,   489,   490,   491,   492,   493,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,    -1,    -1,   514,   515,   516,
     517,    -1,   519,   520,   521,    -1,   523,   524,   525,   526,
      -1,    -1,    -1,    -1,    -1,   532,   533,    -1,   535,   536,
     537,   538,   539,   540,   541,   542,   543,   544,   545,   546,
      -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,
     557,    -1,   559,   560,    -1,    -1,   563,   564,   565,   566,
     567,    -1,    -1,   570,   571,    -1,   573,   574,   575,   576,
     577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,
     587,   588,   589,    -1,    -1,   592,    -1,    -1,    -1,   596,
     597,    -1,    -1,    -1,    -1,   602,   603,    -1,    -1,   606,
     607,    -1,    -1,   610,   611,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
      -1,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,
     130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,
     140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,    -1,   169,
     170,   171,    -1,   173,   174,   175,   176,    -1,   178,    -1,
      -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,
      -1,   201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,
     210,   211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,
     250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,
      -1,    -1,    -1,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,   289,
      -1,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,    -1,    -1,
     310,   311,    -1,   313,    -1,   315,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
      -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,   339,
     340,    -1,   342,   343,    -1,   345,   346,   347,    -1,   349,
     350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,    -1,
      -1,   381,   382,   383,    -1,   385,    -1,   387,   388,   389,
     390,   391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
      -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,    -1,   425,    -1,   427,   428,    -1,
     430,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,    -1,
      -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,
      -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,
     480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,
     490,   491,    -1,    -1,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,    -1,    -1,   505,   506,   507,   508,    -1,
     510,   511,    -1,    -1,   514,   515,   516,   517,    -1,   519,
     520,   521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,
      -1,    -1,   532,   533,    -1,    -1,   536,   537,   538,   539,
     540,   541,   542,   543,   544,   545,   546,    -1,   548,   549,
      -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,
     560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,
     570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,
      -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,
      -1,    -1,   592,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
     610,   611,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,
      -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,
      -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,
      -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,   185,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,
      -1,    -1,   240,   241,    -1,   243,   244,    -1,    -1,   247,
      -1,    -1,   250,   251,    -1,   253,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,    -1,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
      -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,
      -1,   339,   340,    -1,    -1,    -1,    -1,   345,   346,   347,
      -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,
     428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,
     458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,
      -1,   489,   490,   491,    -1,    -1,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,    -1,    -1,   505,   506,   507,
     508,    -1,   510,   511,    -1,    -1,   514,   515,   516,   517,
      -1,    -1,   520,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
     538,   539,   540,    -1,   542,   543,    -1,   545,   546,    -1,
     548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,
      -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,
      -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,
      -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,
     588,   589,    -1,    -1,   592,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,   611,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,
      -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,
      -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,
      -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,   185,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,   217,
     218,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,
      -1,    -1,   240,   241,    -1,   243,   244,    -1,    -1,   247,
      -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,    -1,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
      -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,
      -1,   339,   340,    -1,    -1,    -1,    -1,   345,   346,   347,
      -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,
     428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
      -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,
     458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,
      -1,   489,   490,   491,    -1,    -1,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,    -1,    -1,   505,   506,   507,
     508,    -1,   510,   511,    -1,    -1,   514,   515,   516,   517,
      -1,    -1,   520,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
     538,   539,   540,    -1,   542,   543,    -1,   545,   546,    -1,
     548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,
      -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,
      -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,
      -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,
     588,   589,    -1,    -1,   592,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,   611,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,
      -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,
      -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,
      -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,
      -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,    -1,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
      -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,
      -1,   339,   340,    -1,    -1,    -1,    -1,   345,   346,   347,
      -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,
     428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,
     458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,
      -1,   489,   490,   491,    -1,    -1,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,    -1,    -1,   505,   506,   507,
     508,    -1,   510,   511,    -1,    -1,   514,   515,   516,   517,
      -1,    -1,   520,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
     538,   539,   540,    -1,   542,   543,    -1,   545,   546,    -1,
     548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,
      -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,
      -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,
      -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,
     588,   589,    -1,    -1,   592,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,   604,    -1,    -1,    17,
      -1,    -1,    20,   611,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,
      -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,
      -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,
      -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,
      -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,    -1,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
      -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,
      -1,   339,   340,    -1,    -1,    -1,    -1,   345,   346,   347,
      -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,
     428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
      -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,
     458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,
      -1,   489,   490,   491,    -1,    -1,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,    -1,    -1,   505,   506,   507,
     508,    -1,   510,   511,    -1,    -1,   514,   515,   516,   517,
      -1,    -1,   520,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
     538,   539,   540,    -1,   542,   543,    -1,   545,   546,    -1,
     548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,
      -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,
      -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,
      -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,
     588,   589,    -1,    -1,   592,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,   604,    -1,    -1,    -1,
      -1,    17,   610,   611,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,
      -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
     116,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,
      -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,
     136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
      -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,
      -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,   289,    -1,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,   335,
      -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,
     346,   347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,    -1,   385,
      -1,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,
      -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,
      -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,
     486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,    -1,    -1,   505,
     506,   507,   508,    -1,   510,   511,    -1,    -1,   514,   515,
     516,   517,    -1,    -1,   520,   521,    -1,   523,   524,   525,
     526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,
      -1,   537,   538,   539,   540,    -1,   542,   543,    -1,   545,
     546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,
      -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,
      -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,
     576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,
      -1,   587,   588,   589,    -1,    -1,   592,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,   603,    -1,    -1,
      -1,    17,    -1,    -1,    20,   611,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,
      -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
     116,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,
      -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,
     136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
      -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,
      -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,    -1,   228,    -1,   230,    -1,   232,   233,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,   289,    -1,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,   335,
      -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,
     346,   347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,    -1,   385,
      -1,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,
      -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,
      -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,
     486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,    -1,    -1,   505,
     506,   507,   508,    -1,   510,   511,    -1,    -1,   514,   515,
     516,   517,    -1,    -1,   520,   521,    -1,   523,   524,   525,
     526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,
      -1,   537,   538,   539,   540,    -1,   542,   543,    -1,   545,
     546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,
      -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,
      -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,
     576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,
      -1,   587,   588,   589,    -1,    -1,   592,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,   611,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,
      -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
     116,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,
      -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,
     136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
      -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,
      -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,   289,    -1,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,   335,
      -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,
     346,   347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,    -1,   385,
      -1,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,
      -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,
      -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,
     486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,    -1,    -1,   505,
     506,   507,   508,    -1,   510,   511,    -1,    -1,   514,   515,
     516,   517,    -1,    -1,   520,   521,    -1,   523,   524,   525,
     526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,
      -1,   537,   538,   539,   540,    -1,   542,   543,    -1,   545,
     546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,
      -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,
      -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,
     576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,
      -1,   587,   588,   589,    -1,    -1,   592,    -1,    -1,    -1,
      -1,     5,   598,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,   611,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    91,    -1,    -1,
      94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,    -1,   123,
      -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,
      -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,    -1,
      -1,   145,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,
     204,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,   289,    -1,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,    -1,    -1,   310,   311,    -1,   313,
      -1,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,
     334,   335,    -1,    -1,    -1,   339,   340,    -1,    -1,    -1,
      -1,   345,   346,   347,    -1,   349,   350,   351,    -1,   353,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,    -1,   381,   382,   383,
      -1,   385,    -1,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
      -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,
     454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,
      -1,    -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,   505,   506,   507,   508,    -1,   510,   511,    -1,    -1,
     514,   515,   516,   517,    -1,    -1,   520,   521,    -1,   523,
     524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,   538,   539,   540,    -1,   542,   543,
      -1,   545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,
      -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,
      -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,
     584,   585,    -1,   587,   588,   589,    -1,    -1,   592,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,   603,
      -1,    -1,    -1,    17,    -1,    -1,    20,   611,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    91,    -1,    -1,
      94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,    -1,   123,
      -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,
      -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,    -1,
      -1,   145,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,
     204,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,   289,    -1,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,    -1,    -1,   310,   311,    -1,   313,
      -1,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,
     334,   335,    -1,    -1,    -1,   339,   340,    -1,    -1,    -1,
      -1,   345,   346,   347,    -1,   349,   350,   351,    -1,   353,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,    -1,   381,   382,   383,
      -1,   385,    -1,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
      -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,
     454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,
      -1,    -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,   505,   506,   507,   508,    -1,   510,   511,    -1,    -1,
     514,   515,   516,   517,    -1,    -1,   520,   521,    -1,   523,
     524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,   538,   539,   540,    -1,   542,   543,
      -1,   545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,
      -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,
      -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,
     584,   585,    -1,   587,   588,   589,    -1,    -1,   592,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,   610,   611,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
      -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,
     132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,
      -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,    -1,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,    -1,    -1,   310,   311,
      -1,   313,    -1,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,
     332,   333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,
      -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,   351,
      -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,    -1,   385,    -1,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,
     452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,
      -1,    -1,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,   505,   506,   507,   508,    -1,   510,   511,
      -1,    -1,   514,   515,   516,   517,    -1,    -1,   520,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,
     532,   533,    -1,    -1,    -1,   537,   538,   539,   540,    -1,
     542,   543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,
     552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,
      -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,
      -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,
      -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,    -1,
     592,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   611,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
      -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,
     132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,
      -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,    -1,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,    -1,    -1,   310,   311,
      -1,   313,    -1,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,
     332,   333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,
      -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,   351,
      -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,    -1,   385,    -1,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,
     452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,
      -1,    -1,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,   505,   506,   507,   508,    -1,   510,   511,
      -1,    -1,   514,   515,   516,   517,    -1,    -1,   520,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,
     532,   533,    -1,    -1,    -1,   537,   538,   539,   540,    -1,
     542,   543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,
     552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,
      -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,
      -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,
      -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,    -1,
     592,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   611,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
      -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,
     132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,
      -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,    -1,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,    -1,    -1,   310,   311,
      -1,   313,    -1,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,
     332,   333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,
      -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,   351,
      -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,    -1,   385,    -1,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,
     452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,
      -1,    -1,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,   505,   506,   507,   508,    -1,   510,   511,
      -1,    -1,   514,   515,   516,   517,    -1,    -1,   520,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,
     532,   533,    -1,    -1,    -1,   537,   538,   539,   540,    -1,
     542,   543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,
     552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,
      -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,
      -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,
      -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,    -1,
     592,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   611,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
      -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,
     132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,
      -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,    -1,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,    -1,    -1,   310,   311,
      -1,   313,    -1,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,
     332,   333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,
      -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,   351,
      -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,    -1,   385,    -1,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,
     452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,
      -1,    -1,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,   505,   506,   507,   508,    -1,   510,   511,
      -1,    -1,   514,   515,   516,   517,    -1,    -1,   520,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,
     532,   533,    -1,    -1,    -1,   537,   538,   539,   540,    -1,
     542,   543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,
     552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,
      -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,
      -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,
      -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,    -1,
     592,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   611,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
      -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,
     132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,
      -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,
     252,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,    -1,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,    -1,    -1,   310,   311,
      -1,   313,    -1,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,
     332,   333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,
      -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,   351,
      -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,    -1,   385,    -1,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,
     452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,
      -1,    -1,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,   505,   506,   507,   508,    -1,   510,   511,
      -1,    -1,   514,   515,   516,   517,    -1,   519,   520,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,
     532,   533,    -1,    -1,    -1,   537,   538,   539,   540,    -1,
     542,   543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,
     552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,
      -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,
      -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,
      -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,    -1,
     592,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   610,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    91,    -1,
      -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,
      -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,
      -1,   184,    -1,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,
      -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,   212,
      -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,   252,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,   289,    -1,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,
     303,   304,   305,   306,   307,    -1,    -1,   310,   311,    -1,
     313,    -1,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,
     333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,    -1,
      -1,    -1,   345,   346,   347,    -1,   349,   350,   351,    -1,
     353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,    -1,    -1,   381,   382,
     383,    -1,   385,    -1,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,
     403,   404,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,    -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,
      -1,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,
     483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,    -1,
      -1,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
      -1,    -1,   505,   506,   507,   508,    -1,   510,   511,    -1,
      -1,   514,   515,   516,   517,    -1,   519,   520,   521,    -1,
     523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,
     533,    -1,    -1,    -1,   537,   538,   539,   540,    -1,   542,
     543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,   552,
      -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,
      -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,
      -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,
      -1,   584,   585,    -1,   587,   588,   589,    -1,    -1,   592,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,   610,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    91,    -1,    -1,
      94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,    -1,   123,
      -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,
      -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,    -1,
      -1,   145,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,
     204,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,   247,    -1,    -1,   250,   251,   252,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,   289,    -1,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,    -1,    -1,   310,   311,    -1,   313,
      -1,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,
     334,   335,    -1,    -1,    -1,   339,   340,    -1,    -1,    -1,
      -1,   345,   346,   347,    -1,   349,   350,   351,    -1,   353,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,    -1,   381,   382,   383,
      -1,   385,    -1,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
      -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,
     454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,
      -1,    -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,   505,   506,   507,   508,    -1,   510,   511,    -1,    -1,
     514,   515,   516,   517,    -1,   519,   520,   521,    -1,   523,
     524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,   538,   539,   540,    -1,   542,   543,
      -1,   545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,
      -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,
      -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,
     584,   585,    -1,   587,   588,   589,    -1,    -1,   592,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,   610,    22,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    -1,    74,
      -1,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    89,    -1,    91,    -1,    -1,    94,
      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,    -1,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,
      -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,
     145,    -1,    -1,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,    -1,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,   171,   172,   173,   174,
     175,    -1,    -1,    -1,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,   209,   210,   211,   212,   213,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,
     225,    -1,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,   237,    -1,    -1,   240,    -1,    -1,    -1,   244,
      -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,   270,    -1,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,    -1,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,
     335,    -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,
     345,   346,   347,    -1,   349,   350,   351,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,
     365,    -1,    -1,   368,   369,   370,    -1,   372,   373,   374,
     375,   376,   377,    -1,    -1,    -1,    -1,   382,   383,    -1,
     385,    -1,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,    -1,
     415,    -1,    -1,   418,    -1,   420,   421,    -1,   423,    -1,
      -1,    -1,   427,    -1,    -1,   430,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,   441,    -1,   443,   444,
      -1,   446,    -1,    -1,    -1,    -1,   451,   452,   453,    -1,
      -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,    -1,
     465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,
      -1,   486,    -1,    -1,   489,    -1,   491,    -1,    -1,    -1,
     495,    -1,   497,   498,   499,   500,   501,   502,    -1,    -1,
     505,   506,   507,   508,    -1,   510,   511,    -1,    -1,   514,
     515,   516,   517,    -1,    -1,   520,   521,    -1,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,
      -1,    -1,    -1,   538,   539,   540,    -1,   542,   543,    -1,
     545,   546,    -1,    -1,    -1,    -1,    -1,   552,    -1,    -1,
     555,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,    -1,
      -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,
     575,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,
      -1,    -1,   587,    -1,   589,    -1,     5,   592,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
     605,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,
     129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,   178,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,
     209,   210,   211,   212,    -1,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,
      -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
     289,    -1,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,    -1,
      -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,
     339,   340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,
     349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,
      -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,
      -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,
     489,   490,   491,    -1,    -1,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,   505,   506,   507,   508,
      -1,   510,   511,    -1,    -1,   514,   515,   516,   517,    -1,
      -1,   520,   521,    -1,   523,   524,   525,   526,    -1,    -1,
      -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,
     539,   540,    -1,   542,   543,    -1,   545,   546,    -1,   548,
     549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,
     559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,
      -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,
     589,    -1,     5,   592,     7,     8,     9,    10,    11,   598,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    91,    -1,
      -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,
      -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,
      -1,   184,    -1,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,
      -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,   212,
      -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,   289,    -1,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,
     303,   304,   305,   306,   307,    -1,    -1,   310,   311,    -1,
     313,    -1,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,
     333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,    -1,
      -1,    -1,   345,   346,   347,    -1,   349,   350,   351,    -1,
     353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,    -1,    -1,   381,   382,
     383,    -1,   385,    -1,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,
     403,   404,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,    -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,
      -1,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,
     483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,    -1,
      -1,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
      -1,    -1,   505,   506,   507,   508,    -1,   510,   511,    -1,
      -1,   514,   515,   516,   517,    -1,    -1,   520,   521,    -1,
     523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,
     533,    -1,    -1,    -1,   537,   538,   539,   540,    -1,   542,
     543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,   552,
      -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,
      -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,
      -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,
      -1,   584,   585,    -1,   587,   588,   589,    -1,     5,   592,
       7,     8,     9,    10,    11,   598,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,
      97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
     127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,
      -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,   289,    -1,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,    -1,   332,   333,   334,   335,    -1,
      -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,   346,
     347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,    -1,   385,    -1,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,    -1,
     427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,
      -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,
      -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,
      -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,    -1,    -1,   505,   506,
     507,   508,    -1,   510,   511,    -1,    -1,   514,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
      -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,
     537,   538,   539,   540,    -1,   542,   543,    -1,   545,   546,
      -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,
     557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,
     567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,
     577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,
     587,   588,   589,    -1,     5,   592,     7,     8,     9,    10,
      11,   598,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,   289,    -1,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,    -1,    -1,   310,
     311,    -1,   313,    -1,   315,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
      -1,   332,   333,   334,   335,    -1,    -1,    -1,   339,   340,
      -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,
     351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,    -1,   385,    -1,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,
      -1,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,
      -1,   462,    -1,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,
     481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,
     491,    -1,    -1,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,   505,   506,   507,   508,    -1,   510,
     511,    -1,    -1,   514,   515,   516,   517,    -1,    -1,   520,
     521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
      -1,   532,   533,    -1,    -1,    -1,   537,   538,   539,   540,
      -1,   542,   543,    -1,   545,   546,    -1,   548,   549,    -1,
      -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,
      -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,
      -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,
      -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,
       5,   592,     7,     8,     9,    10,    11,   598,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    -1,    -1,    94,
      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,    -1,   121,    -1,   123,    -1,
      -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,
      -1,   136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,
     145,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,   162,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,   176,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,   198,   199,    -1,   201,   202,    -1,   204,
     205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,   268,    -1,    -1,    -1,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,    -1,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,    -1,    -1,   343,    -1,
     345,   346,   347,    -1,   349,   350,   351,    -1,   353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,    -1,    -1,   381,   382,   383,    -1,
     385,    -1,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,
     425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
      -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,    -1,
      -1,   476,   477,   478,    -1,   480,   481,    -1,   483,    -1,
      -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,    -1,    -1,
     505,   506,   507,   508,    -1,   510,   511,    -1,    -1,   514,
     515,   516,   517,    -1,    -1,   520,   521,    -1,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,
      -1,    -1,   537,   538,   539,   540,   541,   542,   543,    -1,
     545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,
     555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,
      -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,
     575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,
     585,    -1,   587,   588,   589,    -1,     5,   592,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,   120,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,
     129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,
      -1,   150,   151,   152,   153,    -1,   155,   156,    -1,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,   178,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,
     209,   210,   211,   212,    -1,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,
      -1,   250,   251,   252,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
     289,    -1,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,    -1,
      -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,
     339,   340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,
     349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,    -1,    -1,   457,   458,
      -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,
      -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,
     489,   490,   491,    -1,    -1,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,   505,   506,   507,   508,
      -1,   510,   511,    -1,    -1,   514,   515,   516,   517,    -1,
     519,   520,   521,    -1,   523,   524,   525,   526,    -1,    -1,
      -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,
     539,   540,    -1,   542,   543,    -1,   545,   546,    -1,   548,
     549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,
     559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,
      -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,
     589,    -1,     5,   592,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    91,    -1,
      -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,
      -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,
      -1,   184,    -1,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,
      -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,   212,
      -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,   268,    -1,    -1,    -1,    -1,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,   289,    -1,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,
     303,   304,   305,   306,   307,    -1,    -1,   310,   311,    -1,
     313,    -1,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,
     333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,    -1,
     343,    -1,   345,   346,   347,    -1,   349,   350,   351,    -1,
     353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,    -1,    -1,   381,   382,
     383,    -1,   385,    -1,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,
     403,   404,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,    -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,
      -1,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,
     483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,    -1,
      -1,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
      -1,    -1,   505,   506,   507,   508,    -1,   510,   511,    -1,
      -1,   514,   515,   516,   517,    -1,    -1,   520,   521,    -1,
     523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,
     533,    -1,    -1,    -1,   537,   538,   539,   540,   541,   542,
     543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,   552,
      -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,
      -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,
      -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,
      -1,   584,   585,    -1,   587,   588,   589,    -1,     5,   592,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,
      97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,   120,   121,    -1,   123,    -1,    -1,    -1,
     127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,
      -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,    -1,   250,   251,   252,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,   289,    -1,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,    -1,   332,   333,   334,   335,    -1,
      -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,   346,
     347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,    -1,   385,    -1,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,    -1,
     427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,
      -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,
      -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,
      -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,    -1,    -1,   505,   506,
     507,   508,    -1,   510,   511,    -1,    -1,   514,   515,   516,
     517,    -1,   519,   520,   521,    -1,   523,   524,   525,   526,
      -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,
     537,   538,   539,   540,    -1,   542,   543,    -1,   545,   546,
      -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,
     557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,
     567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,
     577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,
     587,   588,   589,    -1,     5,   592,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,
     251,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,   289,    -1,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,    -1,    -1,   310,
     311,    -1,   313,    -1,   315,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
      -1,   332,   333,   334,   335,    -1,    -1,    -1,   339,   340,
      -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,
     351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,    -1,   385,    -1,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,
      -1,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,
      -1,   462,    -1,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,
     481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,
     491,    -1,    -1,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,   505,   506,   507,   508,    -1,   510,
     511,    -1,    -1,   514,   515,   516,   517,    -1,   519,   520,
     521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
      -1,   532,   533,    -1,    -1,    -1,   537,   538,   539,   540,
      -1,   542,   543,    -1,   545,   546,    -1,   548,   549,    -1,
      -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,
      -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,
      -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,
      -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,
       5,   592,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    -1,    -1,    94,
      -1,    -1,    97,    -1,    99,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,
      -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,
      -1,   136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,
     145,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,   162,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,
     205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,   247,    -1,    -1,   250,   251,   252,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,    -1,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,
     335,    -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,
     345,   346,   347,    -1,   349,   350,   351,    -1,   353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,    -1,    -1,   381,   382,   383,    -1,
     385,    -1,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,
     425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
      -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,
      -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,    -1,    -1,
     505,   506,   507,   508,    -1,   510,   511,    -1,    -1,   514,
     515,   516,   517,    -1,   519,   520,   521,    -1,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,
      -1,    -1,   537,   538,   539,   540,    -1,   542,   543,    -1,
     545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,
     555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,
      -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,
     575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,
     585,    -1,   587,   588,   589,    -1,     5,   592,     7,     8,
       9,    10,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,
     129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,   178,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,
     209,   210,   211,   212,    -1,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,
      -1,   250,   251,   252,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
     289,    -1,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,    -1,
      -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,
     339,   340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,
     349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,
      -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,
      -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,
     489,   490,   491,    -1,    -1,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,   505,   506,   507,   508,
      -1,   510,   511,    -1,    -1,   514,   515,   516,   517,    -1,
     519,   520,   521,    -1,   523,   524,   525,   526,    -1,    -1,
      -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,
     539,   540,    -1,   542,   543,    -1,   545,   546,    -1,   548,
     549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,
     559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,
      -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,
     589,    -1,     5,   592,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    35,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    91,    -1,
      -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,
      -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,
      -1,   184,    -1,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,   202,
      -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,   212,
      -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,   289,    -1,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,
     303,   304,   305,   306,   307,    -1,    -1,   310,   311,    -1,
     313,    -1,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,
     333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,    -1,
      -1,    -1,   345,   346,   347,    -1,   349,   350,   351,    -1,
     353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,    -1,    -1,   381,   382,
     383,    -1,   385,    -1,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,
     403,   404,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,    -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,
      -1,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,
     483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,    -1,
      -1,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
      -1,    -1,   505,   506,   507,   508,    -1,   510,   511,    -1,
      -1,   514,   515,   516,   517,    -1,   519,   520,   521,    -1,
     523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,
     533,    -1,    -1,    -1,   537,   538,   539,   540,    -1,   542,
     543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,   552,
      -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,
      -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,
      -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,
      -1,   584,   585,    -1,   587,   588,   589,    -1,     5,   592,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,
      97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
     127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,
      -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,    -1,   250,   251,   252,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,   289,    -1,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,    -1,   332,   333,   334,   335,    -1,
      -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,   346,
     347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,    -1,   385,    -1,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,    -1,
     427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,
      -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,
      -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,
      -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,    -1,    -1,   505,   506,
     507,   508,    -1,   510,   511,    -1,    -1,   514,   515,   516,
     517,    -1,   519,   520,   521,    -1,   523,   524,   525,   526,
      -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,
     537,   538,   539,   540,    -1,   542,   543,    -1,   545,   546,
      -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,
     557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,
     567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,
     577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,
     587,   588,   589,    -1,     5,   592,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,
     251,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,   289,    -1,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,    -1,    -1,   310,
     311,    -1,   313,    -1,   315,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
      -1,   332,   333,   334,   335,    -1,    -1,    -1,   339,   340,
      -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,
     351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,    -1,   385,    -1,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,
      -1,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,
      -1,   462,    -1,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,
     481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,
     491,    -1,    -1,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,   505,   506,   507,   508,    -1,   510,
     511,    -1,    -1,   514,   515,   516,   517,    -1,   519,   520,
     521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
      -1,   532,   533,    -1,    -1,    -1,   537,   538,   539,   540,
      -1,   542,   543,    -1,   545,   546,    -1,   548,   549,    -1,
      -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,
      -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,
      -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,
      -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,
       5,   592,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    -1,    -1,    94,
      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,
      -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,
      -1,   136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,
     145,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,   162,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,
     205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,   247,    -1,    -1,   250,   251,   252,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,    -1,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,
     335,    -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,
     345,   346,   347,    -1,   349,   350,   351,    -1,   353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,    -1,    -1,   381,   382,   383,    -1,
     385,    -1,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,
     425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
      -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,
      -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,    -1,    -1,
     505,   506,   507,   508,    -1,   510,   511,    -1,    -1,   514,
     515,   516,   517,    -1,   519,   520,   521,    -1,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,
      -1,    -1,   537,   538,   539,   540,    -1,   542,   543,    -1,
     545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,
     555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,
      -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,
     575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,
     585,    -1,   587,   588,   589,    -1,     5,   592,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    18,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,
     129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,   178,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,
     209,   210,   211,   212,    -1,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,
      -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
     289,    -1,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,    -1,
      -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,
     339,   340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,
     349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,
      -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,
      -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,
     489,   490,   491,    -1,    -1,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,   505,   506,   507,   508,
      -1,   510,   511,    -1,    -1,   514,   515,   516,   517,    -1,
     519,   520,   521,    -1,   523,   524,   525,   526,    -1,    -1,
      -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,
     539,   540,    -1,   542,   543,    -1,   545,   546,    -1,   548,
     549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,
     559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,
      -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,
     589,    -1,     5,   592,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    -1,
      -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,
      -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,   164,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,
      -1,   184,    -1,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,
      -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,   212,
      -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,   289,    -1,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,
     303,   304,   305,   306,   307,    -1,    -1,   310,   311,    -1,
     313,    -1,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,
     333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,    -1,
      -1,    -1,   345,   346,   347,    -1,   349,   350,   351,    -1,
     353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,    -1,    -1,   381,   382,
     383,    -1,   385,    -1,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,
     403,   404,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,    -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,
      -1,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,
     483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,    -1,
      -1,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
      -1,    -1,   505,   506,   507,   508,    -1,   510,   511,    -1,
      -1,   514,   515,   516,   517,    -1,    -1,   520,   521,    -1,
     523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,
     533,    -1,    -1,    -1,   537,   538,   539,   540,    -1,   542,
     543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,   552,
      -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,
      -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,
      -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,
      -1,   584,   585,    -1,   587,   588,   589,    -1,     5,   592,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,
      97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
     127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,
      -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,   289,    -1,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,    -1,   332,   333,   334,   335,    -1,
      -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,   346,
     347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,    -1,   385,    -1,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,    -1,
     427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,
      -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,
      -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,    -1,    -1,   505,   506,
     507,   508,    -1,   510,   511,    -1,    -1,   514,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
      -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,
     537,   538,   539,   540,    -1,   542,   543,    -1,   545,   546,
      -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,
     557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,
     567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,
     577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,
     587,   588,   589,    -1,     5,   592,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,
      -1,   182,   183,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,   289,    -1,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,    -1,    -1,   310,
     311,    -1,   313,    -1,   315,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
      -1,   332,   333,   334,   335,    -1,    -1,    -1,   339,   340,
      -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,
     351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,    -1,   385,    -1,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,
      -1,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,
      -1,   462,    -1,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,
     481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,
     491,    -1,    -1,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,   505,   506,   507,   508,    -1,   510,
     511,    -1,    -1,   514,   515,   516,   517,    -1,    -1,   520,
     521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
      -1,   532,   533,    -1,    -1,    -1,   537,   538,   539,   540,
      -1,   542,   543,    -1,   545,   546,    -1,   548,   549,    -1,
      -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,
      -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,
      -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,
      -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,
       5,   592,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    -1,    -1,    94,
      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,   120,   121,    -1,   123,    -1,
      -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,
      -1,   136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,
     145,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,   162,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,
     205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,    -1,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,
     335,    -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,
     345,   346,   347,    -1,   349,   350,   351,    -1,   353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,    -1,    -1,   381,   382,   383,    -1,
     385,    -1,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,
     425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
      -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,
      -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,    -1,    -1,
     505,   506,   507,   508,    -1,   510,   511,    -1,    -1,   514,
     515,   516,   517,    -1,    -1,   520,   521,    -1,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,
      -1,    -1,   537,   538,   539,   540,    -1,   542,   543,    -1,
     545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,
     555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,
      -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,
     575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,
     585,    -1,   587,   588,   589,    -1,     5,   592,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,   120,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,
     129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,   178,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,
     209,   210,   211,   212,    -1,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,
      -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
     289,    -1,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,    -1,
      -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,
     339,   340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,
     349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,
      -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,
      -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,
     489,   490,   491,    -1,    -1,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,   505,   506,   507,   508,
      -1,   510,   511,    -1,    -1,   514,   515,   516,   517,    -1,
      -1,   520,   521,    -1,   523,   524,   525,   526,    -1,    -1,
      -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,
     539,   540,    -1,   542,   543,    -1,   545,   546,    -1,   548,
     549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,
     559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,
      -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,
     589,    -1,     5,   592,     7,     8,     9,    10,    11,    12,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    91,    -1,
      -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,
      -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,
      -1,   184,    -1,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,
      -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,   212,
      -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,   289,    -1,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,
     303,   304,   305,   306,   307,    -1,    -1,   310,   311,    -1,
     313,    -1,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,
     333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,    -1,
      -1,    -1,   345,   346,   347,    -1,   349,   350,   351,    -1,
     353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,    -1,    -1,   381,   382,
     383,    -1,   385,    -1,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,
     403,   404,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,    -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,
      -1,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,
     483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,    -1,
      -1,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
      -1,    -1,   505,   506,   507,   508,    -1,   510,   511,    -1,
      -1,   514,   515,   516,   517,    -1,    -1,   520,   521,    -1,
     523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,
     533,    -1,    -1,    -1,   537,   538,   539,   540,    -1,   542,
     543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,   552,
      -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,
      -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,
      -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,
      -1,   584,   585,    -1,   587,   588,   589,    -1,     5,   592,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,
      97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
     127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,
      -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,   289,    -1,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,    -1,   332,   333,   334,   335,    -1,
      -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,   346,
     347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,    -1,
     427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,
      -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,
      -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,
      -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,    -1,    -1,   505,   506,
     507,   508,    -1,   510,   511,    -1,    -1,   514,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
      -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,
     537,   538,   539,   540,    -1,   542,   543,    -1,   545,   546,
      -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,
     557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,
     567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,
     577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,
     587,   588,   589,    -1,     5,   592,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,   289,    -1,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,    -1,    -1,   310,
     311,    -1,   313,    -1,   315,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
      -1,   332,   333,   334,   335,    -1,    -1,    -1,   339,   340,
      -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,
     351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,    -1,   385,    -1,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,
      -1,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,
      -1,   462,    -1,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,
     481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,
     491,    -1,    -1,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,   505,   506,   507,   508,    -1,   510,
     511,    -1,    -1,   514,   515,   516,   517,    -1,   519,   520,
     521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
      -1,   532,   533,    -1,    -1,    -1,   537,   538,   539,   540,
      -1,   542,   543,    -1,   545,   546,    -1,   548,   549,    -1,
      -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,
      -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,
      -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,
      -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,
       5,   592,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    -1,    -1,    94,
      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,   120,   121,    -1,   123,    -1,
      -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,
      -1,   136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,
     145,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,   162,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,
     205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,    -1,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,
     335,    -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,
     345,   346,   347,    -1,   349,   350,   351,    -1,   353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,    -1,    -1,   381,   382,   383,    -1,
     385,    -1,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,
     425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
      -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,
      -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,    -1,    -1,
     505,   506,   507,   508,    -1,   510,   511,    -1,    -1,   514,
     515,   516,   517,    -1,    -1,   520,   521,    -1,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,
      -1,    -1,   537,   538,   539,   540,    -1,   542,   543,    -1,
     545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,
     555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,
      -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,
     575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,
     585,    -1,   587,   588,   589,    -1,     5,   592,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,
     129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,   178,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,
     209,   210,   211,   212,    -1,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,
      -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
     289,    -1,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,    -1,
      -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,
     339,   340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,
     349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,
      -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,
      -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,
     489,   490,   491,    -1,    -1,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,   505,   506,   507,   508,
      -1,   510,   511,    -1,    -1,   514,   515,   516,   517,    -1,
      -1,   520,   521,    -1,   523,   524,   525,   526,    -1,    -1,
      -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,
     539,   540,    -1,   542,   543,    -1,   545,   546,    -1,   548,
     549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,
     559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,
      -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,
     589,    -1,     5,   592,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    91,    -1,
      -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,
      -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,
      -1,   184,    -1,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,
      -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,   212,
      -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,   289,    -1,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,
     303,   304,   305,   306,   307,    -1,    -1,   310,   311,    -1,
     313,    -1,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,
     333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,    -1,
      -1,    -1,   345,   346,   347,    -1,   349,   350,   351,    -1,
     353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,    -1,    -1,   381,   382,
     383,    -1,   385,    -1,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,
     403,   404,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,    -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,
      -1,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,
     483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,    -1,
      -1,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
      -1,    -1,   505,   506,   507,   508,    -1,   510,   511,    -1,
      -1,   514,   515,   516,   517,    -1,    -1,   520,   521,    -1,
     523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,
     533,    -1,    -1,    -1,   537,   538,   539,   540,    -1,   542,
     543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,   552,
      -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,
      -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,
      -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,
      -1,   584,   585,    -1,   587,   588,   589,    -1,     5,   592,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    -1,    74,    -1,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,
      97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,
      -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
     127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
      -1,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,    -1,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,   172,   173,   174,   175,    -1,
      -1,    -1,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,   205,    -1,
      -1,    -1,   209,   210,   211,   212,   213,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,    -1,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
     237,    -1,    -1,   240,    -1,    -1,    -1,   244,    -1,    -1,
     247,   248,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,   270,    -1,    -1,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,   289,    -1,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,    -1,   332,   333,   334,   335,    -1,
      -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,   345,   346,
     347,    -1,   349,   350,   351,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,   365,    -1,
      -1,   368,   369,   370,    -1,   372,   373,   374,   375,   376,
     377,    -1,    -1,    -1,    -1,   382,   383,    -1,   385,    -1,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,   412,   413,    -1,   415,    -1,
      -1,   418,    -1,   420,   421,    -1,   423,    -1,    -1,    -1,
     427,    -1,    -1,   430,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,   441,    -1,   443,   444,    -1,   446,
      -1,    -1,    -1,    -1,   451,   452,   453,    -1,    -1,    -1,
      -1,   458,    -1,    -1,    -1,   462,    -1,    -1,   465,    -1,
     467,    -1,   469,    -1,    -1,   472,   473,    -1,    -1,    -1,
      -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,
      -1,    -1,   489,    -1,   491,    -1,    -1,    -1,   495,    -1,
     497,   498,   499,   500,   501,   502,    -1,    -1,   505,   506,
     507,   508,    -1,   510,   511,    -1,    -1,   514,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
      -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,
      -1,   538,   539,   540,    -1,   542,   543,    -1,   545,   546,
      -1,    -1,    -1,    -1,    -1,   552,    -1,    -1,   555,    -1,
      -1,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,
     567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,
     577,    -1,    -1,   580,    -1,    -1,    -1,   584,    -1,    -1,
     587,    -1,   589,    -1,     5,   592,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    -1,    74,    -1,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    89,    -1,
      91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,   139,   140,
     141,    -1,   143,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,    -1,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
     171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,
      -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,   237,    -1,    -1,   240,
      -1,    -1,    -1,   244,    -1,    -1,   247,   248,    -1,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,   270,
      -1,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,   289,    -1,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,    -1,    -1,   310,
     311,    -1,   313,    -1,   315,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
      -1,   332,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
      -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,
     351,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   364,   365,    -1,    -1,   368,   369,   370,
      -1,   372,   373,   374,   375,   376,   377,    -1,    -1,    -1,
      -1,   382,   383,    -1,   385,    -1,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,
      -1,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,   412,   413,    -1,   415,    -1,    -1,   418,    -1,   420,
     421,    -1,   423,    -1,    -1,    -1,   427,    -1,    -1,   430,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
     441,    -1,   443,   444,    -1,   446,    -1,    -1,    -1,    -1,
     451,   452,   453,    -1,    -1,    -1,    -1,   458,    -1,    -1,
      -1,   462,    -1,    -1,   465,    -1,   467,    -1,   469,    -1,
      -1,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,
     481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,    -1,
     491,    -1,    -1,    -1,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,   505,   506,   507,   508,    -1,   510,
     511,    -1,    -1,   514,   515,   516,   517,    -1,    -1,   520,
     521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
      -1,   532,   533,    -1,    -1,    -1,    -1,   538,   539,   540,
      -1,   542,   543,    -1,   545,   546,    -1,    -1,    -1,    -1,
      -1,   552,    -1,    -1,   555,    -1,    -1,    -1,   559,   560,
      -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,
      -1,    -1,    -1,   574,   575,   576,   577,   578,    -1,   580,
      -1,    -1,    -1,   584,    -1,    -1,   587,    -1,   589,    -1,
       5,   592,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    -1,    74,
      -1,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    89,    -1,    91,    -1,    -1,    94,
      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,    -1,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,
      -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,   139,   140,   141,    -1,   143,    -1,
     145,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,    -1,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,   171,   172,   173,   174,
     175,    -1,    -1,    -1,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,   209,   210,   211,   212,   213,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,
     225,    -1,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,   237,    -1,    -1,   240,    -1,    -1,    -1,   244,
      -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,   270,    -1,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,    -1,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,
     335,    -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,
     345,   346,   347,    -1,   349,   350,   351,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,
     365,    -1,    -1,   368,   369,   370,    -1,   372,   373,   374,
     375,   376,   377,    -1,    -1,    -1,    -1,   382,   383,    -1,
     385,    -1,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,    -1,
     415,    -1,    -1,   418,    -1,   420,   421,    -1,   423,    -1,
      -1,    -1,   427,    -1,    -1,   430,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,   441,    -1,   443,   444,
      -1,   446,    -1,    -1,    -1,    -1,   451,   452,   453,    -1,
      -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,    -1,
     465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,
      -1,   486,    -1,    -1,   489,    -1,   491,    -1,    -1,    -1,
     495,    -1,   497,   498,   499,   500,   501,   502,    -1,    -1,
     505,   506,   507,   508,    -1,   510,   511,    -1,    -1,   514,
     515,   516,   517,    -1,    -1,   520,   521,    -1,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,
      -1,    -1,    -1,   538,   539,   540,    -1,   542,   543,    -1,
     545,   546,    -1,    -1,    -1,    -1,    -1,   552,    -1,    -1,
     555,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,    -1,
      -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,
     575,   576,   577,   578,    -1,   580,    -1,    -1,    -1,   584,
      -1,    -1,   587,    -1,   589,    -1,     5,   592,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    52,    -1,    54,    55,    -1,    57,    -1,
      -1,    -1,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    -1,    74,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,
     129,   130,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,    -1,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,    -1,
     199,    -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
     209,   210,   211,   212,   213,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,
      -1,   230,    -1,   232,   233,    -1,   235,   236,   237,    -1,
      -1,   240,    -1,    -1,    -1,   244,    -1,    -1,   247,   248,
      -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,   270,    -1,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
     289,    -1,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,    -1,
      -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,
     349,   350,   351,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   364,   365,    -1,    -1,   368,
     369,   370,    -1,   372,   373,   374,   375,   376,   377,    -1,
      -1,    -1,    -1,   382,   383,    -1,   385,    -1,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,    -1,   415,    -1,    -1,   418,
      -1,   420,   421,    -1,   423,    -1,    -1,    -1,   427,    -1,
      -1,   430,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,   441,    -1,   443,   444,    -1,   446,    -1,    -1,
      -1,    -1,   451,   452,   453,    -1,    -1,    -1,    -1,   458,
      -1,    -1,    -1,   462,    -1,    -1,   465,    -1,   467,    -1,
     469,    -1,    -1,   472,   473,    -1,    -1,    -1,    -1,    -1,
      -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,
     489,    -1,   491,    -1,    -1,    -1,   495,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,   505,   506,   507,   508,
      -1,   510,   511,    -1,    -1,   514,   515,   516,   517,    -1,
      -1,   520,   521,    -1,   523,   524,   525,   526,    -1,    -1,
      -1,    -1,    -1,   532,   533,    -1,    -1,    -1,    -1,   538,
     539,   540,    -1,   542,   543,    -1,   545,   546,    -1,    -1,
      -1,    -1,    -1,   552,    -1,    -1,   555,    -1,    -1,    -1,
     559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,
      -1,   580,    -1,    -1,    -1,   584,    -1,    -1,   587,    -1,
     589,    -1,     5,   592,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      -1,    74,    -1,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    89,    -1,    91,    -1,
      -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,
      -1,    -1,    -1,    -1,    -1,    -1,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,    -1,
      -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,   175,    -1,    -1,    -1,    -1,    -1,    -1,   182,
      -1,   184,    -1,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,
     213,    -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,
      -1,    -1,   225,    -1,    -1,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,    -1,
      -1,   244,    -1,    -1,   247,   248,    -1,   250,   251,    -1,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,    -1,    -1,   270,    -1,    -1,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,   289,    -1,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,
     303,   304,   305,   306,   307,    -1,    -1,   310,   311,    -1,
     313,    -1,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,
     333,   334,   335,    -1,    -1,    -1,    -1,   340,    -1,    -1,
      -1,    -1,   345,   346,   347,    -1,   349,   350,   351,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   364,   365,    -1,    -1,   368,   369,   370,    -1,   372,
     373,   374,   375,   376,   377,    -1,    -1,    -1,    -1,   382,
     383,    -1,   385,    -1,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,
     403,   404,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,    -1,    -1,   418,    -1,   420,   421,    -1,
     423,    -1,    -1,    -1,   427,    -1,    -1,   430,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,   441,    -1,
     443,   444,    -1,   446,    -1,    -1,    -1,    -1,   451,   452,
     453,    -1,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,
      -1,    -1,   465,    -1,   467,    -1,   469,    -1,    -1,   472,
     473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,
     483,    -1,    -1,   486,    -1,    -1,   489,    -1,   491,    -1,
      -1,    -1,   495,    -1,   497,   498,   499,   500,   501,   502,
      -1,    -1,   505,   506,   507,   508,    -1,   510,   511,    -1,
      -1,   514,   515,   516,   517,    -1,    -1,   520,   521,    -1,
     523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,
     533,    -1,    -1,    -1,    -1,   538,   539,   540,    -1,   542,
     543,    -1,   545,   546,    -1,    -1,    -1,    -1,    -1,   552,
      -1,    -1,   555,    -1,    -1,    -1,   559,   560,    -1,    -1,
      -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,
      -1,   574,   575,   576,   577,    -1,    -1,   580,    -1,    -1,
      -1,   584,    -1,    -1,   587,    -1,   589,    -1,     5,   592,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    -1,    74,    -1,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,
      97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,
      -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
     127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
      -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,    -1,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,   172,   173,   174,   175,    -1,
      -1,    -1,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,   205,    -1,
      -1,    -1,   209,   210,   211,   212,   213,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,    -1,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
     237,    -1,    -1,   240,    -1,    -1,    -1,   244,    -1,    -1,
     247,   248,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,   270,    -1,    -1,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,   289,    -1,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,    -1,   332,   333,   334,   335,    -1,
      -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,   345,   346,
     347,    -1,   349,   350,   351,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,   365,    -1,
      -1,   368,   369,   370,    -1,   372,   373,   374,   375,   376,
     377,    -1,    -1,    -1,    -1,   382,   383,    -1,   385,    -1,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,   412,   413,    -1,   415,    -1,
      -1,   418,    -1,   420,   421,    -1,   423,    -1,    -1,    -1,
     427,    -1,    -1,   430,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,   441,    -1,   443,   444,    -1,   446,
      -1,    -1,    -1,    -1,   451,   452,   453,    -1,    -1,    -1,
      -1,   458,    -1,    -1,    -1,   462,    -1,    -1,   465,    -1,
     467,    -1,   469,    -1,    -1,   472,   473,    -1,    -1,    -1,
      -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,
      -1,    -1,   489,    -1,   491,    -1,    -1,    -1,   495,    -1,
     497,   498,   499,   500,   501,   502,    -1,    -1,   505,   506,
     507,   508,    -1,   510,   511,    -1,    -1,   514,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
      -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,
      -1,   538,   539,   540,    -1,   542,   543,    -1,   545,   546,
      -1,    -1,    -1,    -1,    -1,   552,    -1,    -1,   555,    -1,
      -1,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,
     567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,
     577,    -1,    -1,   580,    -1,    -1,    -1,   584,    -1,    -1,
     587,    -1,   589,    -1,     5,   592,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    -1,    74,    -1,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    89,    -1,
      91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,    -1,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
     171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,
      -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,   237,    -1,    -1,   240,
      -1,    -1,    -1,   244,    -1,    -1,   247,   248,    -1,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,   270,
      -1,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,   289,    -1,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,    -1,    -1,   310,
     311,    -1,   313,    -1,   315,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
      -1,   332,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
      -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,
     351,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   364,   365,    -1,    -1,   368,   369,   370,
      -1,   372,   373,   374,   375,   376,   377,    -1,    -1,    -1,
      -1,   382,   383,    -1,   385,    -1,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,
      -1,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,   412,   413,    -1,   415,    -1,    -1,   418,    -1,   420,
     421,    -1,   423,    -1,    -1,    -1,   427,    -1,    -1,   430,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
     441,    -1,   443,   444,    -1,   446,    -1,    -1,    -1,    -1,
     451,   452,   453,    -1,    -1,    -1,    -1,   458,    -1,    -1,
      -1,   462,    -1,    -1,   465,    -1,   467,    -1,   469,    -1,
      -1,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,
     481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,    -1,
     491,    -1,    -1,    -1,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,   505,   506,   507,   508,    -1,   510,
     511,    -1,    -1,   514,   515,   516,   517,    -1,    -1,   520,
     521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
      -1,   532,   533,    -1,    -1,    -1,    -1,   538,   539,   540,
      -1,   542,   543,    -1,   545,   546,    -1,    -1,    -1,    -1,
      -1,   552,    -1,    -1,   555,    -1,    -1,    -1,   559,   560,
      -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,
      -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,   580,
      -1,    -1,    -1,   584,    -1,    -1,   587,    -1,   589,    -1,
       5,   592,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    -1,    74,
      -1,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    89,    -1,    91,    -1,    -1,    94,
      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,    -1,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,
      -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,
     145,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,    -1,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,   171,   172,   173,   174,
     175,    -1,    -1,    -1,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,   209,   210,   211,   212,   213,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,
     225,    -1,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,   237,    -1,    -1,   240,    -1,    -1,    -1,   244,
      -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,   270,    -1,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,    -1,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,
     335,    -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,
     345,   346,   347,    -1,   349,   350,   351,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,
     365,    -1,    -1,   368,   369,   370,    -1,   372,   373,   374,
     375,   376,   377,    -1,    -1,    -1,    -1,   382,   383,    -1,
     385,    -1,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,    -1,
     415,    -1,    -1,   418,    -1,   420,   421,    -1,   423,    -1,
      -1,    -1,   427,    -1,    -1,   430,   431,   432,    -1,    -1,
      -1,   436,   437,   438,   439,   440,   441,    -1,   443,   444,
      -1,   446,    -1,    -1,    -1,    -1,   451,   452,   453,    -1,
      -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,    -1,
     465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,
      -1,   486,    -1,    -1,   489,    -1,   491,    -1,    -1,    -1,
     495,    -1,   497,   498,   499,   500,   501,   502,    -1,    -1,
     505,   506,   507,   508,    -1,   510,   511,    -1,    -1,   514,
     515,   516,   517,    -1,    -1,   520,   521,    -1,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,
      -1,    -1,    -1,   538,   539,   540,    -1,   542,   543,    -1,
     545,   546,    -1,    -1,    -1,    -1,    -1,   552,    -1,    -1,
     555,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,    -1,
      -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,
     575,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,
      -1,    -1,   587,    -1,   589,    -1,     5,   592,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    52,    -1,    54,    55,    -1,    57,    -1,
      -1,    -1,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    -1,    74,    -1,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,
     129,   130,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,    -1,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,    -1,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,    -1,
     199,    -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
     209,   210,   211,   212,   213,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,
      -1,   230,    -1,   232,   233,    -1,   235,   236,   237,    -1,
      -1,   240,    -1,    -1,    -1,   244,    -1,    -1,   247,   248,
      -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,   270,    -1,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
     289,    -1,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,    -1,
      -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,
     349,   350,   351,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   364,   365,    -1,    -1,   368,
     369,   370,    -1,   372,   373,   374,   375,   376,   377,    -1,
      -1,    -1,    -1,   382,   383,    -1,   385,    -1,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,    -1,   415,    -1,    -1,   418,
      -1,   420,   421,    -1,   423,    -1,    -1,    -1,   427,    -1,
      -1,   430,   431,   432,    -1,    -1,    -1,   436,   437,   438,
     439,   440,   441,    -1,   443,   444,    -1,   446,    -1,    -1,
      -1,    -1,   451,   452,   453,    -1,    -1,    -1,    -1,   458,
      -1,    -1,    -1,   462,    -1,    -1,   465,    -1,   467,    -1,
     469,    -1,    -1,   472,   473,    -1,    -1,    -1,    -1,    -1,
      -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,
     489,    -1,   491,    -1,    -1,    -1,   495,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,   505,   506,   507,   508,
      -1,   510,   511,    -1,    -1,   514,   515,   516,   517,    -1,
      -1,   520,   521,    -1,   523,   524,   525,   526,    -1,    -1,
      -1,    -1,    -1,   532,   533,    -1,    -1,    -1,    -1,   538,
     539,   540,    -1,   542,   543,    -1,   545,   546,    -1,    -1,
      -1,    -1,    -1,   552,    -1,    -1,   555,    -1,    -1,    -1,
     559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,
      -1,   580,    -1,    -1,    -1,   584,    -1,    -1,   587,    -1,
     589,    -1,     5,   592,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      -1,    74,    -1,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    89,    -1,    91,    -1,
      -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,
      -1,    -1,    -1,    -1,    -1,    -1,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,    -1,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,    -1,
      -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,   175,    -1,    -1,    -1,    -1,    -1,    -1,   182,
      -1,   184,    -1,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,
     213,    -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,
      -1,    -1,   225,    -1,    -1,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,    -1,
      -1,   244,    -1,    -1,   247,   248,    -1,   250,   251,    -1,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,    -1,    -1,   270,    -1,    -1,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,   289,    -1,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,
     303,   304,   305,   306,   307,    -1,    -1,   310,   311,    -1,
     313,    -1,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,
     333,   334,   335,    -1,    -1,    -1,    -1,   340,    -1,    -1,
      -1,    -1,   345,   346,   347,    -1,   349,   350,   351,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   364,   365,    -1,    -1,   368,   369,   370,    -1,   372,
     373,   374,   375,   376,   377,    -1,    -1,    -1,    -1,   382,
     383,    -1,   385,    -1,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,
     403,   404,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,    -1,    -1,   418,    -1,   420,   421,    -1,
     423,    -1,    -1,    -1,   427,    -1,    -1,   430,   431,   432,
      -1,    -1,    -1,   436,   437,   438,   439,   440,   441,    -1,
     443,   444,    -1,   446,    -1,    -1,    -1,    -1,   451,   452,
     453,    -1,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,
      -1,    -1,   465,    -1,   467,    -1,   469,    -1,    -1,   472,
     473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,
     483,    -1,    -1,   486,    -1,    -1,   489,    -1,   491,    -1,
      -1,    -1,   495,    -1,   497,   498,   499,   500,   501,   502,
      -1,    -1,   505,   506,   507,   508,    -1,   510,   511,    -1,
      -1,   514,   515,   516,   517,    -1,    -1,   520,   521,    -1,
     523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,
     533,    -1,    -1,    -1,    -1,   538,   539,   540,    -1,   542,
     543,    -1,   545,   546,    -1,    -1,    -1,    -1,    -1,   552,
      -1,    -1,   555,    -1,    -1,    -1,   559,   560,    -1,    -1,
      -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,
      -1,   574,   575,   576,   577,    -1,    -1,   580,    -1,    -1,
      -1,   584,    -1,    -1,   587,    -1,   589,    -1,     5,   592,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    64,    -1,    66,
      67,    -1,    69,    70,    -1,    72,    -1,    74,    -1,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,
      97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,
      -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
     127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
      -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
      -1,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,    -1,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,
      -1,    -1,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,   205,    -1,
      -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,    -1,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,    -1,   244,    -1,    -1,
     247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,   289,    -1,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,    -1,   332,   333,   334,   335,    -1,
      -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,   345,   346,
     347,    -1,   349,   350,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,   365,    -1,
      -1,   368,   369,   370,    -1,   372,   373,   374,   375,   376,
     377,    -1,    -1,    -1,    -1,   382,   383,    -1,   385,    -1,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,   412,   413,    -1,   415,    -1,
      -1,   418,    -1,   420,    -1,    -1,   423,    -1,    -1,    -1,
     427,    -1,    -1,   430,   431,    -1,    -1,    -1,    -1,   436,
     437,   438,   439,   440,   441,    -1,   443,   444,    -1,   446,
      -1,    -1,    -1,    -1,   451,   452,   453,    -1,    -1,    -1,
      -1,   458,    -1,    -1,    -1,   462,    -1,    -1,   465,    -1,
     467,    -1,   469,    -1,    -1,   472,   473,    -1,    -1,    -1,
      -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,
      -1,    -1,   489,    -1,   491,    -1,    -1,    -1,   495,    -1,
     497,   498,   499,   500,   501,   502,    -1,    -1,   505,   506,
     507,   508,    -1,   510,   511,    -1,    -1,   514,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
      -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,
      -1,   538,   539,   540,    -1,   542,   543,    -1,   545,   546,
      -1,    -1,    -1,    -1,    -1,   552,    -1,    -1,   555,    -1,
      -1,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,
     567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,
     577,    -1,    -1,    -1,    -1,    -1,    -1,   584,    -1,    -1,
     587,    -1,   589,    -1,    -1,   592
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    14,    30,    34,    48,    49,    56,    60,    61,
      75,    95,   116,   124,   125,   126,   136,   137,   149,   162,
     178,   193,   198,   201,   224,   226,   242,   259,   263,   352,
     371,   381,   392,   414,   417,   419,   422,   425,   426,   433,
     435,   442,   448,   456,   461,   463,   466,   490,   494,   537,
     549,   553,   556,   561,   588,   603,   614,   617,   618,   619,
     620,   621,   623,   628,   630,   637,   667,   695,   702,   810,
     960,   998,  1001,  1009,  1012,  1017,  1019,  1020,  1025,  1028,
    1033,  1040,  1052,  1053,  1208,  1210,  1220,  1223,  1248,  1256,
    1267,  1274,  1288,  1291,  1294,  1303,  1309,  1313,  1315,  1316,
    1366,  1383,  1389,  1391,  1398,  1400,  1426,  1432,  1433,  1434,
    1435,  1488,  1496,  1497,    11,   103,   121,   186,   214,   264,
     386,   454,   511,   994,  1457,  1458,  1459,  1462,   260,   341,
    1027,  1427,   519,  1357,   218,     5,     7,     8,     9,    10,
      11,    17,    20,    22,    23,    24,    25,    26,    27,    28,
      30,    34,    38,    41,    42,    43,    45,    47,    48,    51,
      54,    55,    57,    58,    60,    62,    63,    64,    65,    66,
      67,    69,    70,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    82,    83,    85,    86,    87,    88,    89,    91,
      94,    97,   101,   105,   106,   107,   110,   115,   116,   121,
     123,   127,   129,   130,   131,   132,   136,   139,   140,   141,
     145,   147,   148,   150,   151,   152,   155,   156,   158,   159,
     160,   161,   162,   165,   166,   167,   170,   171,   173,   174,
     175,   178,   182,   184,   186,   188,   189,   190,   191,   192,
     194,   198,   199,   201,   204,   205,   209,   210,   211,   212,
     215,   216,   217,   220,   225,   226,   230,   232,   233,   235,
     236,   240,   243,   244,   247,   250,   251,   257,   258,   260,
     262,   264,   265,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   287,   288,   289,   291,
     292,   293,   294,   296,   297,   302,   303,   304,   305,   306,
     307,   310,   311,   313,   315,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   328,   329,   332,   333,   334,   335,
     339,   340,   345,   346,   347,   349,   350,   351,   353,   363,
     364,   365,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   381,   382,   383,   385,   387,   388,
     389,   390,   391,   393,   394,   395,   398,   402,   403,   404,
     405,   406,   409,   410,   411,   412,   413,   415,   416,   418,
     419,   420,   423,   425,   427,   428,   430,   431,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   446,   447,
     451,   452,   453,   454,   458,   462,   464,   465,   466,   467,
     469,   470,   471,   472,   473,   480,   481,   483,   486,   489,
     490,   491,   494,   495,   497,   498,   499,   500,   501,   502,
     505,   506,   507,   508,   510,   511,   514,   515,   516,   517,
     520,   521,   523,   524,   525,   526,   532,   533,   537,   538,
     539,   540,   542,   543,   545,   546,   548,   549,   552,   555,
     557,   559,   560,   567,   570,   574,   575,   576,   577,   584,
     585,   587,   588,   589,   592,   661,  1356,  1360,  1364,  1365,
     287,   510,   513,  1385,  1385,   584,  1428,   103,   185,   264,
     454,   474,   511,   516,   551,   559,   643,   644,   861,   862,
     863,   938,   939,   940,  1257,  1209,   103,   160,   186,   218,
     264,   386,   454,   511,   516,   534,   559,   574,  1219,  1360,
    1027,   660,   611,  1353,  1355,  1360,   629,  1221,   375,    82,
     394,  1314,   106,   218,   589,  1321,  1385,  1027,   811,  1360,
    1310,   442,   559,  1385,  1027,  1224,  1304,   477,   692,   696,
     697,  1360,   660,  1428,  1360,  1056,  1058,  1059,   354,  1368,
    1275,   696,   490,   494,   466,   532,   466,   513,  1269,   375,
    1390,  1249,  1360,    30,    75,   147,   381,   403,   435,   490,
    1490,   448,   603,  1054,     0,   149,   615,   381,   166,   370,
    1292,  1353,  1360,   153,   971,  1360,   153,   661,   195,   661,
     252,  1357,  1360,  1362,   757,   758,   761,   784,  1360,   513,
     160,   966,  1457,  1385,  1428,  1034,   668,   611,   530,  1010,
    1021,    16,  1429,   213,   864,   195,  1362,   759,   784,   660,
     359,  1454,  1458,  1459,  1460,  1461,  1462,   513,   862,   218,
     218,   218,   214,   271,   395,  1265,  1266,     7,    20,    27,
      33,    35,    36,    37,    39,    52,    53,    58,    59,    66,
      69,    88,    92,    93,    98,    99,   102,   103,   108,   109,
     110,   115,   117,   120,   163,   168,   169,   176,   189,   191,
     196,   202,   209,   213,   224,   227,   249,   257,   268,   290,
     295,   306,   310,   312,   316,   317,   318,   319,   320,   327,
     336,   337,   338,   342,   343,   347,   366,   372,   376,   377,
     379,   393,   421,   422,   434,   440,   446,   492,   493,   499,
     503,   504,   509,   519,   523,   524,   525,   526,   535,   536,
     537,   541,   544,   559,   563,   564,   565,   566,   571,   573,
     577,   592,   596,   597,   602,   603,   606,   607,   610,   611,
    1073,  1074,  1075,  1076,  1080,  1083,  1084,  1085,  1086,  1087,
    1088,  1096,  1100,  1110,  1340,  1342,  1344,  1345,  1349,  1351,
    1356,  1360,   213,  1218,  1218,  1218,  1360,   195,  1218,  1218,
     784,  1218,   660,  1218,  1385,   624,  1295,    12,    13,    95,
     124,   137,   160,   162,   173,   193,   218,   224,   263,   387,
     391,   407,   415,   423,   448,   461,   462,   505,   534,   556,
     558,  1401,  1403,  1405,  1406,  1360,   351,    65,   399,   611,
    1362,   122,   203,   271,  1226,  1360,  1073,   228,  1317,  1384,
    1385,    46,   812,   183,    33,   287,  1280,  1311,  1360,   660,
    1029,  1385,   122,   271,  1227,  1255,   287,   394,   466,  1305,
    1306,   567,   693,   456,   698,    12,   391,  1399,  1403,   530,
    1429,  1057,    12,   133,   203,   479,   480,   481,   482,   483,
     484,   496,  1063,  1064,  1065,  1453,  1367,    23,    34,    58,
      59,    69,    91,    93,    95,   104,   151,   156,   159,   184,
     186,   192,   194,   217,   218,   239,   260,   287,   351,   374,
     385,   386,   389,   390,   410,   453,   466,   495,   513,   576,
     912,   937,  1276,  1280,  1281,  1283,  1374,   698,  1003,  1004,
    1003,  1003,   581,  1002,  1003,  1268,  1360,  1385,  1255,    35,
     202,   519,  1341,  1358,  1489,  1489,  1489,  1489,  1489,  1058,
    1054,   604,   609,  1360,  1290,  1289,   304,   517,   543,   962,
     557,    99,  1362,  1363,   964,   763,   785,  1360,   963,   353,
       6,    56,   137,   337,   398,   400,   786,  1353,   661,   485,
    1463,  1464,   965,  1018,  1035,  1036,  1037,  1038,  1353,   603,
     669,  1360,   631,  1214,  1215,  1353,  1214,    55,   339,   339,
     414,  1430,   336,   337,  1079,  1360,   762,   785,   180,     6,
    1363,  1416,  1417,   422,    10,   386,   534,   647,  1069,  1456,
    1464,  1472,  1476,  1477,  1483,   647,  1069,  1455,  1464,  1472,
    1477,  1483,  1457,  1462,   864,  1360,  1360,  1360,   183,  1258,
    1262,  1263,  1360,  1265,   603,   603,   603,  1083,   603,   603,
     603,  1073,  1113,   603,   603,   603,   603,   603,   603,   603,
     603,   603,  1072,  1072,   603,  1072,   603,   603,   603,   544,
     603,  1340,   603,   603,   603,   603,   603,   603,   603,   603,
     603,   603,   603,  1073,   603,   603,   603,  1111,  1112,  1349,
    1360,   603,   603,   603,   603,   603,   603,   603,   603,   603,
    1073,   603,  1072,   603,   603,   603,   603,   603,   603,   603,
     603,   603,   603,   603,   603,   603,   603,   603,   603,   603,
    1072,   603,  1340,   603,   603,   603,  1340,   603,   603,    35,
     202,   519,   603,  1072,  1072,  1072,   603,   603,   603,   603,
     603,  1083,  1083,  1083,  1073,  1448,  1449,  1360,  1101,  1360,
      15,    16,   356,   359,   590,  1077,  1078,   153,   154,   187,
     197,   234,   245,   272,   330,  1081,    31,   134,   231,   253,
     316,   408,   459,   460,   472,   594,   595,   596,   597,   598,
     599,   600,   601,  1079,  1083,    68,   358,   605,  1358,   603,
     611,   163,  1360,   661,  1360,   348,   785,   661,  1362,   795,
    1281,   661,  1363,  1415,  1213,  1218,   562,   625,    33,   127,
     151,   155,   188,   205,   265,   287,   385,   394,   409,   427,
     466,   467,   491,  1296,  1300,  1301,  1385,   385,  1404,   437,
     437,   511,   516,   559,   574,   354,  1408,   510,   348,  1410,
      64,   466,  1407,   104,   574,  1409,   348,   605,    18,   153,
    1163,  1164,  1392,  1360,   994,   471,    48,    80,   271,  1323,
    1353,  1386,  1387,  1026,   255,   258,   396,   813,   815,   610,
     622,  1357,   265,  1030,  1363,  1031,  1032,  1353,  1013,   228,
    1215,  1228,  1229,    48,  1307,   605,  1358,    54,    63,    72,
      85,    86,    87,   101,   305,   322,   444,   498,   515,   699,
     701,  1404,   348,   348,   442,  1431,  1430,   550,  1436,  1437,
     598,  1067,  1068,  1069,  1065,  1369,  1370,  1371,   159,   456,
     253,   579,  1287,   603,   103,   160,   186,   386,   513,   534,
     574,  1287,    12,   873,  1362,   254,  1182,  1184,   183,   231,
    1282,  1284,    67,   491,   181,   491,   510,    67,   491,    12,
      41,    89,    94,   233,   303,   365,   473,   507,  1270,  1271,
    1272,   159,   205,   491,   491,  1182,  1287,  1284,   265,   150,
      70,   388,   510,   533,   491,   570,  1000,   413,   486,  1005,
    1006,   999,    83,  1215,   994,   605,   350,  1492,   506,  1493,
     238,   430,  1491,   604,  1437,  1439,  1441,  1442,   149,   616,
    1052,  1293,  1341,  1360,   120,   859,   860,   870,   871,   921,
     106,  1072,   610,   662,     6,   764,   662,   603,   105,   781,
     781,   781,     4,   961,   967,   447,   574,  1464,  1214,   231,
     605,   371,  1046,  1048,  1049,   670,   671,  1073,   215,   273,
     274,   275,   276,   277,   278,   280,   281,   282,   283,   284,
     285,   286,   288,   289,   411,   412,   632,   633,   636,   166,
     395,   605,  1011,    57,   166,   170,   181,   302,   395,  1022,
    1023,  1024,    55,   414,   163,   642,   764,   106,   781,   211,
     605,  1069,  1069,  1069,   160,   186,   186,  1464,  1353,   941,
     942,   941,   941,  1216,  1217,  1353,  1354,  1360,   605,  1260,
     611,  1264,  1073,  1073,    12,   133,  1106,  1165,  1106,  1106,
    1106,   578,  1115,  1073,  1073,  1110,  1110,  1073,  1073,  1073,
     133,  1106,  1165,   604,  1073,   604,  1073,  1073,  1073,  1073,
    1349,  1448,   111,   112,   113,   114,   115,   206,   207,   208,
     209,   306,   308,   309,   310,   317,   393,   445,   446,   577,
     591,   592,  1160,  1161,  1110,   107,   110,   523,   526,  1162,
     133,  1103,  1073,  1073,  1073,  1073,  1160,  1073,  1110,  1112,
       9,   605,   611,   133,  1106,  1073,  1073,   133,  1106,  1073,
    1073,  1110,  1110,  1110,  1073,  1073,  1073,  1073,  1110,  1076,
    1073,  1073,  1073,  1073,  1073,  1073,  1106,  1106,  1073,  1073,
     133,  1106,  1073,  1073,  1161,  1161,  1073,    44,   246,   531,
    1073,  1073,   604,  1350,  1351,  1360,  1106,  1106,  1073,  1073,
     604,   605,   604,   448,   603,  1445,  1446,  1073,   610,  1102,
    1362,   611,  1073,  1073,  1073,  1075,   169,   342,   536,   552,
    1079,    12,    17,  1075,  1082,  1076,  1076,   603,  1083,  1076,
    1076,  1076,  1076,   253,  1076,  1076,   227,  1076,   227,  1076,
    1076,  1076,  1076,  1076,    31,   231,   253,   408,  1362,  1083,
    1073,  1089,  1360,   611,  1353,   795,   340,   575,   796,   797,
     151,   605,  1214,  1211,   610,   626,   627,   265,   265,   265,
     265,    48,   265,   265,   605,  1297,   510,   603,  1418,  1363,
    1418,  1418,  1418,   186,   386,   513,  1402,  1406,  1360,   174,
     333,  1360,  1393,  1394,  1228,  1357,  1041,   260,  1322,  1164,
     605,  1214,    70,   603,   819,   820,   819,   820,   370,   822,
     199,   241,  1362,    29,   530,  1312,   605,   530,   605,   530,
    1214,  1229,  1225,    12,  1308,  1306,   605,   153,   605,  1363,
     186,   386,  1402,  1360,    12,   133,  1444,   605,  1060,  1073,
    1347,  1360,   605,   192,   260,   349,   453,  1372,  1373,  1376,
    1377,   231,  1285,  1357,  1073,   598,   864,   661,   661,   661,
    1353,   661,  1353,   265,   321,   491,  1279,  1279,   268,   343,
     541,  1185,  1186,  1342,  1360,  1287,  1360,   661,  1287,  1363,
    1282,   661,  1287,   232,   508,   171,   181,  1273,   605,  1285,
    1282,  1353,  1284,  1282,  1282,  1287,  1287,   555,  1007,   605,
    1007,   469,   448,   603,   607,  1116,  1117,  1118,  1119,  1120,
    1129,  1130,  1144,  1341,   373,  1494,   357,  1178,  1184,  1443,
     860,    68,   912,   129,  1362,    73,    88,   243,   314,   339,
     397,   485,   664,   666,   404,   545,   782,   783,   220,   778,
     779,   780,   787,   795,   797,   103,   204,   363,   372,   378,
     470,   559,   645,   646,  1357,    24,   294,   772,   773,   774,
     787,   788,   789,   795,   797,   765,   766,   772,     6,    13,
      14,    25,    26,    56,    60,    61,    66,    73,    82,    92,
     106,   123,   130,   131,   137,   145,   151,   179,   216,   218,
     225,   240,   293,   311,   315,   352,   357,   364,   371,   372,
     402,   416,   417,   418,   419,   439,   495,   511,   514,   537,
     550,   807,   866,   868,   870,   871,   972,   976,   978,   981,
     987,   988,   989,  1174,   348,   655,   968,   121,   230,  1353,
     120,  1039,  1360,  1037,  1353,   809,  1048,   218,   241,   935,
    1050,   604,   605,   153,   153,   153,   153,   153,   153,   153,
     153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
     153,   605,  1215,   557,  1023,   858,   859,    73,   334,   405,
     546,   775,   776,   777,   787,   791,   792,   793,   794,   795,
     797,   585,   561,   760,    46,   581,  1417,   186,   661,   661,
     864,   661,  1360,   638,   539,   562,   949,   348,   348,   348,
     605,  1261,  1259,   611,  1264,  1263,   183,   598,  1360,   605,
     604,  1106,   604,  1107,   604,   604,   604,  1073,   143,   578,
    1114,    18,   604,   562,   604,   604,   604,   605,   562,   605,
    1097,   604,   598,   604,   605,   605,   604,   604,   604,   604,
     183,   604,   605,  1099,   604,   605,   605,   605,   597,   605,
     604,   604,   603,  1349,  1360,  1106,   604,   604,   604,  1106,
     604,   605,   604,   604,   604,   604,   604,   604,   604,   605,
     604,   231,   604,   605,   605,   605,   605,   604,   604,   604,
     605,   183,   605,  1106,   604,   604,   604,   605,   605,   605,
     604,   183,  1073,   183,  1073,   183,  1073,   183,   604,   605,
     604,   604,   604,   604,   605,   604,  1110,  1134,  1135,  1136,
     448,   603,  1055,  1440,  1441,   550,  1450,   608,   192,   260,
     453,  1375,   457,  1360,   169,   342,   536,   552,   603,    16,
    1073,  1448,   158,  1170,  1076,  1073,  1073,  1076,   603,  1083,
    1076,  1069,  1093,  1094,  1095,   603,   611,  1360,  1212,   796,
     153,   457,  1239,  1240,  1363,    50,   429,   995,  1214,  1362,
     605,  1301,  1214,  1302,  1360,  1419,  1420,   530,   598,  1353,
    1360,  1414,  1414,  1414,   153,   174,   187,   197,   244,   245,
     272,   333,   383,  1395,  1397,   579,  1166,  1222,  1042,  1043,
    1044,  1045,  1353,   219,   271,   399,   586,  1388,  1387,   603,
    1069,   117,   176,   202,   268,   343,   541,  1189,  1192,  1193,
     502,   823,   814,   603,  1073,  1357,  1363,  1363,  1032,  1353,
     166,   395,   560,  1014,  1015,  1016,   448,   456,   566,   567,
     603,   854,  1230,  1233,   701,   110,   523,   526,   700,  1100,
    1344,  1349,   193,   183,  1414,  1414,  1414,  1438,  1068,   183,
     228,  1061,  1062,  1177,  1178,  1203,  1070,  1070,   611,  1370,
     120,   532,  1360,  1379,   323,   372,   610,   912,  1378,  1357,
     183,  1286,   604,  1360,   346,   605,  1287,   394,  1182,  1272,
    1286,  1287,  1282,  1353,  1287,  1287,   636,  1008,  1006,  1143,
    1360,    96,   221,   238,   249,   326,   434,   496,  1128,   456,
     605,  1353,  1143,   605,   181,  1495,    46,  1182,  1240,  1240,
     324,  1357,   485,   485,   485,   485,   485,   447,  1357,  1357,
    1240,   605,   780,  1357,  1357,  1357,  1357,   117,   176,   202,
     268,   343,   541,  1188,  1357,  1357,   604,   605,  1240,  1240,
     605,   774,   767,   768,   787,   788,   789,    71,    84,   371,
     882,   885,   886,   933,   935,   939,   940,   993,   993,   371,
    1240,  1240,   993,  1240,   371,   371,  1240,  1240,   530,   129,
    1240,   239,   511,   180,   371,   384,   935,   993,   239,  1240,
     511,   129,  1240,  1240,  1240,  1240,   993,   371,    46,  1240,
     809,  1240,   371,   369,    18,   153,   530,   997,   371,   371,
    1240,   132,   303,  1360,  1240,   371,  1240,   866,   605,   806,
     807,   976,   603,   611,   881,   887,  1352,  1360,    77,   443,
     417,   969,  1465,  1047,   603,  1073,   603,  1188,  1357,  1357,
     117,   176,   268,   343,   541,  1190,  1357,  1188,  1357,  1357,
    1357,  1357,  1357,  1188,  1188,  1357,  1345,  1357,  1188,   633,
    1240,  1240,  1240,  1240,   605,   777,  1362,   264,   167,   769,
     770,   771,   787,   788,   789,   790,   793,   794,   795,   797,
     372,   519,  1362,  1360,  1484,     8,    29,   755,   661,   603,
     431,   253,   603,   799,   865,   867,   868,    45,   199,   441,
     954,   954,  1353,  1353,  1353,  1217,  1360,   562,  1166,  1360,
    1117,   611,  1264,   227,  1073,   604,  1073,   522,  1073,  1073,
     147,    33,    59,   107,   110,   118,   328,   464,   526,   554,
    1108,    33,   913,  1362,  1073,   913,  1108,  1110,   604,   227,
     227,  1073,  1073,  1110,  1073,  1073,  1073,  1073,  1073,  1076,
     604,   604,  1073,  1073,  1073,  1073,  1073,  1073,  1110,   227,
    1073,  1073,  1073,   604,  1073,  1073,  1073,  1073,   183,  1073,
     183,  1073,   183,  1073,  1073,  1073,   604,  1451,  1452,  1453,
    1135,  1055,   604,  1444,   611,   611,   611,  1362,  1073,  1448,
    1075,   604,   605,   604,  1083,  1160,  1160,    16,  1073,  1448,
    1170,  1073,   604,   605,  1109,  1110,  1360,   872,  1362,   995,
     627,  1298,   604,   605,  1416,   611,   611,   530,   530,   530,
    1396,  1167,  1183,  1184,  1230,   605,  1046,  1048,   519,  1359,
     586,   260,   816,   817,   818,  1360,   828,  1076,    46,   603,
     830,   820,   816,   530,  1015,   855,  1231,   603,  1236,  1241,
    1236,   604,   854,  1232,  1346,  1347,  1350,  1360,  1234,   153,
     354,  1416,   183,   183,   183,  1053,   138,  1117,  1204,   181,
     263,  1066,  1203,  1183,  1062,    18,  1071,  1357,  1360,   598,
    1360,   611,   235,   611,  1239,   120,   913,   914,  1239,   181,
    1239,   610,  1362,    33,   120,   916,   917,  1362,  1190,  1277,
     156,   576,  1186,  1186,   343,  1278,  1166,  1282,   605,  1131,
    1138,  1143,  1116,   238,   238,   360,  1145,   238,   249,   434,
    1145,  1129,  1116,  1251,  1252,  1350,  1118,  1164,  1140,  1141,
    1188,   307,  1179,   120,   918,   920,  1362,   914,   106,   106,
     121,   230,   210,   798,  1189,   780,   646,   798,   798,   774,
     605,   768,   957,  1352,  1027,    61,   180,   384,   551,   884,
     934,   957,   935,   936,   936,  1352,  1027,  1190,  1188,  1352,
    1188,    12,   977,   985,   986,  1360,  1027,  1357,  1357,   912,
    1240,  1188,   241,   985,   241,  1352,  1352,   872,  1240,   174,
     244,   339,   875,  1188,  1190,  1190,  1352,  1027,  1175,  1176,
    1350,   120,  1188,   808,  1357,  1027,  1353,  1027,  1027,    76,
      78,    79,   120,   141,   175,   406,   874,  1188,   977,   869,
       6,   137,   989,   878,   879,   880,   881,   882,  1360,     8,
     174,   996,   407,   883,   884,   927,   888,   611,   337,   382,
      22,   161,   649,   530,   130,   145,   651,   603,  1466,   603,
     384,  1156,  1157,  1158,  1360,   634,   635,  1188,  1357,  1189,
     798,   798,   777,   353,   195,  1240,   605,   771,   519,    18,
     431,   603,   124,   224,   556,   756,   648,  1478,   118,   229,
     401,   497,   877,  1353,   253,   371,   800,   805,   806,   878,
     805,   605,   867,   639,   640,   641,   611,  1117,  1177,  1264,
    1166,  1073,   604,  1073,   522,   603,   904,   905,   905,   603,
     899,   900,   904,   905,   229,   229,   604,   604,   604,   604,
     604,  1098,  1073,  1073,   604,   604,  1105,  1178,   605,   605,
     604,   605,   604,   231,  1090,  1091,   604,   604,   604,   604,
     605,   604,   604,  1073,   604,   181,   604,   604,   605,   604,
     605,   605,   604,  1073,   604,  1073,   604,  1073,   604,   604,
     604,  1067,  1453,   604,  1447,   611,   958,   604,  1110,  1075,
     604,   605,   604,  1070,  1095,   604,   581,  1299,  1420,   581,
    1423,   598,   598,  1416,  1416,  1416,   603,  1073,   348,  1246,
    1044,  1353,  1048,   214,  1051,  1318,   604,   605,  1070,   815,
     371,   831,   832,   604,  1363,  1063,  1237,  1238,  1350,  1242,
     605,   603,  1233,   604,   604,   605,   611,  1436,   700,   183,
    1416,  1416,  1416,  1166,  1166,   139,   361,  1199,  1200,  1205,
     556,   231,  1357,  1360,   611,  1360,   251,  1360,    12,    33,
     120,   348,  1073,  1382,    68,   919,  1073,  1363,   347,   372,
     519,  1381,  1375,  1239,  1182,  1182,  1287,   636,   550,   604,
    1440,  1139,   608,   238,  1129,  1145,  1145,   238,   348,   348,
     562,   605,  1250,  1239,  1154,  1155,  1063,  1073,  1180,  1348,
     768,   979,   603,   241,   241,   936,   957,   942,   957,   957,
     137,   456,   977,   990,   974,   605,  1189,   914,  1357,   957,
     995,  1357,   991,   977,   605,    19,   125,  1181,   812,   977,
     982,   977,   603,   604,   605,  1360,  1353,    32,    33,    38,
      40,    42,    43,    59,   107,   110,   118,   135,   152,   175,
     177,   189,   190,   229,   257,   266,   267,   269,   299,   300,
     301,   318,   319,   320,   325,   328,   344,   345,   376,   377,
     401,   452,   456,   468,   520,   523,   526,   527,   528,   529,
     568,   569,   592,   889,   892,   893,   894,   895,   896,   897,
     898,  1360,   382,  1073,  1073,   348,   655,   661,   348,    73,
     656,  1360,  1467,    18,   977,   604,   605,   604,   605,   603,
    1360,   798,   771,  1357,   877,  1485,   348,   348,   672,   673,
     675,  1360,   471,  1353,   854,   604,   214,   422,   802,  1324,
     867,   603,   603,   603,  1360,  1166,   254,  1187,  1160,  1073,
     117,   268,   343,   541,    20,    33,    47,   548,   912,   922,
     923,   924,   343,   604,  1160,  1160,   450,  1104,  1073,  1073,
    1110,    42,   326,   604,   581,  1092,  1073,  1160,  1073,  1073,
    1073,  1073,   604,   604,   604,  1137,  1445,  1360,   604,  1110,
    1071,   399,   193,   424,  1421,  1421,  1421,   120,  1073,  1244,
    1245,   140,  1051,   247,  1324,   818,   604,   199,   241,   833,
     604,   605,  1067,   605,  1239,  1243,  1244,  1241,  1235,  1233,
    1346,  1360,  1416,  1183,   195,  1171,  1359,  1359,   610,  1201,
    1202,  1362,   458,   598,   399,   420,   451,  1380,   920,  1239,
     603,   603,  1379,  1073,  1444,  1164,  1119,  1116,  1129,   238,
     238,  1116,  1129,  1122,  1121,  1123,  1252,  1166,  1245,  1152,
    1153,  1067,   605,  1181,   370,   603,   980,  1073,   957,   942,
     603,   941,   941,   120,   120,   887,  1022,   986,   919,   889,
     973,  1176,   983,   985,   975,  1302,   880,   603,   928,   904,
     904,   905,   899,   380,   890,   899,   899,   924,    59,   568,
     893,   895,   924,   924,    59,   569,   569,   572,   899,   891,
     905,   924,   904,   905,    25,    68,    73,   120,   342,   348,
     384,   452,   551,   907,   908,   909,   926,  1079,   572,   904,
     924,    33,   904,   925,   904,   904,   905,   603,   900,   906,
     611,  1160,   466,  1357,   136,   970,   604,   605,  1468,  1469,
     604,  1157,   635,   645,   471,   222,   231,   362,   676,   677,
     678,   679,  1069,   443,   604,   605,   674,  1357,   604,   604,
     865,    18,   857,   955,   956,  1360,   955,   955,  1186,   604,
     604,   604,   604,   604,    33,    20,   548,   912,    33,   913,
     605,   604,   604,  1341,   604,   604,   605,   604,   313,   243,
     394,   604,   604,   604,   604,   604,   604,   876,  1062,  1183,
    1440,   604,   263,   354,    62,   236,   335,   487,   500,   587,
    1412,  1413,   581,  1422,  1422,  1422,   604,   605,  1247,   228,
     603,   821,   603,   834,  1360,   832,   856,  1238,  1245,   604,
    1439,    46,   200,  1168,  1206,  1362,   605,   313,    74,   542,
     399,  1381,   519,   519,  1239,  1132,   348,  1125,  1129,  1129,
     348,  1127,  1073,  1073,   603,  1177,   179,   214,   561,  1147,
    1148,  1151,  1142,  1348,  1189,   831,   604,   603,   603,   955,
     603,   603,   110,   523,   526,   596,   597,  1343,  1344,   996,
     907,  1027,   984,  1014,   604,   929,  1360,   290,   930,   464,
     554,   593,   901,   902,   903,   603,   901,   901,   924,   572,
     901,   603,   924,   901,   918,  1357,   338,   911,  1343,   556,
     120,   241,   909,   241,   342,   924,   925,   924,   925,   901,
     343,   901,  1360,   650,   657,   658,  1360,   448,   603,  1470,
     604,  1357,   604,   605,   674,  1473,   649,  1479,   675,   889,
     910,   801,   805,   603,   854,   604,   605,  1181,   603,   604,
     604,   913,   925,   343,  1073,   313,   165,  1066,  1066,   519,
     519,   519,    16,  1411,   193,   291,   292,   296,   297,  1424,
    1425,  1245,   241,   513,  1069,   824,   826,   827,  1360,   566,
     835,   876,  1172,  1348,  1169,  1177,   912,   915,  1202,   604,
     604,  1382,  1445,  1124,   562,  1126,   562,  1159,  1360,  1187,
     935,   935,  1148,   876,  1181,   604,   955,   955,   604,   955,
     955,  1345,  1345,   992,   228,   604,   605,   184,   368,   465,
     348,   931,   903,   959,  1341,   959,  1072,   338,   567,   489,
     652,    52,    65,   172,   213,   237,   248,   351,   432,   659,
     706,   708,   709,   710,   712,   713,   714,   715,   716,   717,
     719,   727,   728,   731,   742,   745,   747,   748,  1356,  1361,
    1365,  1056,  1054,   581,  1471,  1486,   678,  1360,  1353,   654,
     655,   431,   919,  1439,   802,   854,   803,    73,   240,   943,
     946,   949,   950,   951,   956,   343,   581,   944,   948,   950,
     953,   945,   947,   950,   952,   604,   604,  1412,   354,  1188,
    1188,  1188,  1188,  1425,   556,  1353,   828,   501,   829,   604,
     605,   231,   250,    73,   106,   218,   293,   311,   334,   511,
     851,   852,   853,  1281,   582,   583,   605,  1173,  1181,  1073,
    1183,   914,  1207,  1133,  1073,   603,  1073,   603,   604,   605,
     181,  1146,  1146,   604,   604,   943,   604,   604,   996,   603,
    1360,   124,   556,   604,   605,   604,  1072,  1073,   148,   653,
     729,   732,  1360,   183,   333,   720,   707,  1361,  1361,  1360,
     711,   618,   270,   421,   580,   751,    30,   749,   612,   604,
      51,    61,   260,   663,   910,   181,   651,  1480,   604,  1436,
    1357,  1240,   951,  1181,   604,   367,   953,   952,  1253,  1254,
    1350,  1319,  1070,  1189,   825,   827,   837,   521,  1240,   129,
     129,  1240,  1240,  1240,  1240,   603,   846,   853,   151,  1348,
     386,  1194,    70,  1325,  1440,  1159,  1159,  1360,   195,   238,
     357,  1150,  1149,   927,   943,   944,   945,   831,    50,   339,
     429,   456,   932,   932,   924,  1341,   924,  1073,  1073,   578,
     734,   738,   183,  1360,   722,   723,  1073,   681,   705,   706,
     708,   710,   712,   714,   715,   716,   717,   719,   727,   742,
     745,   747,   681,   752,   750,   743,   746,  1439,    61,   354,
      61,   128,   664,   665,  1079,  1487,  1069,   656,   910,   804,
    1188,  1356,   605,  1239,   915,   604,   829,   603,   839,   841,
     836,  1357,  1240,  1240,   268,   343,   541,  1191,  1192,  1191,
    1189,  1362,   502,   847,   848,  1240,  1181,  1360,   146,   157,
     355,   518,  1326,  1327,   256,  1328,   604,   604,    46,    46,
     603,   603,   604,     5,   120,   342,   348,   348,   730,   739,
     143,   738,   741,   228,   147,  1073,   147,   705,   609,   555,
    1073,   682,   751,   749,   354,   354,   128,   705,  1474,   136,
    1481,  1439,  1254,  1245,  1320,   603,   840,   841,   842,   298,
     838,   841,  1357,  1357,   849,   604,   605,   872,  1195,    46,
      46,   146,    46,  1327,   488,   518,  1329,  1330,  1156,  1158,
     556,   124,   578,   733,   735,  1073,   681,   147,   718,   213,
     522,   270,   609,   754,   136,   119,   680,   683,   744,  1361,
     744,   142,   657,   663,   438,  1331,   604,   605,   298,   844,
     845,  1076,   850,  1362,   848,   603,  1341,  1341,    46,  1341,
      46,    46,  1330,   604,   604,   932,   932,   736,   735,   741,
     740,    52,   721,  1360,   724,  1073,   753,    90,   164,   688,
     703,  1360,   147,   705,   609,   440,  1482,   211,  1325,   841,
     605,   843,   851,  1069,  1196,  1197,  1198,  1341,  1341,  1341,
    1073,   147,   522,   605,   681,   147,   681,   198,   605,   684,
      81,   100,   609,  1475,   705,    46,  1328,   845,   604,  1073,
     604,   605,   737,    52,   681,  1360,   725,   421,   147,   181,
    1360,   910,   181,   181,   705,  1341,   214,  1332,  1070,  1198,
     522,   143,   144,   726,   580,   685,   120,   704,   691,   692,
    1188,   686,   687,   343,   603,  1334,   681,   681,   722,   476,
     478,   689,   690,   691,   694,  1079,  1360,  1073,  1052,   256,
     438,  1333,   604,   610,  1335,  1336,  1350,   456,  1337,   605,
     705,   182,  1362,   604,   605,  1338,  1339,  1350,   690,  1336,
     605,  1239,  1339,  1069,  1245,  1070
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* This macro is provided for backward compatibility. */

#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (0, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  YYSIZE_T yysize1;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = 0;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                yysize1 = yysize + yytnamerr (0, yytname[yyx]);
                if (! (yysize <= yysize1
                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                  return 2;
                yysize = yysize1;
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  yysize1 = yysize + yystrlen (yyformat);
  if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
    return 2;
  yysize = yysize1;

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1806 of yacc.c  */
#line 1658 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1806 of yacc.c  */
#line 1670 "sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1806 of yacc.c  */
#line 1695 "sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 61:

/* Line 1806 of yacc.c  */
#line 1768 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 64:

/* Line 1806 of yacc.c  */
#line 1783 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 65:

/* Line 1806 of yacc.c  */
#line 1793 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 66:

/* Line 1806 of yacc.c  */
#line 1800 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 67:

/* Line 1806 of yacc.c  */
#line 1810 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 68:

/* Line 1806 of yacc.c  */
#line 1817 "sql_yacc.yy"
    {}
    break;

  case 73:

/* Line 1806 of yacc.c  */
#line 1832 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 74:

/* Line 1806 of yacc.c  */
#line 1844 "sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 75:

/* Line 1806 of yacc.c  */
#line 1852 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 76:

/* Line 1806 of yacc.c  */
#line 1863 "sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            bzero((char*) &lex->mi, sizeof(lex->mi));
            lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_UNCHANGED;

            DBUG_ASSERT(Lex->mi.repl_ignore_server_ids.elements == 0);
          }
    break;

  case 77:

/* Line 1806 of yacc.c  */
#line 1872 "sql_yacc.yy"
    {}
    break;

  case 80:

/* Line 1806 of yacc.c  */
#line 1882 "sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 81:

/* Line 1806 of yacc.c  */
#line 1886 "sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 82:

/* Line 1806 of yacc.c  */
#line 1890 "sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1806 of yacc.c  */
#line 1894 "sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 84:

/* Line 1806 of yacc.c  */
#line 1898 "sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 85:

/* Line 1806 of yacc.c  */
#line 1902 "sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 86:

/* Line 1806 of yacc.c  */
#line 1907 "sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 87:

/* Line 1806 of yacc.c  */
#line 1911 "sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 88:

/* Line 1806 of yacc.c  */
#line 1915 "sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:

/* Line 1806 of yacc.c  */
#line 1919 "sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:

/* Line 1806 of yacc.c  */
#line 1923 "sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1806 of yacc.c  */
#line 1927 "sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 92:

/* Line 1806 of yacc.c  */
#line 1933 "sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 93:

/* Line 1806 of yacc.c  */
#line 1964 "sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 98:

/* Line 1806 of yacc.c  */
#line 1979 "sql_yacc.yy"
    {
            if (Lex->mi.repl_ignore_server_ids.elements == 0)
            {
              my_init_dynamic_array2(&Lex->mi.repl_ignore_server_ids,
                                     sizeof(::server_id),
                                     Lex->mi.server_ids_buffer,
                                     array_elements(Lex->mi.server_ids_buffer),
                                     16);
            }
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 99:

/* Line 1806 of yacc.c  */
#line 1993 "sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 100:

/* Line 1806 of yacc.c  */
#line 1997 "sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 101:

/* Line 1806 of yacc.c  */
#line 2013 "sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 102:

/* Line 1806 of yacc.c  */
#line 2017 "sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 103:

/* Line 1806 of yacc.c  */
#line 2028 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            /*
              For CREATE TABLE, an non-existing table is not an error.
              Instruct open_tables() to just take an MDL lock if the
              table does not exist.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 104:

/* Line 1806 of yacc.c  */
#line 2053 "sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 105:

/* Line 1806 of yacc.c  */
#line 2069 "sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 106:

/* Line 1806 of yacc.c  */
#line 2074 "sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 107:

/* Line 1806 of yacc.c  */
#line 2080 "sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 108:

/* Line 1806 of yacc.c  */
#line 2085 "sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 109:

/* Line 1806 of yacc.c  */
#line 2091 "sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 110:

/* Line 1806 of yacc.c  */
#line 2096 "sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 111:

/* Line 1806 of yacc.c  */
#line 2101 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 112:

/* Line 1806 of yacc.c  */
#line 2106 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 113:

/* Line 1806 of yacc.c  */
#line 2113 "sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 114:

/* Line 1806 of yacc.c  */
#line 2119 "sql_yacc.yy"
    {}
    break;

  case 115:

/* Line 1806 of yacc.c  */
#line 2121 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 116:

/* Line 1806 of yacc.c  */
#line 2125 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 117:

/* Line 1806 of yacc.c  */
#line 2129 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 118:

/* Line 1806 of yacc.c  */
#line 2133 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 119:

/* Line 1806 of yacc.c  */
#line 2144 "sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 122:

/* Line 1806 of yacc.c  */
#line 2158 "sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 123:

/* Line 1806 of yacc.c  */
#line 2162 "sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 124:

/* Line 1806 of yacc.c  */
#line 2166 "sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 125:

/* Line 1806 of yacc.c  */
#line 2170 "sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 126:

/* Line 1806 of yacc.c  */
#line 2174 "sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 127:

/* Line 1806 of yacc.c  */
#line 2178 "sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 128:

/* Line 1806 of yacc.c  */
#line 2182 "sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 129:

/* Line 1806 of yacc.c  */
#line 2189 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 130:

/* Line 1806 of yacc.c  */
#line 2209 "sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 131:

/* Line 1806 of yacc.c  */
#line 2220 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 133:

/* Line 1806 of yacc.c  */
#line 2227 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 134:

/* Line 1806 of yacc.c  */
#line 2233 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 135:

/* Line 1806 of yacc.c  */
#line 2235 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 136:

/* Line 1806 of yacc.c  */
#line 2241 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 137:

/* Line 1806 of yacc.c  */
#line 2247 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 138:

/* Line 1806 of yacc.c  */
#line 2256 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 139:

/* Line 1806 of yacc.c  */
#line 2263 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 141:

/* Line 1806 of yacc.c  */
#line 2271 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 142:

/* Line 1806 of yacc.c  */
#line 2277 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 144:

/* Line 1806 of yacc.c  */
#line 2283 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 145:

/* Line 1806 of yacc.c  */
#line 2289 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 146:

/* Line 1806 of yacc.c  */
#line 2297 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 147:

/* Line 1806 of yacc.c  */
#line 2299 "sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 148:

/* Line 1806 of yacc.c  */
#line 2306 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 149:

/* Line 1806 of yacc.c  */
#line 2349 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 163:

/* Line 1806 of yacc.c  */
#line 2381 "sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 164:

/* Line 1806 of yacc.c  */
#line 2396 "sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 165:

/* Line 1806 of yacc.c  */
#line 2412 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 166:

/* Line 1806 of yacc.c  */
#line 2430 "sql_yacc.yy"
    {}
    break;

  case 167:

/* Line 1806 of yacc.c  */
#line 2431 "sql_yacc.yy"
    {}
    break;

  case 168:

/* Line 1806 of yacc.c  */
#line 2435 "sql_yacc.yy"
    {}
    break;

  case 169:

/* Line 1806 of yacc.c  */
#line 2436 "sql_yacc.yy"
    {}
    break;

  case 170:

/* Line 1806 of yacc.c  */
#line 2442 "sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 171:

/* Line 1806 of yacc.c  */
#line 2444 "sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 172:

/* Line 1806 of yacc.c  */
#line 2446 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 173:

/* Line 1806 of yacc.c  */
#line 2448 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 174:

/* Line 1806 of yacc.c  */
#line 2450 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 175:

/* Line 1806 of yacc.c  */
#line 2452 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 176:

/* Line 1806 of yacc.c  */
#line 2454 "sql_yacc.yy"
    {}
    break;

  case 177:

/* Line 1806 of yacc.c  */
#line 2459 "sql_yacc.yy"
    { }
    break;

  case 178:

/* Line 1806 of yacc.c  */
#line 2460 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 179:

/* Line 1806 of yacc.c  */
#line 2461 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 180:

/* Line 1806 of yacc.c  */
#line 2466 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 181:

/* Line 1806 of yacc.c  */
#line 2470 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 182:

/* Line 1806 of yacc.c  */
#line 2477 "sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 183:

/* Line 1806 of yacc.c  */
#line 2485 "sql_yacc.yy"
    {}
    break;

  case 188:

/* Line 1806 of yacc.c  */
#line 2501 "sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 189:

/* Line 1806 of yacc.c  */
#line 2505 "sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 194:

/* Line 1806 of yacc.c  */
#line 2523 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 195:

/* Line 1806 of yacc.c  */
#line 2543 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 200:

/* Line 1806 of yacc.c  */
#line 2580 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 201:

/* Line 1806 of yacc.c  */
#line 2605 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 202:

/* Line 1806 of yacc.c  */
#line 2606 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 203:

/* Line 1806 of yacc.c  */
#line 2607 "sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 204:

/* Line 1806 of yacc.c  */
#line 2608 "sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 205:

/* Line 1806 of yacc.c  */
#line 2612 "sql_yacc.yy"
    {}
    break;

  case 207:

/* Line 1806 of yacc.c  */
#line 2617 "sql_yacc.yy"
    {}
    break;

  case 209:

/* Line 1806 of yacc.c  */
#line 2623 "sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 210:

/* Line 1806 of yacc.c  */
#line 2627 "sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 211:

/* Line 1806 of yacc.c  */
#line 2653 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 212:

/* Line 1806 of yacc.c  */
#line 2661 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 213:

/* Line 1806 of yacc.c  */
#line 2718 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(YYTHD->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 214:

/* Line 1806 of yacc.c  */
#line 2733 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
                                      ctx->current_var_count());
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == SP_HANDLER_CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(empty_c_string, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 215:

/* Line 1806 of yacc.c  */
#line 2755 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 216:

/* Line 1806 of yacc.c  */
#line 2787 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 217:

/* Line 1806 of yacc.c  */
#line 2812 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 218:

/* Line 1806 of yacc.c  */
#line 2816 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 219:

/* Line 1806 of yacc.c  */
#line 2835 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 220:

/* Line 1806 of yacc.c  */
#line 2836 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 221:

/* Line 1806 of yacc.c  */
#line 2842 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 222:

/* Line 1806 of yacc.c  */
#line 2844 "sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 223:

/* Line 1806 of yacc.c  */
#line 2849 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 224:

/* Line 1806 of yacc.c  */
#line 2872 "sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 226:

/* Line 1806 of yacc.c  */
#line 2889 "sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, SQLSTATE_LENGTH);
            (yyval.spcondtype)->sqlstate[SQLSTATE_LENGTH]= '\0';
          }
    break;

  case 227:

/* Line 1806 of yacc.c  */
#line 2905 "sql_yacc.yy"
    {}
    break;

  case 228:

/* Line 1806 of yacc.c  */
#line 2906 "sql_yacc.yy"
    {}
    break;

  case 229:

/* Line 1806 of yacc.c  */
#line 2911 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 230:

/* Line 1806 of yacc.c  */
#line 2915 "sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 231:

/* Line 1806 of yacc.c  */
#line 2924 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 232:

/* Line 1806 of yacc.c  */
#line 2931 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 233:

/* Line 1806 of yacc.c  */
#line 2938 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 234:

/* Line 1806 of yacc.c  */
#line 2948 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_stmt= new (thd->mem_root) Signal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 235:

/* Line 1806 of yacc.c  */
#line 2963 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_cond_type_t *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_cond_type_t::state)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= cond;
          }
    break;

  case 236:

/* Line 1806 of yacc.c  */
#line 2986 "sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 237:

/* Line 1806 of yacc.c  */
#line 2991 "sql_yacc.yy"
    { (yyval.spcondtype)= NULL; }
    break;

  case 238:

/* Line 1806 of yacc.c  */
#line 2993 "sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 239:

/* Line 1806 of yacc.c  */
#line 2998 "sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 241:

/* Line 1806 of yacc.c  */
#line 3006 "sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 242:

/* Line 1806 of yacc.c  */
#line 3015 "sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 243:

/* Line 1806 of yacc.c  */
#line 3034 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 244:

/* Line 1806 of yacc.c  */
#line 3036 "sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 245:

/* Line 1806 of yacc.c  */
#line 3054 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 246:

/* Line 1806 of yacc.c  */
#line 3060 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 247:

/* Line 1806 of yacc.c  */
#line 3062 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 248:

/* Line 1806 of yacc.c  */
#line 3064 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 249:

/* Line 1806 of yacc.c  */
#line 3066 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 250:

/* Line 1806 of yacc.c  */
#line 3068 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 251:

/* Line 1806 of yacc.c  */
#line 3070 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 252:

/* Line 1806 of yacc.c  */
#line 3072 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 253:

/* Line 1806 of yacc.c  */
#line 3074 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 254:

/* Line 1806 of yacc.c  */
#line 3076 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 255:

/* Line 1806 of yacc.c  */
#line 3078 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 256:

/* Line 1806 of yacc.c  */
#line 3080 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 257:

/* Line 1806 of yacc.c  */
#line 3082 "sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 258:

/* Line 1806 of yacc.c  */
#line 3087 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_stmt= new (thd->mem_root) Resignal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 259:

/* Line 1806 of yacc.c  */
#line 3102 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 260:

/* Line 1806 of yacc.c  */
#line 3117 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 261:

/* Line 1806 of yacc.c  */
#line 3134 "sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 262:

/* Line 1806 of yacc.c  */
#line 3135 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 276:

/* Line 1806 of yacc.c  */
#line 3156 "sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 277:

/* Line 1806 of yacc.c  */
#line 3158 "sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 278:

/* Line 1806 of yacc.c  */
#line 3162 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 279:

/* Line 1806 of yacc.c  */
#line 3171 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 280:

/* Line 1806 of yacc.c  */
#line 3219 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 281:

/* Line 1806 of yacc.c  */
#line 3221 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 282:

/* Line 1806 of yacc.c  */
#line 3247 "sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 283:

/* Line 1806 of yacc.c  */
#line 3253 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 284:

/* Line 1806 of yacc.c  */
#line 3262 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 285:

/* Line 1806 of yacc.c  */
#line 3315 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 286:

/* Line 1806 of yacc.c  */
#line 3358 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 287:

/* Line 1806 of yacc.c  */
#line 3378 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 288:

/* Line 1806 of yacc.c  */
#line 3395 "sql_yacc.yy"
    {}
    break;

  case 289:

/* Line 1806 of yacc.c  */
#line 3400 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 293:

/* Line 1806 of yacc.c  */
#line 3426 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 294:

/* Line 1806 of yacc.c  */
#line 3446 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 295:

/* Line 1806 of yacc.c  */
#line 3468 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 296:

/* Line 1806 of yacc.c  */
#line 3470 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 297:

/* Line 1806 of yacc.c  */
#line 3486 "sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 298:

/* Line 1806 of yacc.c  */
#line 3498 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 304:

/* Line 1806 of yacc.c  */
#line 3518 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 305:

/* Line 1806 of yacc.c  */
#line 3524 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 306:

/* Line 1806 of yacc.c  */
#line 3537 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 307:

/* Line 1806 of yacc.c  */
#line 3545 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 308:

/* Line 1806 of yacc.c  */
#line 3553 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 313:

/* Line 1806 of yacc.c  */
#line 3571 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 314:

/* Line 1806 of yacc.c  */
#line 3575 "sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 315:

/* Line 1806 of yacc.c  */
#line 3587 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 316:

/* Line 1806 of yacc.c  */
#line 3596 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 317:

/* Line 1806 of yacc.c  */
#line 3600 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 318:

/* Line 1806 of yacc.c  */
#line 3610 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 319:

/* Line 1806 of yacc.c  */
#line 3619 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 321:

/* Line 1806 of yacc.c  */
#line 3634 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 322:

/* Line 1806 of yacc.c  */
#line 3652 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 323:

/* Line 1806 of yacc.c  */
#line 3669 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 324:

/* Line 1806 of yacc.c  */
#line 3670 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 325:

/* Line 1806 of yacc.c  */
#line 3675 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 326:

/* Line 1806 of yacc.c  */
#line 3691 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 327:

/* Line 1806 of yacc.c  */
#line 3707 "sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 328:

/* Line 1806 of yacc.c  */
#line 3714 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 329:

/* Line 1806 of yacc.c  */
#line 3722 "sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 330:

/* Line 1806 of yacc.c  */
#line 3731 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 331:

/* Line 1806 of yacc.c  */
#line 3759 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 332:

/* Line 1806 of yacc.c  */
#line 3769 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 333:

/* Line 1806 of yacc.c  */
#line 3771 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 334:

/* Line 1806 of yacc.c  */
#line 3787 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 335:

/* Line 1806 of yacc.c  */
#line 3798 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 336:

/* Line 1806 of yacc.c  */
#line 3800 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 337:

/* Line 1806 of yacc.c  */
#line 3819 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 338:

/* Line 1806 of yacc.c  */
#line 3821 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 339:

/* Line 1806 of yacc.c  */
#line 3826 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 340:

/* Line 1806 of yacc.c  */
#line 3828 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 341:

/* Line 1806 of yacc.c  */
#line 3830 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 345:

/* Line 1806 of yacc.c  */
#line 3864 "sql_yacc.yy"
    {}
    break;

  case 346:

/* Line 1806 of yacc.c  */
#line 3866 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 347:

/* Line 1806 of yacc.c  */
#line 3876 "sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 348:

/* Line 1806 of yacc.c  */
#line 3882 "sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 353:

/* Line 1806 of yacc.c  */
#line 3905 "sql_yacc.yy"
    {}
    break;

  case 400:

/* Line 1806 of yacc.c  */
#line 3999 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 401:

/* Line 1806 of yacc.c  */
#line 4007 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 402:

/* Line 1806 of yacc.c  */
#line 4015 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 403:

/* Line 1806 of yacc.c  */
#line 4023 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 404:

/* Line 1806 of yacc.c  */
#line 4035 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 405:

/* Line 1806 of yacc.c  */
#line 4047 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 406:

/* Line 1806 of yacc.c  */
#line 4052 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 407:

/* Line 1806 of yacc.c  */
#line 4057 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 408:

/* Line 1806 of yacc.c  */
#line 4065 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 409:

/* Line 1806 of yacc.c  */
#line 4073 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 410:

/* Line 1806 of yacc.c  */
#line 4081 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 411:

/* Line 1806 of yacc.c  */
#line 4089 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 412:

/* Line 1806 of yacc.c  */
#line 4097 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 413:

/* Line 1806 of yacc.c  */
#line 4105 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 414:

/* Line 1806 of yacc.c  */
#line 4113 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 415:

/* Line 1806 of yacc.c  */
#line 4126 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 416:

/* Line 1806 of yacc.c  */
#line 4139 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 419:

/* Line 1806 of yacc.c  */
#line 4158 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 420:

/* Line 1806 of yacc.c  */
#line 4163 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 421:

/* Line 1806 of yacc.c  */
#line 4175 "sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 422:

/* Line 1806 of yacc.c  */
#line 4177 "sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 423:

/* Line 1806 of yacc.c  */
#line 4227 "sql_yacc.yy"
    {}
    break;

  case 424:

/* Line 1806 of yacc.c  */
#line 4230 "sql_yacc.yy"
    {}
    break;

  case 425:

/* Line 1806 of yacc.c  */
#line 4232 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 426:

/* Line 1806 of yacc.c  */
#line 4247 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 427:

/* Line 1806 of yacc.c  */
#line 4266 "sql_yacc.yy"
    {}
    break;

  case 428:

/* Line 1806 of yacc.c  */
#line 4269 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 429:

/* Line 1806 of yacc.c  */
#line 4270 "sql_yacc.yy"
    {}
    break;

  case 430:

/* Line 1806 of yacc.c  */
#line 4274 "sql_yacc.yy"
    {}
    break;

  case 431:

/* Line 1806 of yacc.c  */
#line 4276 "sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 432:

/* Line 1806 of yacc.c  */
#line 4277 "sql_yacc.yy"
    {}
    break;

  case 433:

/* Line 1806 of yacc.c  */
#line 4279 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 434:

/* Line 1806 of yacc.c  */
#line 4280 "sql_yacc.yy"
    {}
    break;

  case 435:

/* Line 1806 of yacc.c  */
#line 4285 "sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 436:

/* Line 1806 of yacc.c  */
#line 4321 "sql_yacc.yy"
    {}
    break;

  case 438:

/* Line 1806 of yacc.c  */
#line 4327 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
          }
    break;

  case 440:

/* Line 1806 of yacc.c  */
#line 4345 "sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 441:

/* Line 1806 of yacc.c  */
#line 4364 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 442:

/* Line 1806 of yacc.c  */
#line 4376 "sql_yacc.yy"
    {}
    break;

  case 444:

/* Line 1806 of yacc.c  */
#line 4385 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 445:

/* Line 1806 of yacc.c  */
#line 4392 "sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 446:

/* Line 1806 of yacc.c  */
#line 4393 "sql_yacc.yy"
    {}
    break;

  case 447:

/* Line 1806 of yacc.c  */
#line 4395 "sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 448:

/* Line 1806 of yacc.c  */
#line 4397 "sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 449:

/* Line 1806 of yacc.c  */
#line 4399 "sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 450:

/* Line 1806 of yacc.c  */
#line 4401 "sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 451:

/* Line 1806 of yacc.c  */
#line 4405 "sql_yacc.yy"
    {}
    break;

  case 452:

/* Line 1806 of yacc.c  */
#line 4407 "sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 453:

/* Line 1806 of yacc.c  */
#line 4411 "sql_yacc.yy"
    {}
    break;

  case 454:

/* Line 1806 of yacc.c  */
#line 4412 "sql_yacc.yy"
    {}
    break;

  case 455:

/* Line 1806 of yacc.c  */
#line 4416 "sql_yacc.yy"
    {}
    break;

  case 456:

/* Line 1806 of yacc.c  */
#line 4417 "sql_yacc.yy"
    {}
    break;

  case 457:

/* Line 1806 of yacc.c  */
#line 4422 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 458:

/* Line 1806 of yacc.c  */
#line 4441 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 459:

/* Line 1806 of yacc.c  */
#line 4451 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 460:

/* Line 1806 of yacc.c  */
#line 4462 "sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 461:

/* Line 1806 of yacc.c  */
#line 4470 "sql_yacc.yy"
    {}
    break;

  case 462:

/* Line 1806 of yacc.c  */
#line 4472 "sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 463:

/* Line 1806 of yacc.c  */
#line 4487 "sql_yacc.yy"
    {}
    break;

  case 464:

/* Line 1806 of yacc.c  */
#line 4489 "sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 465:

/* Line 1806 of yacc.c  */
#line 4490 "sql_yacc.yy"
    {}
    break;

  case 466:

/* Line 1806 of yacc.c  */
#line 4493 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 467:

/* Line 1806 of yacc.c  */
#line 4498 "sql_yacc.yy"
    {}
    break;

  case 468:

/* Line 1806 of yacc.c  */
#line 4502 "sql_yacc.yy"
    {}
    break;

  case 469:

/* Line 1806 of yacc.c  */
#line 4503 "sql_yacc.yy"
    {}
    break;

  case 470:

/* Line 1806 of yacc.c  */
#line 4508 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 471:

/* Line 1806 of yacc.c  */
#line 4526 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 472:

/* Line 1806 of yacc.c  */
#line 4541 "sql_yacc.yy"
    {}
    break;

  case 473:

/* Line 1806 of yacc.c  */
#line 4543 "sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 474:

/* Line 1806 of yacc.c  */
#line 4558 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 475:

/* Line 1806 of yacc.c  */
#line 4574 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 476:

/* Line 1806 of yacc.c  */
#line 4595 "sql_yacc.yy"
    {}
    break;

  case 477:

/* Line 1806 of yacc.c  */
#line 4596 "sql_yacc.yy"
    {}
    break;

  case 478:

/* Line 1806 of yacc.c  */
#line 4601 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 479:

/* Line 1806 of yacc.c  */
#line 4620 "sql_yacc.yy"
    {}
    break;

  case 480:

/* Line 1806 of yacc.c  */
#line 4625 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 481:

/* Line 1806 of yacc.c  */
#line 4634 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 482:

/* Line 1806 of yacc.c  */
#line 4656 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 483:

/* Line 1806 of yacc.c  */
#line 4671 "sql_yacc.yy"
    {}
    break;

  case 484:

/* Line 1806 of yacc.c  */
#line 4673 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 485:

/* Line 1806 of yacc.c  */
#line 4688 "sql_yacc.yy"
    {}
    break;

  case 486:

/* Line 1806 of yacc.c  */
#line 4693 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 487:

/* Line 1806 of yacc.c  */
#line 4714 "sql_yacc.yy"
    {}
    break;

  case 488:

/* Line 1806 of yacc.c  */
#line 4719 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 489:

/* Line 1806 of yacc.c  */
#line 4748 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 490:

/* Line 1806 of yacc.c  */
#line 4759 "sql_yacc.yy"
    {}
    break;

  case 491:

/* Line 1806 of yacc.c  */
#line 4760 "sql_yacc.yy"
    {}
    break;

  case 492:

/* Line 1806 of yacc.c  */
#line 4765 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 493:

/* Line 1806 of yacc.c  */
#line 4776 "sql_yacc.yy"
    {}
    break;

  case 494:

/* Line 1806 of yacc.c  */
#line 4778 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 495:

/* Line 1806 of yacc.c  */
#line 4801 "sql_yacc.yy"
    {}
    break;

  case 496:

/* Line 1806 of yacc.c  */
#line 4802 "sql_yacc.yy"
    {}
    break;

  case 497:

/* Line 1806 of yacc.c  */
#line 4807 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 498:

/* Line 1806 of yacc.c  */
#line 4820 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 499:

/* Line 1806 of yacc.c  */
#line 4840 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 500:

/* Line 1806 of yacc.c  */
#line 4854 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 501:

/* Line 1806 of yacc.c  */
#line 4879 "sql_yacc.yy"
    {}
    break;

  case 502:

/* Line 1806 of yacc.c  */
#line 4880 "sql_yacc.yy"
    {}
    break;

  case 503:

/* Line 1806 of yacc.c  */
#line 4885 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 504:

/* Line 1806 of yacc.c  */
#line 4917 "sql_yacc.yy"
    {}
    break;

  case 505:

/* Line 1806 of yacc.c  */
#line 4922 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 506:

/* Line 1806 of yacc.c  */
#line 4926 "sql_yacc.yy"
    {}
    break;

  case 507:

/* Line 1806 of yacc.c  */
#line 4927 "sql_yacc.yy"
    {}
    break;

  case 508:

/* Line 1806 of yacc.c  */
#line 4931 "sql_yacc.yy"
    {}
    break;

  case 509:

/* Line 1806 of yacc.c  */
#line 4932 "sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1806 of yacc.c  */
#line 4937 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 511:

/* Line 1806 of yacc.c  */
#line 4939 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 512:

/* Line 1806 of yacc.c  */
#line 4945 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 513:

/* Line 1806 of yacc.c  */
#line 4947 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 514:

/* Line 1806 of yacc.c  */
#line 4949 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 515:

/* Line 1806 of yacc.c  */
#line 4951 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 516:

/* Line 1806 of yacc.c  */
#line 4953 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 517:

/* Line 1806 of yacc.c  */
#line 4955 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 518:

/* Line 1806 of yacc.c  */
#line 4964 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 519:

/* Line 1806 of yacc.c  */
#line 4979 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 520:

/* Line 1806 of yacc.c  */
#line 4983 "sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 521:

/* Line 1806 of yacc.c  */
#line 4993 "sql_yacc.yy"
    {}
    break;

  case 522:

/* Line 1806 of yacc.c  */
#line 4994 "sql_yacc.yy"
    {}
    break;

  case 523:

/* Line 1806 of yacc.c  */
#line 4998 "sql_yacc.yy"
    {}
    break;

  case 524:

/* Line 1806 of yacc.c  */
#line 4999 "sql_yacc.yy"
    {}
    break;

  case 525:

/* Line 1806 of yacc.c  */
#line 5003 "sql_yacc.yy"
    {}
    break;

  case 526:

/* Line 1806 of yacc.c  */
#line 5004 "sql_yacc.yy"
    {}
    break;

  case 527:

/* Line 1806 of yacc.c  */
#line 5008 "sql_yacc.yy"
    {}
    break;

  case 528:

/* Line 1806 of yacc.c  */
#line 5009 "sql_yacc.yy"
    {}
    break;

  case 529:

/* Line 1806 of yacc.c  */
#line 5013 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 530:

/* Line 1806 of yacc.c  */
#line 5014 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 531:

/* Line 1806 of yacc.c  */
#line 5018 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 532:

/* Line 1806 of yacc.c  */
#line 5019 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 533:

/* Line 1806 of yacc.c  */
#line 5023 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 534:

/* Line 1806 of yacc.c  */
#line 5027 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 535:

/* Line 1806 of yacc.c  */
#line 5028 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 543:

/* Line 1806 of yacc.c  */
#line 5049 "sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 544:

/* Line 1806 of yacc.c  */
#line 5054 "sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 545:

/* Line 1806 of yacc.c  */
#line 5059 "sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 546:

/* Line 1806 of yacc.c  */
#line 5064 "sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 547:

/* Line 1806 of yacc.c  */
#line 5069 "sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 548:

/* Line 1806 of yacc.c  */
#line 5074 "sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 549:

/* Line 1806 of yacc.c  */
#line 5079 "sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 550:

/* Line 1806 of yacc.c  */
#line 5084 "sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 551:

/* Line 1806 of yacc.c  */
#line 5099 "sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 552:

/* Line 1806 of yacc.c  */
#line 5105 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 553:

/* Line 1806 of yacc.c  */
#line 5110 "sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 554:

/* Line 1806 of yacc.c  */
#line 5115 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 555:

/* Line 1806 of yacc.c  */
#line 5120 "sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 556:

/* Line 1806 of yacc.c  */
#line 5125 "sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 557:

/* Line 1806 of yacc.c  */
#line 5129 "sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 560:

/* Line 1806 of yacc.c  */
#line 5153 "sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 561:

/* Line 1806 of yacc.c  */
#line 5158 "sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 562:

/* Line 1806 of yacc.c  */
#line 5163 "sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 563:

/* Line 1806 of yacc.c  */
#line 5168 "sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 564:

/* Line 1806 of yacc.c  */
#line 5170 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 565:

/* Line 1806 of yacc.c  */
#line 5172 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 566:

/* Line 1806 of yacc.c  */
#line 5174 "sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 567:

/* Line 1806 of yacc.c  */
#line 5180 "sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 568:

/* Line 1806 of yacc.c  */
#line 5188 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 569:

/* Line 1806 of yacc.c  */
#line 5206 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 570:

/* Line 1806 of yacc.c  */
#line 5223 "sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 571:

/* Line 1806 of yacc.c  */
#line 5246 "sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 572:

/* Line 1806 of yacc.c  */
#line 5259 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 573:

/* Line 1806 of yacc.c  */
#line 5260 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 574:

/* Line 1806 of yacc.c  */
#line 5261 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 575:

/* Line 1806 of yacc.c  */
#line 5262 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 576:

/* Line 1806 of yacc.c  */
#line 5263 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 577:

/* Line 1806 of yacc.c  */
#line 5264 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 578:

/* Line 1806 of yacc.c  */
#line 5265 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_GCS; }
    break;

  case 579:

/* Line 1806 of yacc.c  */
#line 5269 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 580:

/* Line 1806 of yacc.c  */
#line 5270 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 581:

/* Line 1806 of yacc.c  */
#line 5271 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 582:

/* Line 1806 of yacc.c  */
#line 5275 "sql_yacc.yy"
    {}
    break;

  case 584:

/* Line 1806 of yacc.c  */
#line 5280 "sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 585:

/* Line 1806 of yacc.c  */
#line 5281 "sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 586:

/* Line 1806 of yacc.c  */
#line 5282 "sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 587:

/* Line 1806 of yacc.c  */
#line 5283 "sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 588:

/* Line 1806 of yacc.c  */
#line 5289 "sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 594:

/* Line 1806 of yacc.c  */
#line 5307 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 595:

/* Line 1806 of yacc.c  */
#line 5314 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 596:

/* Line 1806 of yacc.c  */
#line 5320 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 597:

/* Line 1806 of yacc.c  */
#line 5326 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 598:

/* Line 1806 of yacc.c  */
#line 5332 "sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].lex_str).str ? (yyvsp[(3) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 599:

/* Line 1806 of yacc.c  */
#line 5337 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 600:

/* Line 1806 of yacc.c  */
#line 5355 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 604:

/* Line 1806 of yacc.c  */
#line 5370 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 605:

/* Line 1806 of yacc.c  */
#line 5371 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 606:

/* Line 1806 of yacc.c  */
#line 5375 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 607:

/* Line 1806 of yacc.c  */
#line 5380 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 608:

/* Line 1806 of yacc.c  */
#line 5389 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 609:

/* Line 1806 of yacc.c  */
#line 5402 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 610:

/* Line 1806 of yacc.c  */
#line 5403 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 611:

/* Line 1806 of yacc.c  */
#line 5404 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 612:

/* Line 1806 of yacc.c  */
#line 5406 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 613:

/* Line 1806 of yacc.c  */
#line 5411 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 614:

/* Line 1806 of yacc.c  */
#line 5415 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 615:

/* Line 1806 of yacc.c  */
#line 5420 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 616:

/* Line 1806 of yacc.c  */
#line 5425 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 617:

/* Line 1806 of yacc.c  */
#line 5429 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 618:

/* Line 1806 of yacc.c  */
#line 5434 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 619:

/* Line 1806 of yacc.c  */
#line 5439 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 620:

/* Line 1806 of yacc.c  */
#line 5445 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 621:

/* Line 1806 of yacc.c  */
#line 5450 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 622:

/* Line 1806 of yacc.c  */
#line 5456 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 623:

/* Line 1806 of yacc.c  */
#line 5460 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 624:

/* Line 1806 of yacc.c  */
#line 5465 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 625:

/* Line 1806 of yacc.c  */
#line 5470 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_YEAR; }
    break;

  case 626:

/* Line 1806 of yacc.c  */
#line 5472 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 627:

/* Line 1806 of yacc.c  */
#line 5474 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 628:

/* Line 1806 of yacc.c  */
#line 5476 "sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 629:

/* Line 1806 of yacc.c  */
#line 5489 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 630:

/* Line 1806 of yacc.c  */
#line 5491 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 631:

/* Line 1806 of yacc.c  */
#line 5496 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 632:

/* Line 1806 of yacc.c  */
#line 5501 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 633:

/* Line 1806 of yacc.c  */
#line 5513 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 634:

/* Line 1806 of yacc.c  */
#line 5518 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 635:

/* Line 1806 of yacc.c  */
#line 5523 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 636:

/* Line 1806 of yacc.c  */
#line 5528 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 637:

/* Line 1806 of yacc.c  */
#line 5530 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 638:

/* Line 1806 of yacc.c  */
#line 5532 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 639:

/* Line 1806 of yacc.c  */
#line 5534 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 640:

/* Line 1806 of yacc.c  */
#line 5536 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 641:

/* Line 1806 of yacc.c  */
#line 5538 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 642:

/* Line 1806 of yacc.c  */
#line 5540 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 643:

/* Line 1806 of yacc.c  */
#line 5542 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 644:

/* Line 1806 of yacc.c  */
#line 5544 "sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 645:

/* Line 1806 of yacc.c  */
#line 5546 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 646:

/* Line 1806 of yacc.c  */
#line 5548 "sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 647:

/* Line 1806 of yacc.c  */
#line 5550 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 648:

/* Line 1806 of yacc.c  */
#line 5552 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 649:

/* Line 1806 of yacc.c  */
#line 5554 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 650:

/* Line 1806 of yacc.c  */
#line 5562 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 651:

/* Line 1806 of yacc.c  */
#line 5563 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 652:

/* Line 1806 of yacc.c  */
#line 5565 "sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 653:

/* Line 1806 of yacc.c  */
#line 5569 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 654:

/* Line 1806 of yacc.c  */
#line 5570 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 655:

/* Line 1806 of yacc.c  */
#line 5571 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 656:

/* Line 1806 of yacc.c  */
#line 5572 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 657:

/* Line 1806 of yacc.c  */
#line 5573 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 658:

/* Line 1806 of yacc.c  */
#line 5577 "sql_yacc.yy"
    {}
    break;

  case 659:

/* Line 1806 of yacc.c  */
#line 5581 "sql_yacc.yy"
    {}
    break;

  case 660:

/* Line 1806 of yacc.c  */
#line 5582 "sql_yacc.yy"
    {}
    break;

  case 661:

/* Line 1806 of yacc.c  */
#line 5586 "sql_yacc.yy"
    {}
    break;

  case 662:

/* Line 1806 of yacc.c  */
#line 5587 "sql_yacc.yy"
    {}
    break;

  case 663:

/* Line 1806 of yacc.c  */
#line 5591 "sql_yacc.yy"
    {}
    break;

  case 664:

/* Line 1806 of yacc.c  */
#line 5592 "sql_yacc.yy"
    {}
    break;

  case 665:

/* Line 1806 of yacc.c  */
#line 5593 "sql_yacc.yy"
    {}
    break;

  case 666:

/* Line 1806 of yacc.c  */
#line 5594 "sql_yacc.yy"
    {}
    break;

  case 667:

/* Line 1806 of yacc.c  */
#line 5595 "sql_yacc.yy"
    {}
    break;

  case 668:

/* Line 1806 of yacc.c  */
#line 5599 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 669:

/* Line 1806 of yacc.c  */
#line 5600 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 670:

/* Line 1806 of yacc.c  */
#line 5601 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 671:

/* Line 1806 of yacc.c  */
#line 5602 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 672:

/* Line 1806 of yacc.c  */
#line 5603 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 673:

/* Line 1806 of yacc.c  */
#line 5608 "sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 674:

/* Line 1806 of yacc.c  */
#line 5613 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 675:

/* Line 1806 of yacc.c  */
#line 5615 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 676:

/* Line 1806 of yacc.c  */
#line 5620 "sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 677:

/* Line 1806 of yacc.c  */
#line 5622 "sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 678:

/* Line 1806 of yacc.c  */
#line 5624 "sql_yacc.yy"
    {}
    break;

  case 679:

/* Line 1806 of yacc.c  */
#line 5629 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 680:

/* Line 1806 of yacc.c  */
#line 5637 "sql_yacc.yy"
    {}
    break;

  case 681:

/* Line 1806 of yacc.c  */
#line 5638 "sql_yacc.yy"
    {}
    break;

  case 682:

/* Line 1806 of yacc.c  */
#line 5642 "sql_yacc.yy"
    {}
    break;

  case 683:

/* Line 1806 of yacc.c  */
#line 5643 "sql_yacc.yy"
    {}
    break;

  case 684:

/* Line 1806 of yacc.c  */
#line 5647 "sql_yacc.yy"
    {}
    break;

  case 685:

/* Line 1806 of yacc.c  */
#line 5648 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 686:

/* Line 1806 of yacc.c  */
#line 5649 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 687:

/* Line 1806 of yacc.c  */
#line 5653 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 688:

/* Line 1806 of yacc.c  */
#line 5654 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 689:

/* Line 1806 of yacc.c  */
#line 5655 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 690:

/* Line 1806 of yacc.c  */
#line 5656 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 691:

/* Line 1806 of yacc.c  */
#line 5659 "sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 692:

/* Line 1806 of yacc.c  */
#line 5660 "sql_yacc.yy"
    { }
    break;

  case 693:

/* Line 1806 of yacc.c  */
#line 5664 "sql_yacc.yy"
    {}
    break;

  case 694:

/* Line 1806 of yacc.c  */
#line 5665 "sql_yacc.yy"
    {}
    break;

  case 695:

/* Line 1806 of yacc.c  */
#line 5669 "sql_yacc.yy"
    {}
    break;

  case 696:

/* Line 1806 of yacc.c  */
#line 5670 "sql_yacc.yy"
    {}
    break;

  case 697:

/* Line 1806 of yacc.c  */
#line 5674 "sql_yacc.yy"
    {}
    break;

  case 699:

/* Line 1806 of yacc.c  */
#line 5679 "sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 700:

/* Line 1806 of yacc.c  */
#line 5680 "sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 701:

/* Line 1806 of yacc.c  */
#line 5681 "sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 702:

/* Line 1806 of yacc.c  */
#line 5683 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 703:

/* Line 1806 of yacc.c  */
#line 5689 "sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 704:

/* Line 1806 of yacc.c  */
#line 5691 "sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 705:

/* Line 1806 of yacc.c  */
#line 5697 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 706:

/* Line 1806 of yacc.c  */
#line 5703 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 707:

/* Line 1806 of yacc.c  */
#line 5709 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX; 
          }
    break;

  case 708:

/* Line 1806 of yacc.c  */
#line 5714 "sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 709:

/* Line 1806 of yacc.c  */
#line 5716 "sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 710:

/* Line 1806 of yacc.c  */
#line 5733 "sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 711:

/* Line 1806 of yacc.c  */
#line 5754 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 712:

/* Line 1806 of yacc.c  */
#line 5760 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 713:

/* Line 1806 of yacc.c  */
#line 5764 "sql_yacc.yy"
    {}
    break;

  case 714:

/* Line 1806 of yacc.c  */
#line 5765 "sql_yacc.yy"
    {}
    break;

  case 715:

/* Line 1806 of yacc.c  */
#line 5770 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 716:

/* Line 1806 of yacc.c  */
#line 5777 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 717:

/* Line 1806 of yacc.c  */
#line 5781 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 718:

/* Line 1806 of yacc.c  */
#line 5782 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 719:

/* Line 1806 of yacc.c  */
#line 5786 "sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 720:

/* Line 1806 of yacc.c  */
#line 5787 "sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 721:

/* Line 1806 of yacc.c  */
#line 5792 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 722:

/* Line 1806 of yacc.c  */
#line 5800 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 723:

/* Line 1806 of yacc.c  */
#line 5804 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 724:

/* Line 1806 of yacc.c  */
#line 5805 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 725:

/* Line 1806 of yacc.c  */
#line 5810 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 726:

/* Line 1806 of yacc.c  */
#line 5820 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 727:

/* Line 1806 of yacc.c  */
#line 5821 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 728:

/* Line 1806 of yacc.c  */
#line 5825 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 729:

/* Line 1806 of yacc.c  */
#line 5826 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 730:

/* Line 1806 of yacc.c  */
#line 5830 "sql_yacc.yy"
    {}
    break;

  case 731:

/* Line 1806 of yacc.c  */
#line 5831 "sql_yacc.yy"
    {}
    break;

  case 732:

/* Line 1806 of yacc.c  */
#line 5836 "sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 733:

/* Line 1806 of yacc.c  */
#line 5838 "sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 734:

/* Line 1806 of yacc.c  */
#line 5842 "sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 735:

/* Line 1806 of yacc.c  */
#line 5849 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 736:

/* Line 1806 of yacc.c  */
#line 5858 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 737:

/* Line 1806 of yacc.c  */
#line 5866 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 738:

/* Line 1806 of yacc.c  */
#line 5876 "sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 741:

/* Line 1806 of yacc.c  */
#line 5879 "sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 742:

/* Line 1806 of yacc.c  */
#line 5880 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 743:

/* Line 1806 of yacc.c  */
#line 5882 "sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 744:

/* Line 1806 of yacc.c  */
#line 5887 "sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 745:

/* Line 1806 of yacc.c  */
#line 5894 "sql_yacc.yy"
    { }
    break;

  case 746:

/* Line 1806 of yacc.c  */
#line 5895 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 749:

/* Line 1806 of yacc.c  */
#line 5910 "sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 750:

/* Line 1806 of yacc.c  */
#line 5917 "sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 752:

/* Line 1806 of yacc.c  */
#line 5923 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 753:

/* Line 1806 of yacc.c  */
#line 5930 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 754:

/* Line 1806 of yacc.c  */
#line 5942 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 755:

/* Line 1806 of yacc.c  */
#line 5944 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 756:

/* Line 1806 of yacc.c  */
#line 5946 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 757:

/* Line 1806 of yacc.c  */
#line 5948 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 758:

/* Line 1806 of yacc.c  */
#line 5953 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 759:

/* Line 1806 of yacc.c  */
#line 5959 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 760:

/* Line 1806 of yacc.c  */
#line 5965 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 761:

/* Line 1806 of yacc.c  */
#line 5972 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 762:

/* Line 1806 of yacc.c  */
#line 5979 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 763:

/* Line 1806 of yacc.c  */
#line 5987 "sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 764:

/* Line 1806 of yacc.c  */
#line 5988 "sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 765:

/* Line 1806 of yacc.c  */
#line 5989 "sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 766:

/* Line 1806 of yacc.c  */
#line 5990 "sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 767:

/* Line 1806 of yacc.c  */
#line 5991 "sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 768:

/* Line 1806 of yacc.c  */
#line 5995 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 769:

/* Line 1806 of yacc.c  */
#line 5999 "sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 770:

/* Line 1806 of yacc.c  */
#line 6000 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 771:

/* Line 1806 of yacc.c  */
#line 6004 "sql_yacc.yy"
    {}
    break;

  case 772:

/* Line 1806 of yacc.c  */
#line 6005 "sql_yacc.yy"
    {}
    break;

  case 773:

/* Line 1806 of yacc.c  */
#line 6009 "sql_yacc.yy"
    {}
    break;

  case 775:

/* Line 1806 of yacc.c  */
#line 6014 "sql_yacc.yy"
    {}
    break;

  case 776:

/* Line 1806 of yacc.c  */
#line 6015 "sql_yacc.yy"
    {}
    break;

  case 777:

/* Line 1806 of yacc.c  */
#line 6016 "sql_yacc.yy"
    {}
    break;

  case 778:

/* Line 1806 of yacc.c  */
#line 6020 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 779:

/* Line 1806 of yacc.c  */
#line 6021 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 780:

/* Line 1806 of yacc.c  */
#line 6025 "sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 781:

/* Line 1806 of yacc.c  */
#line 6030 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 782:

/* Line 1806 of yacc.c  */
#line 6042 "sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 785:

/* Line 1806 of yacc.c  */
#line 6059 "sql_yacc.yy"
    {}
    break;

  case 787:

/* Line 1806 of yacc.c  */
#line 6064 "sql_yacc.yy"
    {}
    break;

  case 789:

/* Line 1806 of yacc.c  */
#line 6069 "sql_yacc.yy"
    {}
    break;

  case 797:

/* Line 1806 of yacc.c  */
#line 6089 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 798:

/* Line 1806 of yacc.c  */
#line 6090 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 799:

/* Line 1806 of yacc.c  */
#line 6095 "sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 800:

/* Line 1806 of yacc.c  */
#line 6096 "sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 805:

/* Line 1806 of yacc.c  */
#line 6111 "sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 806:

/* Line 1806 of yacc.c  */
#line 6123 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 807:

/* Line 1806 of yacc.c  */
#line 6124 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 808:

/* Line 1806 of yacc.c  */
#line 6125 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 809:

/* Line 1806 of yacc.c  */
#line 6129 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 810:

/* Line 1806 of yacc.c  */
#line 6130 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 811:

/* Line 1806 of yacc.c  */
#line 6135 "sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 812:

/* Line 1806 of yacc.c  */
#line 6141 "sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 813:

/* Line 1806 of yacc.c  */
#line 6154 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 814:

/* Line 1806 of yacc.c  */
#line 6155 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 815:

/* Line 1806 of yacc.c  */
#line 6159 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 816:

/* Line 1806 of yacc.c  */
#line 6160 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 817:

/* Line 1806 of yacc.c  */
#line 6164 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 818:

/* Line 1806 of yacc.c  */
#line 6165 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 819:

/* Line 1806 of yacc.c  */
#line 6173 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_stmt);
          }
    break;

  case 820:

/* Line 1806 of yacc.c  */
#line 6199 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_stmt)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_stmt= new (thd->mem_root) Alter_table_statement(lex);
              if (lex->m_stmt == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 821:

/* Line 1806 of yacc.c  */
#line 6211 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 822:

/* Line 1806 of yacc.c  */
#line 6216 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 823:

/* Line 1806 of yacc.c  */
#line 6225 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 824:

/* Line 1806 of yacc.c  */
#line 6236 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 825:

/* Line 1806 of yacc.c  */
#line 6247 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 826:

/* Line 1806 of yacc.c  */
#line 6254 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 827:

/* Line 1806 of yacc.c  */
#line 6265 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 828:

/* Line 1806 of yacc.c  */
#line 6272 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 829:

/* Line 1806 of yacc.c  */
#line 6283 "sql_yacc.yy"
    {}
    break;

  case 830:

/* Line 1806 of yacc.c  */
#line 6290 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 831:

/* Line 1806 of yacc.c  */
#line 6302 "sql_yacc.yy"
    {}
    break;

  case 832:

/* Line 1806 of yacc.c  */
#line 6304 "sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 833:

/* Line 1806 of yacc.c  */
#line 6324 "sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 834:

/* Line 1806 of yacc.c  */
#line 6337 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 835:

/* Line 1806 of yacc.c  */
#line 6342 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 836:

/* Line 1806 of yacc.c  */
#line 6347 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 837:

/* Line 1806 of yacc.c  */
#line 6352 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 838:

/* Line 1806 of yacc.c  */
#line 6357 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 839:

/* Line 1806 of yacc.c  */
#line 6366 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 840:

/* Line 1806 of yacc.c  */
#line 6367 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 841:

/* Line 1806 of yacc.c  */
#line 6368 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 842:

/* Line 1806 of yacc.c  */
#line 6369 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 843:

/* Line 1806 of yacc.c  */
#line 6373 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 844:

/* Line 1806 of yacc.c  */
#line 6375 "sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 845:

/* Line 1806 of yacc.c  */
#line 6386 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 846:

/* Line 1806 of yacc.c  */
#line 6387 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 847:

/* Line 1806 of yacc.c  */
#line 6391 "sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 848:

/* Line 1806 of yacc.c  */
#line 6392 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 850:

/* Line 1806 of yacc.c  */
#line 6397 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 851:

/* Line 1806 of yacc.c  */
#line 6398 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 857:

/* Line 1806 of yacc.c  */
#line 6415 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 858:

/* Line 1806 of yacc.c  */
#line 6420 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 859:

/* Line 1806 of yacc.c  */
#line 6427 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_optimize_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 861:

/* Line 1806 of yacc.c  */
#line 6441 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_analyze_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 862:

/* Line 1806 of yacc.c  */
#line 6453 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_check_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 864:

/* Line 1806 of yacc.c  */
#line 6466 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_repair_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 866:

/* Line 1806 of yacc.c  */
#line 6479 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 867:

/* Line 1806 of yacc.c  */
#line 6486 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_truncate_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 869:

/* Line 1806 of yacc.c  */
#line 6501 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 870:

/* Line 1806 of yacc.c  */
#line 6508 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 872:

/* Line 1806 of yacc.c  */
#line 6516 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 873:

/* Line 1806 of yacc.c  */
#line 6528 "sql_yacc.yy"
    {}
    break;

  case 875:

/* Line 1806 of yacc.c  */
#line 6534 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 876:

/* Line 1806 of yacc.c  */
#line 6539 "sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 877:

/* Line 1806 of yacc.c  */
#line 6546 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 879:

/* Line 1806 of yacc.c  */
#line 6561 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 880:

/* Line 1806 of yacc.c  */
#line 6565 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 881:

/* Line 1806 of yacc.c  */
#line 6569 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 882:

/* Line 1806 of yacc.c  */
#line 6576 "sql_yacc.yy"
    {}
    break;

  case 883:

/* Line 1806 of yacc.c  */
#line 6577 "sql_yacc.yy"
    {}
    break;

  case 884:

/* Line 1806 of yacc.c  */
#line 6582 "sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 887:

/* Line 1806 of yacc.c  */
#line 6602 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 888:

/* Line 1806 of yacc.c  */
#line 6611 "sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 889:

/* Line 1806 of yacc.c  */
#line 6615 "sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 890:

/* Line 1806 of yacc.c  */
#line 6620 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 891:

/* Line 1806 of yacc.c  */
#line 6624 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 892:

/* Line 1806 of yacc.c  */
#line 6630 "sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 893:

/* Line 1806 of yacc.c  */
#line 6634 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 894:

/* Line 1806 of yacc.c  */
#line 6643 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 895:

/* Line 1806 of yacc.c  */
#line 6655 "sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 896:

/* Line 1806 of yacc.c  */
#line 6659 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 897:

/* Line 1806 of yacc.c  */
#line 6668 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 898:

/* Line 1806 of yacc.c  */
#line 6672 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 899:

/* Line 1806 of yacc.c  */
#line 6681 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 900:

/* Line 1806 of yacc.c  */
#line 6690 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 901:

/* Line 1806 of yacc.c  */
#line 6696 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 902:

/* Line 1806 of yacc.c  */
#line 6702 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 903:

/* Line 1806 of yacc.c  */
#line 6711 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 904:

/* Line 1806 of yacc.c  */
#line 6720 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 905:

/* Line 1806 of yacc.c  */
#line 6739 "sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 906:

/* Line 1806 of yacc.c  */
#line 6760 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 907:

/* Line 1806 of yacc.c  */
#line 6770 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_RECREATE;
          }
    break;

  case 908:

/* Line 1806 of yacc.c  */
#line 6774 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 909:

/* Line 1806 of yacc.c  */
#line 6781 "sql_yacc.yy"
    {}
    break;

  case 910:

/* Line 1806 of yacc.c  */
#line 6782 "sql_yacc.yy"
    {}
    break;

  case 911:

/* Line 1806 of yacc.c  */
#line 6786 "sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 912:

/* Line 1806 of yacc.c  */
#line 6787 "sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 913:

/* Line 1806 of yacc.c  */
#line 6791 "sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 914:

/* Line 1806 of yacc.c  */
#line 6792 "sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 915:

/* Line 1806 of yacc.c  */
#line 6793 "sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 916:

/* Line 1806 of yacc.c  */
#line 6797 "sql_yacc.yy"
    {}
    break;

  case 917:

/* Line 1806 of yacc.c  */
#line 6798 "sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 918:

/* Line 1806 of yacc.c  */
#line 6799 "sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 919:

/* Line 1806 of yacc.c  */
#line 6803 "sql_yacc.yy"
    {}
    break;

  case 920:

/* Line 1806 of yacc.c  */
#line 6804 "sql_yacc.yy"
    {}
    break;

  case 921:

/* Line 1806 of yacc.c  */
#line 6805 "sql_yacc.yy"
    {}
    break;

  case 922:

/* Line 1806 of yacc.c  */
#line 6806 "sql_yacc.yy"
    {}
    break;

  case 923:

/* Line 1806 of yacc.c  */
#line 6815 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 924:

/* Line 1806 of yacc.c  */
#line 6824 "sql_yacc.yy"
    {}
    break;

  case 925:

/* Line 1806 of yacc.c  */
#line 6826 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 926:

/* Line 1806 of yacc.c  */
#line 6833 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 927:

/* Line 1806 of yacc.c  */
#line 6841 "sql_yacc.yy"
    {}
    break;

  case 928:

/* Line 1806 of yacc.c  */
#line 6843 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 929:

/* Line 1806 of yacc.c  */
#line 6852 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 930:

/* Line 1806 of yacc.c  */
#line 6860 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 931:

/* Line 1806 of yacc.c  */
#line 6862 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 932:

/* Line 1806 of yacc.c  */
#line 6868 "sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 933:

/* Line 1806 of yacc.c  */
#line 6870 "sql_yacc.yy"
    {}
    break;

  case 936:

/* Line 1806 of yacc.c  */
#line 6879 "sql_yacc.yy"
    {}
    break;

  case 937:

/* Line 1806 of yacc.c  */
#line 6880 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 938:

/* Line 1806 of yacc.c  */
#line 6881 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 939:

/* Line 1806 of yacc.c  */
#line 6885 "sql_yacc.yy"
    {}
    break;

  case 940:

/* Line 1806 of yacc.c  */
#line 6887 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 943:

/* Line 1806 of yacc.c  */
#line 6908 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 944:

/* Line 1806 of yacc.c  */
#line 6915 "sql_yacc.yy"
    {}
    break;

  case 945:

/* Line 1806 of yacc.c  */
#line 6919 "sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 946:

/* Line 1806 of yacc.c  */
#line 6920 "sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 947:

/* Line 1806 of yacc.c  */
#line 6921 "sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 948:

/* Line 1806 of yacc.c  */
#line 6926 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 949:

/* Line 1806 of yacc.c  */
#line 6936 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Repair_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 950:

/* Line 1806 of yacc.c  */
#line 6947 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 951:

/* Line 1806 of yacc.c  */
#line 6948 "sql_yacc.yy"
    {}
    break;

  case 952:

/* Line 1806 of yacc.c  */
#line 6952 "sql_yacc.yy"
    {}
    break;

  case 953:

/* Line 1806 of yacc.c  */
#line 6953 "sql_yacc.yy"
    {}
    break;

  case 954:

/* Line 1806 of yacc.c  */
#line 6957 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 955:

/* Line 1806 of yacc.c  */
#line 6958 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 956:

/* Line 1806 of yacc.c  */
#line 6959 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 957:

/* Line 1806 of yacc.c  */
#line 6964 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 958:

/* Line 1806 of yacc.c  */
#line 6974 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Analyze_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 959:

/* Line 1806 of yacc.c  */
#line 6986 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 960:

/* Line 1806 of yacc.c  */
#line 6994 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 961:

/* Line 1806 of yacc.c  */
#line 7009 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Check_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 962:

/* Line 1806 of yacc.c  */
#line 7020 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 963:

/* Line 1806 of yacc.c  */
#line 7021 "sql_yacc.yy"
    {}
    break;

  case 964:

/* Line 1806 of yacc.c  */
#line 7025 "sql_yacc.yy"
    {}
    break;

  case 965:

/* Line 1806 of yacc.c  */
#line 7026 "sql_yacc.yy"
    {}
    break;

  case 966:

/* Line 1806 of yacc.c  */
#line 7030 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 967:

/* Line 1806 of yacc.c  */
#line 7031 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 968:

/* Line 1806 of yacc.c  */
#line 7032 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 969:

/* Line 1806 of yacc.c  */
#line 7033 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 970:

/* Line 1806 of yacc.c  */
#line 7034 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 971:

/* Line 1806 of yacc.c  */
#line 7035 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 972:

/* Line 1806 of yacc.c  */
#line 7040 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 973:

/* Line 1806 of yacc.c  */
#line 7050 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Optimize_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 974:

/* Line 1806 of yacc.c  */
#line 7061 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 975:

/* Line 1806 of yacc.c  */
#line 7062 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 976:

/* Line 1806 of yacc.c  */
#line 7063 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 977:

/* Line 1806 of yacc.c  */
#line 7068 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 978:

/* Line 1806 of yacc.c  */
#line 7072 "sql_yacc.yy"
    {}
    break;

  case 979:

/* Line 1806 of yacc.c  */
#line 7074 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 980:

/* Line 1806 of yacc.c  */
#line 7081 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 981:

/* Line 1806 of yacc.c  */
#line 7086 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 984:

/* Line 1806 of yacc.c  */
#line 7099 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 985:

/* Line 1806 of yacc.c  */
#line 7112 "sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 986:

/* Line 1806 of yacc.c  */
#line 7116 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 991:

/* Line 1806 of yacc.c  */
#line 7135 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 992:

/* Line 1806 of yacc.c  */
#line 7145 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 993:

/* Line 1806 of yacc.c  */
#line 7154 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 994:

/* Line 1806 of yacc.c  */
#line 7155 "sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 995:

/* Line 1806 of yacc.c  */
#line 7160 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 996:

/* Line 1806 of yacc.c  */
#line 7166 "sql_yacc.yy"
    {}
    break;

  case 1001:

/* Line 1806 of yacc.c  */
#line 7181 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1002:

/* Line 1806 of yacc.c  */
#line 7191 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1003:

/* Line 1806 of yacc.c  */
#line 7201 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
          }
    break;

  case 1005:

/* Line 1806 of yacc.c  */
#line 7208 "sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1007:

/* Line 1806 of yacc.c  */
#line 7219 "sql_yacc.yy"
    { }
    break;

  case 1009:

/* Line 1806 of yacc.c  */
#line 7225 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1010:

/* Line 1806 of yacc.c  */
#line 7226 "sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1011:

/* Line 1806 of yacc.c  */
#line 7236 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1014:

/* Line 1806 of yacc.c  */
#line 7250 "sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1016:

/* Line 1806 of yacc.c  */
#line 7260 "sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1018:

/* Line 1806 of yacc.c  */
#line 7269 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1020:

/* Line 1806 of yacc.c  */
#line 7288 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1021:

/* Line 1806 of yacc.c  */
#line 7296 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1023:

/* Line 1806 of yacc.c  */
#line 7303 "sql_yacc.yy"
    {}
    break;

  case 1028:

/* Line 1806 of yacc.c  */
#line 7313 "sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1031:

/* Line 1806 of yacc.c  */
#line 7328 "sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1035:

/* Line 1806 of yacc.c  */
#line 7345 "sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1036:

/* Line 1806 of yacc.c  */
#line 7373 "sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1038:

/* Line 1806 of yacc.c  */
#line 7405 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1039:

/* Line 1806 of yacc.c  */
#line 7411 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1042:

/* Line 1806 of yacc.c  */
#line 7423 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1043:

/* Line 1806 of yacc.c  */
#line 7438 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1044:

/* Line 1806 of yacc.c  */
#line 7445 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1045:

/* Line 1806 of yacc.c  */
#line 7470 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1046:

/* Line 1806 of yacc.c  */
#line 7476 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1047:

/* Line 1806 of yacc.c  */
#line 7482 "sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1048:

/* Line 1806 of yacc.c  */
#line 7483 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1049:

/* Line 1806 of yacc.c  */
#line 7484 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1050:

/* Line 1806 of yacc.c  */
#line 7485 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1051:

/* Line 1806 of yacc.c  */
#line 7486 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1052:

/* Line 1806 of yacc.c  */
#line 7490 "sql_yacc.yy"
    {}
    break;

  case 1053:

/* Line 1806 of yacc.c  */
#line 7491 "sql_yacc.yy"
    {}
    break;

  case 1054:

/* Line 1806 of yacc.c  */
#line 7497 "sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1055:

/* Line 1806 of yacc.c  */
#line 7548 "sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_cond_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1056:

/* Line 1806 of yacc.c  */
#line 7555 "sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1057:

/* Line 1806 of yacc.c  */
#line 7598 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1058:

/* Line 1806 of yacc.c  */
#line 7604 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1059:

/* Line 1806 of yacc.c  */
#line 7610 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1060:

/* Line 1806 of yacc.c  */
#line 7616 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1061:

/* Line 1806 of yacc.c  */
#line 7622 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1062:

/* Line 1806 of yacc.c  */
#line 7628 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1063:

/* Line 1806 of yacc.c  */
#line 7634 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1065:

/* Line 1806 of yacc.c  */
#line 7644 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1066:

/* Line 1806 of yacc.c  */
#line 7650 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1067:

/* Line 1806 of yacc.c  */
#line 7656 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1068:

/* Line 1806 of yacc.c  */
#line 7662 "sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1069:

/* Line 1806 of yacc.c  */
#line 7668 "sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1071:

/* Line 1806 of yacc.c  */
#line 7678 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1072:

/* Line 1806 of yacc.c  */
#line 7684 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1073:

/* Line 1806 of yacc.c  */
#line 7694 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1074:

/* Line 1806 of yacc.c  */
#line 7700 "sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1075:

/* Line 1806 of yacc.c  */
#line 7708 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1076:

/* Line 1806 of yacc.c  */
#line 7714 "sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1077:

/* Line 1806 of yacc.c  */
#line 7724 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1078:

/* Line 1806 of yacc.c  */
#line 7730 "sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1079:

/* Line 1806 of yacc.c  */
#line 7739 "sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1080:

/* Line 1806 of yacc.c  */
#line 7749 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1081:

/* Line 1806 of yacc.c  */
#line 7755 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1082:

/* Line 1806 of yacc.c  */
#line 7765 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1083:

/* Line 1806 of yacc.c  */
#line 7771 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1085:

/* Line 1806 of yacc.c  */
#line 7784 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1086:

/* Line 1806 of yacc.c  */
#line 7790 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1087:

/* Line 1806 of yacc.c  */
#line 7796 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1088:

/* Line 1806 of yacc.c  */
#line 7802 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1089:

/* Line 1806 of yacc.c  */
#line 7808 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1090:

/* Line 1806 of yacc.c  */
#line 7814 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1091:

/* Line 1806 of yacc.c  */
#line 7820 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1092:

/* Line 1806 of yacc.c  */
#line 7826 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1093:

/* Line 1806 of yacc.c  */
#line 7832 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1094:

/* Line 1806 of yacc.c  */
#line 7838 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1095:

/* Line 1806 of yacc.c  */
#line 7844 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1096:

/* Line 1806 of yacc.c  */
#line 7850 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1097:

/* Line 1806 of yacc.c  */
#line 7856 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1098:

/* Line 1806 of yacc.c  */
#line 7862 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1108:

/* Line 1806 of yacc.c  */
#line 7891 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1109:

/* Line 1806 of yacc.c  */
#line 7892 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1110:

/* Line 1806 of yacc.c  */
#line 7893 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1111:

/* Line 1806 of yacc.c  */
#line 7894 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1112:

/* Line 1806 of yacc.c  */
#line 7895 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1113:

/* Line 1806 of yacc.c  */
#line 7896 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1114:

/* Line 1806 of yacc.c  */
#line 7900 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1115:

/* Line 1806 of yacc.c  */
#line 7901 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1121:

/* Line 1806 of yacc.c  */
#line 7911 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1126:

/* Line 1806 of yacc.c  */
#line 7927 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1127:

/* Line 1806 of yacc.c  */
#line 7933 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1128:

/* Line 1806 of yacc.c  */
#line 7937 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1129:

/* Line 1806 of yacc.c  */
#line 7943 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:

/* Line 1806 of yacc.c  */
#line 7949 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1131:

/* Line 1806 of yacc.c  */
#line 7955 "sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1132:

/* Line 1806 of yacc.c  */
#line 7961 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1133:

/* Line 1806 of yacc.c  */
#line 7963 "sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1134:

/* Line 1806 of yacc.c  */
#line 7970 "sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1135:

/* Line 1806 of yacc.c  */
#line 7977 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1136:

/* Line 1806 of yacc.c  */
#line 7983 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1137:

/* Line 1806 of yacc.c  */
#line 7985 "sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1138:

/* Line 1806 of yacc.c  */
#line 7994 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1139:

/* Line 1806 of yacc.c  */
#line 8001 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1140:

/* Line 1806 of yacc.c  */
#line 8009 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1141:

/* Line 1806 of yacc.c  */
#line 8015 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1142:

/* Line 1806 of yacc.c  */
#line 8022 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1143:

/* Line 1806 of yacc.c  */
#line 8028 "sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:

/* Line 1806 of yacc.c  */
#line 8042 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1145:

/* Line 1806 of yacc.c  */
#line 8050 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1146:

/* Line 1806 of yacc.c  */
#line 8065 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1147:

/* Line 1806 of yacc.c  */
#line 8071 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1148:

/* Line 1806 of yacc.c  */
#line 8077 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1149:

/* Line 1806 of yacc.c  */
#line 8085 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1150:

/* Line 1806 of yacc.c  */
#line 8091 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1151:

/* Line 1806 of yacc.c  */
#line 8097 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1152:

/* Line 1806 of yacc.c  */
#line 8103 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1153:

/* Line 1806 of yacc.c  */
#line 8109 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1154:

/* Line 1806 of yacc.c  */
#line 8124 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1155:

/* Line 1806 of yacc.c  */
#line 8136 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1156:

/* Line 1806 of yacc.c  */
#line 8142 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1157:

/* Line 1806 of yacc.c  */
#line 8148 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1158:

/* Line 1806 of yacc.c  */
#line 8154 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1159:

/* Line 1806 of yacc.c  */
#line 8160 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1160:

/* Line 1806 of yacc.c  */
#line 8166 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1161:

/* Line 1806 of yacc.c  */
#line 8172 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1162:

/* Line 1806 of yacc.c  */
#line 8178 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1163:

/* Line 1806 of yacc.c  */
#line 8184 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1164:

/* Line 1806 of yacc.c  */
#line 8190 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1165:

/* Line 1806 of yacc.c  */
#line 8196 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1166:

/* Line 1806 of yacc.c  */
#line 8202 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1167:

/* Line 1806 of yacc.c  */
#line 8208 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1168:

/* Line 1806 of yacc.c  */
#line 8214 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1169:

/* Line 1806 of yacc.c  */
#line 8220 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1170:

/* Line 1806 of yacc.c  */
#line 8226 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1171:

/* Line 1806 of yacc.c  */
#line 8232 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1172:

/* Line 1806 of yacc.c  */
#line 8240 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1173:

/* Line 1806 of yacc.c  */
#line 8261 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1174:

/* Line 1806 of yacc.c  */
#line 8268 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1175:

/* Line 1806 of yacc.c  */
#line 8274 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1176:

/* Line 1806 of yacc.c  */
#line 8281 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1177:

/* Line 1806 of yacc.c  */
#line 8288 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1178:

/* Line 1806 of yacc.c  */
#line 8296 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1179:

/* Line 1806 of yacc.c  */
#line 8303 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1180:

/* Line 1806 of yacc.c  */
#line 8309 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1181:

/* Line 1806 of yacc.c  */
#line 8315 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1182:

/* Line 1806 of yacc.c  */
#line 8321 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1183:

/* Line 1806 of yacc.c  */
#line 8328 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1184:

/* Line 1806 of yacc.c  */
#line 8335 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1185:

/* Line 1806 of yacc.c  */
#line 8341 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1186:

/* Line 1806 of yacc.c  */
#line 8348 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1187:

/* Line 1806 of yacc.c  */
#line 8354 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1188:

/* Line 1806 of yacc.c  */
#line 8360 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1189:

/* Line 1806 of yacc.c  */
#line 8366 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1190:

/* Line 1806 of yacc.c  */
#line 8372 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1191:

/* Line 1806 of yacc.c  */
#line 8378 "sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local();
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1192:

/* Line 1806 of yacc.c  */
#line 8396 "sql_yacc.yy"
    {
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(3) - (4)].item));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1193:

/* Line 1806 of yacc.c  */
#line 8406 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1194:

/* Line 1806 of yacc.c  */
#line 8412 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1195:

/* Line 1806 of yacc.c  */
#line 8418 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1196:

/* Line 1806 of yacc.c  */
#line 8425 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1197:

/* Line 1806 of yacc.c  */
#line 8432 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1198:

/* Line 1806 of yacc.c  */
#line 8447 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1199:

/* Line 1806 of yacc.c  */
#line 8453 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1200:

/* Line 1806 of yacc.c  */
#line 8459 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1201:

/* Line 1806 of yacc.c  */
#line 8465 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1202:

/* Line 1806 of yacc.c  */
#line 8471 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1203:

/* Line 1806 of yacc.c  */
#line 8478 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1204:

/* Line 1806 of yacc.c  */
#line 8484 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1205:

/* Line 1806 of yacc.c  */
#line 8490 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1206:

/* Line 1806 of yacc.c  */
#line 8496 "sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1207:

/* Line 1806 of yacc.c  */
#line 8502 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1208:

/* Line 1806 of yacc.c  */
#line 8514 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1209:

/* Line 1806 of yacc.c  */
#line 8520 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1210:

/* Line 1806 of yacc.c  */
#line 8526 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1211:

/* Line 1806 of yacc.c  */
#line 8532 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1212:

/* Line 1806 of yacc.c  */
#line 8538 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1213:

/* Line 1806 of yacc.c  */
#line 8550 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1214:

/* Line 1806 of yacc.c  */
#line 8556 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1215:

/* Line 1806 of yacc.c  */
#line 8572 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1216:

/* Line 1806 of yacc.c  */
#line 8578 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1217:

/* Line 1806 of yacc.c  */
#line 8585 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1218:

/* Line 1806 of yacc.c  */
#line 8592 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1219:

/* Line 1806 of yacc.c  */
#line 8599 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1220:

/* Line 1806 of yacc.c  */
#line 8606 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1221:

/* Line 1806 of yacc.c  */
#line 8613 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1222:

/* Line 1806 of yacc.c  */
#line 8617 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1223:

/* Line 1806 of yacc.c  */
#line 8636 "sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1224:

/* Line 1806 of yacc.c  */
#line 8655 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1225:

/* Line 1806 of yacc.c  */
#line 8709 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1226:

/* Line 1806 of yacc.c  */
#line 8751 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1227:

/* Line 1806 of yacc.c  */
#line 8753 "sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1228:

/* Line 1806 of yacc.c  */
#line 8757 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1229:

/* Line 1806 of yacc.c  */
#line 8758 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1230:

/* Line 1806 of yacc.c  */
#line 8762 "sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1231:

/* Line 1806 of yacc.c  */
#line 8763 "sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1232:

/* Line 1806 of yacc.c  */
#line 8767 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1233:

/* Line 1806 of yacc.c  */
#line 8768 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1234:

/* Line 1806 of yacc.c  */
#line 8773 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1235:

/* Line 1806 of yacc.c  */
#line 8780 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1236:

/* Line 1806 of yacc.c  */
#line 8788 "sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1237:

/* Line 1806 of yacc.c  */
#line 8814 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1806 of yacc.c  */
#line 8820 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:

/* Line 1806 of yacc.c  */
#line 8826 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:

/* Line 1806 of yacc.c  */
#line 8832 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:

/* Line 1806 of yacc.c  */
#line 8838 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:

/* Line 1806 of yacc.c  */
#line 8844 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:

/* Line 1806 of yacc.c  */
#line 8853 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:

/* Line 1806 of yacc.c  */
#line 8859 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1245:

/* Line 1806 of yacc.c  */
#line 8861 "sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1246:

/* Line 1806 of yacc.c  */
#line 8863 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:

/* Line 1806 of yacc.c  */
#line 8869 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1806 of yacc.c  */
#line 8880 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1806 of yacc.c  */
#line 8886 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1806 of yacc.c  */
#line 8892 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1806 of yacc.c  */
#line 8898 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1806 of yacc.c  */
#line 8904 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1806 of yacc.c  */
#line 8910 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:

/* Line 1806 of yacc.c  */
#line 8916 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1806 of yacc.c  */
#line 8922 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1806 of yacc.c  */
#line 8928 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1806 of yacc.c  */
#line 8934 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1258:

/* Line 1806 of yacc.c  */
#line 8938 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
          }
    break;

  case 1259:

/* Line 1806 of yacc.c  */
#line 8952 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1260:

/* Line 1806 of yacc.c  */
#line 8960 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1261:

/* Line 1806 of yacc.c  */
#line 8967 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1262:

/* Line 1806 of yacc.c  */
#line 8977 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1263:

/* Line 1806 of yacc.c  */
#line 8985 "sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1264:

/* Line 1806 of yacc.c  */
#line 9000 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1265:

/* Line 1806 of yacc.c  */
#line 9001 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1266:

/* Line 1806 of yacc.c  */
#line 9006 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1267:

/* Line 1806 of yacc.c  */
#line 9011 "sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1268:

/* Line 1806 of yacc.c  */
#line 9016 "sql_yacc.yy"
    {
            Select->gorder_list = NULL;
          }
    break;

  case 1269:

/* Line 1806 of yacc.c  */
#line 9020 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->gorder_list= new (YYTHD->mem_root)
                                   SQL_I_List<ORDER>(select->order_list);
            if (select->gorder_list == NULL)
              MYSQL_YYABORT;
            select->order_list.empty();
          }
    break;

  case 1270:

/* Line 1806 of yacc.c  */
#line 9032 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1271:

/* Line 1806 of yacc.c  */
#line 9041 "sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1272:

/* Line 1806 of yacc.c  */
#line 9049 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1273:

/* Line 1806 of yacc.c  */
#line 9051 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1274:

/* Line 1806 of yacc.c  */
#line 9053 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1275:

/* Line 1806 of yacc.c  */
#line 9055 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1276:

/* Line 1806 of yacc.c  */
#line 9057 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1277:

/* Line 1806 of yacc.c  */
#line 9059 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1278:

/* Line 1806 of yacc.c  */
#line 9061 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1279:

/* Line 1806 of yacc.c  */
#line 9063 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1280:

/* Line 1806 of yacc.c  */
#line 9065 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_TIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1281:

/* Line 1806 of yacc.c  */
#line 9067 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1282:

/* Line 1806 of yacc.c  */
#line 9069 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1283:

/* Line 1806 of yacc.c  */
#line 9073 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1284:

/* Line 1806 of yacc.c  */
#line 9074 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1285:

/* Line 1806 of yacc.c  */
#line 9079 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1286:

/* Line 1806 of yacc.c  */
#line 9086 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1287:

/* Line 1806 of yacc.c  */
#line 9093 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1288:

/* Line 1806 of yacc.c  */
#line 9094 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1289:

/* Line 1806 of yacc.c  */
#line 9099 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1290:

/* Line 1806 of yacc.c  */
#line 9106 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1291:

/* Line 1806 of yacc.c  */
#line 9113 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1292:

/* Line 1806 of yacc.c  */
#line 9114 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1293:

/* Line 1806 of yacc.c  */
#line 9118 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1294:

/* Line 1806 of yacc.c  */
#line 9119 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1295:

/* Line 1806 of yacc.c  */
#line 9124 "sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1296:

/* Line 1806 of yacc.c  */
#line 9132 "sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1297:

/* Line 1806 of yacc.c  */
#line 9142 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1298:

/* Line 1806 of yacc.c  */
#line 9144 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1299:

/* Line 1806 of yacc.c  */
#line 9152 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1300:

/* Line 1806 of yacc.c  */
#line 9163 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1301:

/* Line 1806 of yacc.c  */
#line 9164 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1302:

/* Line 1806 of yacc.c  */
#line 9170 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1303:

/* Line 1806 of yacc.c  */
#line 9172 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1304:

/* Line 1806 of yacc.c  */
#line 9192 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1305:

/* Line 1806 of yacc.c  */
#line 9194 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1306:

/* Line 1806 of yacc.c  */
#line 9197 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1307:

/* Line 1806 of yacc.c  */
#line 9205 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1308:

/* Line 1806 of yacc.c  */
#line 9212 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1309:

/* Line 1806 of yacc.c  */
#line 9220 "sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1310:

/* Line 1806 of yacc.c  */
#line 9228 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1311:

/* Line 1806 of yacc.c  */
#line 9232 "sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1312:

/* Line 1806 of yacc.c  */
#line 9234 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1313:

/* Line 1806 of yacc.c  */
#line 9242 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1314:

/* Line 1806 of yacc.c  */
#line 9250 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1315:

/* Line 1806 of yacc.c  */
#line 9258 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1316:

/* Line 1806 of yacc.c  */
#line 9262 "sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1317:

/* Line 1806 of yacc.c  */
#line 9268 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1318:

/* Line 1806 of yacc.c  */
#line 9278 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1319:

/* Line 1806 of yacc.c  */
#line 9286 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1320:

/* Line 1806 of yacc.c  */
#line 9295 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1321:

/* Line 1806 of yacc.c  */
#line 9299 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1322:

/* Line 1806 of yacc.c  */
#line 9306 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1323:

/* Line 1806 of yacc.c  */
#line 9316 "sql_yacc.yy"
    {}
    break;

  case 1324:

/* Line 1806 of yacc.c  */
#line 9317 "sql_yacc.yy"
    {}
    break;

  case 1325:

/* Line 1806 of yacc.c  */
#line 9318 "sql_yacc.yy"
    {}
    break;

  case 1326:

/* Line 1806 of yacc.c  */
#line 9330 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1327:

/* Line 1806 of yacc.c  */
#line 9335 "sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1328:

/* Line 1806 of yacc.c  */
#line 9345 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1329:

/* Line 1806 of yacc.c  */
#line 9385 "sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               new Table_ident(unit), (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if (((yyvsp[(3) - (5)].table_list)->select_lex &&
                     (yyvsp[(3) - (5)].table_list)->select_lex->master_unit()->is_union()) || (yyvsp[(5) - (5)].lex_str_ptr))
            {
              /* simple nested joins cannot have aliases or unions */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1331:

/* Line 1806 of yacc.c  */
#line 9439 "sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1332:

/* Line 1806 of yacc.c  */
#line 9444 "sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1334:

/* Line 1806 of yacc.c  */
#line 9457 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1335:

/* Line 1806 of yacc.c  */
#line 9476 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1336:

/* Line 1806 of yacc.c  */
#line 9484 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1338:

/* Line 1806 of yacc.c  */
#line 9493 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1339:

/* Line 1806 of yacc.c  */
#line 9499 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1340:

/* Line 1806 of yacc.c  */
#line 9515 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1341:

/* Line 1806 of yacc.c  */
#line 9532 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1343:

/* Line 1806 of yacc.c  */
#line 9539 "sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1344:

/* Line 1806 of yacc.c  */
#line 9544 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1345:

/* Line 1806 of yacc.c  */
#line 9569 "sql_yacc.yy"
    {}
    break;

  case 1346:

/* Line 1806 of yacc.c  */
#line 9570 "sql_yacc.yy"
    {}
    break;

  case 1347:

/* Line 1806 of yacc.c  */
#line 9575 "sql_yacc.yy"
    {
            (yyval.num)= old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1348:

/* Line 1806 of yacc.c  */
#line 9578 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1349:

/* Line 1806 of yacc.c  */
#line 9579 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1350:

/* Line 1806 of yacc.c  */
#line 9580 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1351:

/* Line 1806 of yacc.c  */
#line 9584 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1352:

/* Line 1806 of yacc.c  */
#line 9585 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1353:

/* Line 1806 of yacc.c  */
#line 9590 "sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1355:

/* Line 1806 of yacc.c  */
#line 9595 "sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1360:

/* Line 1806 of yacc.c  */
#line 9608 "sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1362:

/* Line 1806 of yacc.c  */
#line 9612 "sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1364:

/* Line 1806 of yacc.c  */
#line 9617 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1365:

/* Line 1806 of yacc.c  */
#line 9618 "sql_yacc.yy"
    {}
    break;

  case 1366:

/* Line 1806 of yacc.c  */
#line 9623 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1367:

/* Line 1806 of yacc.c  */
#line 9625 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1370:

/* Line 1806 of yacc.c  */
#line 9635 "sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1371:

/* Line 1806 of yacc.c  */
#line 9646 "sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1372:

/* Line 1806 of yacc.c  */
#line 9658 "sql_yacc.yy"
    {}
    break;

  case 1373:

/* Line 1806 of yacc.c  */
#line 9659 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1374:

/* Line 1806 of yacc.c  */
#line 9660 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1375:

/* Line 1806 of yacc.c  */
#line 9661 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1376:

/* Line 1806 of yacc.c  */
#line 9662 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1377:

/* Line 1806 of yacc.c  */
#line 9663 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1378:

/* Line 1806 of yacc.c  */
#line 9664 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1379:

/* Line 1806 of yacc.c  */
#line 9665 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1380:

/* Line 1806 of yacc.c  */
#line 9666 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1381:

/* Line 1806 of yacc.c  */
#line 9667 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1382:

/* Line 1806 of yacc.c  */
#line 9668 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1383:

/* Line 1806 of yacc.c  */
#line 9669 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1384:

/* Line 1806 of yacc.c  */
#line 9673 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1385:

/* Line 1806 of yacc.c  */
#line 9674 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1386:

/* Line 1806 of yacc.c  */
#line 9675 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1387:

/* Line 1806 of yacc.c  */
#line 9676 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1388:

/* Line 1806 of yacc.c  */
#line 9677 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1389:

/* Line 1806 of yacc.c  */
#line 9678 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1390:

/* Line 1806 of yacc.c  */
#line 9679 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1391:

/* Line 1806 of yacc.c  */
#line 9680 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1392:

/* Line 1806 of yacc.c  */
#line 9681 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1393:

/* Line 1806 of yacc.c  */
#line 9685 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1394:

/* Line 1806 of yacc.c  */
#line 9686 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1395:

/* Line 1806 of yacc.c  */
#line 9687 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1396:

/* Line 1806 of yacc.c  */
#line 9688 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1400:

/* Line 1806 of yacc.c  */
#line 9698 "sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1401:

/* Line 1806 of yacc.c  */
#line 9700 "sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1404:

/* Line 1806 of yacc.c  */
#line 9713 "sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1405:

/* Line 1806 of yacc.c  */
#line 9715 "sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1406:

/* Line 1806 of yacc.c  */
#line 9719 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1408:

/* Line 1806 of yacc.c  */
#line 9731 "sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1409:

/* Line 1806 of yacc.c  */
#line 9735 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1410:

/* Line 1806 of yacc.c  */
#line 9746 "sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1411:

/* Line 1806 of yacc.c  */
#line 9751 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1414:

/* Line 1806 of yacc.c  */
#line 9773 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1415:

/* Line 1806 of yacc.c  */
#line 9775 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1416:

/* Line 1806 of yacc.c  */
#line 9779 "sql_yacc.yy"
    {}
    break;

  case 1417:

/* Line 1806 of yacc.c  */
#line 9781 "sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1418:

/* Line 1806 of yacc.c  */
#line 9801 "sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1422:

/* Line 1806 of yacc.c  */
#line 9835 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1425:

/* Line 1806 of yacc.c  */
#line 9854 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1427:

/* Line 1806 of yacc.c  */
#line 9889 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1428:

/* Line 1806 of yacc.c  */
#line 9891 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1429:

/* Line 1806 of yacc.c  */
#line 9895 "sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1430:

/* Line 1806 of yacc.c  */
#line 9896 "sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1431:

/* Line 1806 of yacc.c  */
#line 9897 "sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1432:

/* Line 1806 of yacc.c  */
#line 9902 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1433:

/* Line 1806 of yacc.c  */
#line 9908 "sql_yacc.yy"
    {}
    break;

  case 1434:

/* Line 1806 of yacc.c  */
#line 9912 "sql_yacc.yy"
    {}
    break;

  case 1435:

/* Line 1806 of yacc.c  */
#line 9913 "sql_yacc.yy"
    {}
    break;

  case 1436:

/* Line 1806 of yacc.c  */
#line 9918 "sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1437:

/* Line 1806 of yacc.c  */
#line 9925 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1438:

/* Line 1806 of yacc.c  */
#line 9932 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1439:

/* Line 1806 of yacc.c  */
#line 9939 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1440:

/* Line 1806 of yacc.c  */
#line 9949 "sql_yacc.yy"
    {
          Item_splocal *splocal;
          THD *thd= YYTHD;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable_t *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1441:

/* Line 1806 of yacc.c  */
#line 9983 "sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1442:

/* Line 1806 of yacc.c  */
#line 9987 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1443:

/* Line 1806 of yacc.c  */
#line 9993 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1444:

/* Line 1806 of yacc.c  */
#line 9999 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1445:

/* Line 1806 of yacc.c  */
#line 10008 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1446:

/* Line 1806 of yacc.c  */
#line 10013 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1447:

/* Line 1806 of yacc.c  */
#line 10022 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1448:

/* Line 1806 of yacc.c  */
#line 10023 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1449:

/* Line 1806 of yacc.c  */
#line 10024 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1450:

/* Line 1806 of yacc.c  */
#line 10025 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1451:

/* Line 1806 of yacc.c  */
#line 10026 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1452:

/* Line 1806 of yacc.c  */
#line 10027 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1453:

/* Line 1806 of yacc.c  */
#line 10031 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1454:

/* Line 1806 of yacc.c  */
#line 10032 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1455:

/* Line 1806 of yacc.c  */
#line 10033 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1456:

/* Line 1806 of yacc.c  */
#line 10034 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1457:

/* Line 1806 of yacc.c  */
#line 10035 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1458:

/* Line 1806 of yacc.c  */
#line 10039 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1459:

/* Line 1806 of yacc.c  */
#line 10040 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1460:

/* Line 1806 of yacc.c  */
#line 10041 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1461:

/* Line 1806 of yacc.c  */
#line 10042 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1462:

/* Line 1806 of yacc.c  */
#line 10043 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1463:

/* Line 1806 of yacc.c  */
#line 10047 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1464:

/* Line 1806 of yacc.c  */
#line 10048 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1465:

/* Line 1806 of yacc.c  */
#line 10049 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1466:

/* Line 1806 of yacc.c  */
#line 10050 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1467:

/* Line 1806 of yacc.c  */
#line 10055 "sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1471:

/* Line 1806 of yacc.c  */
#line 10066 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1473:

/* Line 1806 of yacc.c  */
#line 10096 "sql_yacc.yy"
    {}
    break;

  case 1474:

/* Line 1806 of yacc.c  */
#line 10097 "sql_yacc.yy"
    {}
    break;

  case 1477:

/* Line 1806 of yacc.c  */
#line 10107 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1478:

/* Line 1806 of yacc.c  */
#line 10118 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1479:

/* Line 1806 of yacc.c  */
#line 10124 "sql_yacc.yy"
    {}
    break;

  case 1481:

/* Line 1806 of yacc.c  */
#line 10129 "sql_yacc.yy"
    {}
    break;

  case 1482:

/* Line 1806 of yacc.c  */
#line 10134 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1483:

/* Line 1806 of yacc.c  */
#line 10153 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1484:

/* Line 1806 of yacc.c  */
#line 10185 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1486:

/* Line 1806 of yacc.c  */
#line 10197 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1487:

/* Line 1806 of yacc.c  */
#line 10205 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1489:

/* Line 1806 of yacc.c  */
#line 10208 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1490:

/* Line 1806 of yacc.c  */
#line 10220 "sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1491:

/* Line 1806 of yacc.c  */
#line 10231 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1492:

/* Line 1806 of yacc.c  */
#line 10237 "sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1493:

/* Line 1806 of yacc.c  */
#line 10248 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1494:

/* Line 1806 of yacc.c  */
#line 10257 "sql_yacc.yy"
    {}
    break;

  case 1495:

/* Line 1806 of yacc.c  */
#line 10258 "sql_yacc.yy"
    {}
    break;

  case 1496:

/* Line 1806 of yacc.c  */
#line 10259 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 1497:

/* Line 1806 of yacc.c  */
#line 10275 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1498:

/* Line 1806 of yacc.c  */
#line 10282 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1499:

/* Line 1806 of yacc.c  */
#line 10305 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1500:

/* Line 1806 of yacc.c  */
#line 10326 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1501:

/* Line 1806 of yacc.c  */
#line 10338 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1502:

/* Line 1806 of yacc.c  */
#line 10342 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1503:

/* Line 1806 of yacc.c  */
#line 10350 "sql_yacc.yy"
    {}
    break;

  case 1504:

/* Line 1806 of yacc.c  */
#line 10352 "sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1505:

/* Line 1806 of yacc.c  */
#line 10358 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1506:

/* Line 1806 of yacc.c  */
#line 10365 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1507:

/* Line 1806 of yacc.c  */
#line 10370 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1508:

/* Line 1806 of yacc.c  */
#line 10375 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1511:

/* Line 1806 of yacc.c  */
#line 10390 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1514:

/* Line 1806 of yacc.c  */
#line 10406 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1515:

/* Line 1806 of yacc.c  */
#line 10416 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1516:

/* Line 1806 of yacc.c  */
#line 10417 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1517:

/* Line 1806 of yacc.c  */
#line 10421 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1518:

/* Line 1806 of yacc.c  */
#line 10422 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1519:

/* Line 1806 of yacc.c  */
#line 10430 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1520:

/* Line 1806 of yacc.c  */
#line 10438 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1521:

/* Line 1806 of yacc.c  */
#line 10443 "sql_yacc.yy"
    {}
    break;

  case 1522:

/* Line 1806 of yacc.c  */
#line 10448 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1523:

/* Line 1806 of yacc.c  */
#line 10455 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1524:

/* Line 1806 of yacc.c  */
#line 10460 "sql_yacc.yy"
    {}
    break;

  case 1525:

/* Line 1806 of yacc.c  */
#line 10465 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1526:

/* Line 1806 of yacc.c  */
#line 10477 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1527:

/* Line 1806 of yacc.c  */
#line 10479 "sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1528:

/* Line 1806 of yacc.c  */
#line 10486 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1529:

/* Line 1806 of yacc.c  */
#line 10490 "sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1530:

/* Line 1806 of yacc.c  */
#line 10492 "sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1531:

/* Line 1806 of yacc.c  */
#line 10502 "sql_yacc.yy"
    {}
    break;

  case 1532:

/* Line 1806 of yacc.c  */
#line 10503 "sql_yacc.yy"
    {}
    break;

  case 1533:

/* Line 1806 of yacc.c  */
#line 10508 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1534:

/* Line 1806 of yacc.c  */
#line 10516 "sql_yacc.yy"
    {}
    break;

  case 1535:

/* Line 1806 of yacc.c  */
#line 10517 "sql_yacc.yy"
    {}
    break;

  case 1536:

/* Line 1806 of yacc.c  */
#line 10518 "sql_yacc.yy"
    {}
    break;

  case 1537:

/* Line 1806 of yacc.c  */
#line 10520 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1539:

/* Line 1806 of yacc.c  */
#line 10530 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1540:

/* Line 1806 of yacc.c  */
#line 10531 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1541:

/* Line 1806 of yacc.c  */
#line 10535 "sql_yacc.yy"
    {}
    break;

  case 1542:

/* Line 1806 of yacc.c  */
#line 10536 "sql_yacc.yy"
    {}
    break;

  case 1543:

/* Line 1806 of yacc.c  */
#line 10538 "sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1544:

/* Line 1806 of yacc.c  */
#line 10539 "sql_yacc.yy"
    {}
    break;

  case 1545:

/* Line 1806 of yacc.c  */
#line 10541 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1546:

/* Line 1806 of yacc.c  */
#line 10542 "sql_yacc.yy"
    {}
    break;

  case 1551:

/* Line 1806 of yacc.c  */
#line 10557 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1552:

/* Line 1806 of yacc.c  */
#line 10566 "sql_yacc.yy"
    {}
    break;

  case 1553:

/* Line 1806 of yacc.c  */
#line 10567 "sql_yacc.yy"
    {}
    break;

  case 1554:

/* Line 1806 of yacc.c  */
#line 10571 "sql_yacc.yy"
    {}
    break;

  case 1555:

/* Line 1806 of yacc.c  */
#line 10572 "sql_yacc.yy"
    {}
    break;

  case 1556:

/* Line 1806 of yacc.c  */
#line 10577 "sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1557:

/* Line 1806 of yacc.c  */
#line 10582 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1558:

/* Line 1806 of yacc.c  */
#line 10590 "sql_yacc.yy"
    {}
    break;

  case 1560:

/* Line 1806 of yacc.c  */
#line 10596 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1561:

/* Line 1806 of yacc.c  */
#line 10601 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1562:

/* Line 1806 of yacc.c  */
#line 10608 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1563:

/* Line 1806 of yacc.c  */
#line 10610 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1565:

/* Line 1806 of yacc.c  */
#line 10619 "sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1567:

/* Line 1806 of yacc.c  */
#line 10627 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1568:

/* Line 1806 of yacc.c  */
#line 10635 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1569:

/* Line 1806 of yacc.c  */
#line 10653 "sql_yacc.yy"
    {}
    break;

  case 1572:

/* Line 1806 of yacc.c  */
#line 10663 "sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1575:

/* Line 1806 of yacc.c  */
#line 10676 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1576:

/* Line 1806 of yacc.c  */
#line 10685 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1577:

/* Line 1806 of yacc.c  */
#line 10686 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1578:

/* Line 1806 of yacc.c  */
#line 10693 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1580:

/* Line 1806 of yacc.c  */
#line 10708 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1581:

/* Line 1806 of yacc.c  */
#line 10717 "sql_yacc.yy"
    {}
    break;

  case 1582:

/* Line 1806 of yacc.c  */
#line 10719 "sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1583:

/* Line 1806 of yacc.c  */
#line 10725 "sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1584:

/* Line 1806 of yacc.c  */
#line 10730 "sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1585:

/* Line 1806 of yacc.c  */
#line 10736 "sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1588:

/* Line 1806 of yacc.c  */
#line 10749 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1589:

/* Line 1806 of yacc.c  */
#line 10762 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1590:

/* Line 1806 of yacc.c  */
#line 10777 "sql_yacc.yy"
    {}
    break;

  case 1591:

/* Line 1806 of yacc.c  */
#line 10778 "sql_yacc.yy"
    {}
    break;

  case 1592:

/* Line 1806 of yacc.c  */
#line 10782 "sql_yacc.yy"
    {}
    break;

  case 1593:

/* Line 1806 of yacc.c  */
#line 10783 "sql_yacc.yy"
    {}
    break;

  case 1594:

/* Line 1806 of yacc.c  */
#line 10787 "sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1595:

/* Line 1806 of yacc.c  */
#line 10788 "sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1596:

/* Line 1806 of yacc.c  */
#line 10789 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1597:

/* Line 1806 of yacc.c  */
#line 10794 "sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1598:

/* Line 1806 of yacc.c  */
#line 10805 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Truncate_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1605:

/* Line 1806 of yacc.c  */
#line 10830 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1606:

/* Line 1806 of yacc.c  */
#line 10834 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1607:

/* Line 1806 of yacc.c  */
#line 10838 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1608:

/* Line 1806 of yacc.c  */
#line 10842 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1609:

/* Line 1806 of yacc.c  */
#line 10846 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1610:

/* Line 1806 of yacc.c  */
#line 10850 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1611:

/* Line 1806 of yacc.c  */
#line 10854 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1612:

/* Line 1806 of yacc.c  */
#line 10858 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1613:

/* Line 1806 of yacc.c  */
#line 10862 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1614:

/* Line 1806 of yacc.c  */
#line 10869 "sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1615:

/* Line 1806 of yacc.c  */
#line 10873 "sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1616:

/* Line 1806 of yacc.c  */
#line 10882 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1617:

/* Line 1806 of yacc.c  */
#line 10890 "sql_yacc.yy"
    {}
    break;

  case 1618:

/* Line 1806 of yacc.c  */
#line 10895 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1619:

/* Line 1806 of yacc.c  */
#line 10902 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1620:

/* Line 1806 of yacc.c  */
#line 10910 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1621:

/* Line 1806 of yacc.c  */
#line 10918 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1622:

/* Line 1806 of yacc.c  */
#line 10926 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1623:

/* Line 1806 of yacc.c  */
#line 10934 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1624:

/* Line 1806 of yacc.c  */
#line 10942 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1625:

/* Line 1806 of yacc.c  */
#line 10949 "sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1626:

/* Line 1806 of yacc.c  */
#line 10951 "sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1627:

/* Line 1806 of yacc.c  */
#line 10953 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1628:

/* Line 1806 of yacc.c  */
#line 10962 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1629:

/* Line 1806 of yacc.c  */
#line 10966 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1630:

/* Line 1806 of yacc.c  */
#line 10970 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1632:

/* Line 1806 of yacc.c  */
#line 10975 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1634:

/* Line 1806 of yacc.c  */
#line 10980 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1635:

/* Line 1806 of yacc.c  */
#line 10989 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1636:

/* Line 1806 of yacc.c  */
#line 10996 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1637:

/* Line 1806 of yacc.c  */
#line 11001 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1638:

/* Line 1806 of yacc.c  */
#line 11006 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1639:

/* Line 1806 of yacc.c  */
#line 11011 "sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1640:

/* Line 1806 of yacc.c  */
#line 11013 "sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1641:

/* Line 1806 of yacc.c  */
#line 11015 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1642:

/* Line 1806 of yacc.c  */
#line 11017 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1643:

/* Line 1806 of yacc.c  */
#line 11019 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1644:

/* Line 1806 of yacc.c  */
#line 11021 "sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1645:

/* Line 1806 of yacc.c  */
#line 11028 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1646:

/* Line 1806 of yacc.c  */
#line 11036 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1647:

/* Line 1806 of yacc.c  */
#line 11038 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1648:

/* Line 1806 of yacc.c  */
#line 11046 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1649:

/* Line 1806 of yacc.c  */
#line 11053 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1650:

/* Line 1806 of yacc.c  */
#line 11060 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1651:

/* Line 1806 of yacc.c  */
#line 11070 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1652:

/* Line 1806 of yacc.c  */
#line 11077 "sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1653:

/* Line 1806 of yacc.c  */
#line 11083 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1654:

/* Line 1806 of yacc.c  */
#line 11092 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1655:

/* Line 1806 of yacc.c  */
#line 11100 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1656:

/* Line 1806 of yacc.c  */
#line 11104 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1657:

/* Line 1806 of yacc.c  */
#line 11108 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1658:

/* Line 1806 of yacc.c  */
#line 11115 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1659:

/* Line 1806 of yacc.c  */
#line 11122 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1660:

/* Line 1806 of yacc.c  */
#line 11128 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1661:

/* Line 1806 of yacc.c  */
#line 11135 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1662:

/* Line 1806 of yacc.c  */
#line 11142 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1663:

/* Line 1806 of yacc.c  */
#line 11147 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1664:

/* Line 1806 of yacc.c  */
#line 11152 "sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1665:

/* Line 1806 of yacc.c  */
#line 11160 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1666:

/* Line 1806 of yacc.c  */
#line 11162 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1667:

/* Line 1806 of yacc.c  */
#line 11164 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1672:

/* Line 1806 of yacc.c  */
#line 11178 "sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1673:

/* Line 1806 of yacc.c  */
#line 11179 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1674:

/* Line 1806 of yacc.c  */
#line 11183 "sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1675:

/* Line 1806 of yacc.c  */
#line 11184 "sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1678:

/* Line 1806 of yacc.c  */
#line 11193 "sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1679:

/* Line 1806 of yacc.c  */
#line 11194 "sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1680:

/* Line 1806 of yacc.c  */
#line 11198 "sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1681:

/* Line 1806 of yacc.c  */
#line 11199 "sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1683:

/* Line 1806 of yacc.c  */
#line 11205 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1684:

/* Line 1806 of yacc.c  */
#line 11212 "sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1685:

/* Line 1806 of yacc.c  */
#line 11222 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1686:

/* Line 1806 of yacc.c  */
#line 11232 "sql_yacc.yy"
    {}
    break;

  case 1687:

/* Line 1806 of yacc.c  */
#line 11234 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1688:

/* Line 1806 of yacc.c  */
#line 11236 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1691:

/* Line 1806 of yacc.c  */
#line 11248 "sql_yacc.yy"
    {}
    break;

  case 1692:

/* Line 1806 of yacc.c  */
#line 11249 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1693:

/* Line 1806 of yacc.c  */
#line 11250 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1694:

/* Line 1806 of yacc.c  */
#line 11254 "sql_yacc.yy"
    {}
    break;

  case 1695:

/* Line 1806 of yacc.c  */
#line 11255 "sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1696:

/* Line 1806 of yacc.c  */
#line 11257 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1697:

/* Line 1806 of yacc.c  */
#line 11271 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1698:

/* Line 1806 of yacc.c  */
#line 11278 "sql_yacc.yy"
    {}
    break;

  case 1699:

/* Line 1806 of yacc.c  */
#line 11283 "sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1700:

/* Line 1806 of yacc.c  */
#line 11292 "sql_yacc.yy"
    {}
    break;

  case 1701:

/* Line 1806 of yacc.c  */
#line 11293 "sql_yacc.yy"
    {}
    break;

  case 1703:

/* Line 1806 of yacc.c  */
#line 11298 "sql_yacc.yy"
    {}
    break;

  case 1704:

/* Line 1806 of yacc.c  */
#line 11300 "sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1706:

/* Line 1806 of yacc.c  */
#line 11315 "sql_yacc.yy"
    {}
    break;

  case 1707:

/* Line 1806 of yacc.c  */
#line 11320 "sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1708:

/* Line 1806 of yacc.c  */
#line 11322 "sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1709:

/* Line 1806 of yacc.c  */
#line 11324 "sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1710:

/* Line 1806 of yacc.c  */
#line 11326 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1711:

/* Line 1806 of yacc.c  */
#line 11328 "sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1712:

/* Line 1806 of yacc.c  */
#line 11330 "sql_yacc.yy"
    { Lex->type|= REFRESH_RELAY_LOG; }
    break;

  case 1713:

/* Line 1806 of yacc.c  */
#line 11332 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1714:

/* Line 1806 of yacc.c  */
#line 11334 "sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1715:

/* Line 1806 of yacc.c  */
#line 11336 "sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1716:

/* Line 1806 of yacc.c  */
#line 11338 "sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1717:

/* Line 1806 of yacc.c  */
#line 11340 "sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1718:

/* Line 1806 of yacc.c  */
#line 11342 "sql_yacc.yy"
    { 
            Lex->type|= REFRESH_SLAVE;
            Lex->reset_slave_info.all= false;
          }
    break;

  case 1719:

/* Line 1806 of yacc.c  */
#line 11347 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1720:

/* Line 1806 of yacc.c  */
#line 11349 "sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1721:

/* Line 1806 of yacc.c  */
#line 11351 "sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1722:

/* Line 1806 of yacc.c  */
#line 11355 "sql_yacc.yy"
    {}
    break;

  case 1723:

/* Line 1806 of yacc.c  */
#line 11356 "sql_yacc.yy"
    {}
    break;

  case 1724:

/* Line 1806 of yacc.c  */
#line 11361 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1725:

/* Line 1806 of yacc.c  */
#line 11366 "sql_yacc.yy"
    {}
    break;

  case 1728:

/* Line 1806 of yacc.c  */
#line 11375 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1729:

/* Line 1806 of yacc.c  */
#line 11376 "sql_yacc.yy"
    { }
    break;

  case 1730:

/* Line 1806 of yacc.c  */
#line 11377 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1731:

/* Line 1806 of yacc.c  */
#line 11378 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1732:

/* Line 1806 of yacc.c  */
#line 11382 "sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1733:

/* Line 1806 of yacc.c  */
#line 11383 "sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1734:

/* Line 1806 of yacc.c  */
#line 11388 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1735:

/* Line 1806 of yacc.c  */
#line 11394 "sql_yacc.yy"
    {}
    break;

  case 1737:

/* Line 1806 of yacc.c  */
#line 11403 "sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1738:

/* Line 1806 of yacc.c  */
#line 11407 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1739:

/* Line 1806 of yacc.c  */
#line 11419 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1740:

/* Line 1806 of yacc.c  */
#line 11428 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1741:

/* Line 1806 of yacc.c  */
#line 11429 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1742:

/* Line 1806 of yacc.c  */
#line 11430 "sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1743:

/* Line 1806 of yacc.c  */
#line 11437 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1744:

/* Line 1806 of yacc.c  */
#line 11448 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1745:

/* Line 1806 of yacc.c  */
#line 11460 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1746:

/* Line 1806 of yacc.c  */
#line 11470 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (12)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (12)].lock_type), MDL_SHARED_WRITE))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1747:

/* Line 1806 of yacc.c  */
#line 11480 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(14) - (14)].charset); }
    break;

  case 1748:

/* Line 1806 of yacc.c  */
#line 11484 "sql_yacc.yy"
    {}
    break;

  case 1749:

/* Line 1806 of yacc.c  */
#line 11488 "sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1750:

/* Line 1806 of yacc.c  */
#line 11489 "sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1751:

/* Line 1806 of yacc.c  */
#line 11493 "sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1752:

/* Line 1806 of yacc.c  */
#line 11494 "sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1753:

/* Line 1806 of yacc.c  */
#line 11498 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1754:

/* Line 1806 of yacc.c  */
#line 11500 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1755:

/* Line 1806 of yacc.c  */
#line 11511 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1756:

/* Line 1806 of yacc.c  */
#line 11515 "sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1757:

/* Line 1806 of yacc.c  */
#line 11516 "sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1758:

/* Line 1806 of yacc.c  */
#line 11517 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1763:

/* Line 1806 of yacc.c  */
#line 11532 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1764:

/* Line 1806 of yacc.c  */
#line 11537 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1765:

/* Line 1806 of yacc.c  */
#line 11544 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1766:

/* Line 1806 of yacc.c  */
#line 11549 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1771:

/* Line 1806 of yacc.c  */
#line 11567 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1772:

/* Line 1806 of yacc.c  */
#line 11572 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1773:

/* Line 1806 of yacc.c  */
#line 11579 "sql_yacc.yy"
    { }
    break;

  case 1774:

/* Line 1806 of yacc.c  */
#line 11581 "sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1776:

/* Line 1806 of yacc.c  */
#line 11586 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1777:

/* Line 1806 of yacc.c  */
#line 11593 "sql_yacc.yy"
    { }
    break;

  case 1778:

/* Line 1806 of yacc.c  */
#line 11595 "sql_yacc.yy"
    { }
    break;

  case 1779:

/* Line 1806 of yacc.c  */
#line 11599 "sql_yacc.yy"
    {}
    break;

  case 1780:

/* Line 1806 of yacc.c  */
#line 11600 "sql_yacc.yy"
    {}
    break;

  case 1781:

/* Line 1806 of yacc.c  */
#line 11601 "sql_yacc.yy"
    {}
    break;

  case 1782:

/* Line 1806 of yacc.c  */
#line 11606 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1783:

/* Line 1806 of yacc.c  */
#line 11608 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1784:

/* Line 1806 of yacc.c  */
#line 11612 "sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1785:

/* Line 1806 of yacc.c  */
#line 11614 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1786:

/* Line 1806 of yacc.c  */
#line 11622 "sql_yacc.yy"
    {}
    break;

  case 1787:

/* Line 1806 of yacc.c  */
#line 11623 "sql_yacc.yy"
    {}
    break;

  case 1790:

/* Line 1806 of yacc.c  */
#line 11633 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), YYTHD->charset());
          }
    break;

  case 1791:

/* Line 1806 of yacc.c  */
#line 11646 "sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1792:

/* Line 1806 of yacc.c  */
#line 11670 "sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1793:

/* Line 1806 of yacc.c  */
#line 11682 "sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1794:

/* Line 1806 of yacc.c  */
#line 11693 "sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1795:

/* Line 1806 of yacc.c  */
#line 11712 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1796:

/* Line 1806 of yacc.c  */
#line 11720 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1797:

/* Line 1806 of yacc.c  */
#line 11732 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1798:

/* Line 1806 of yacc.c  */
#line 11747 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1799:

/* Line 1806 of yacc.c  */
#line 11767 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1800:

/* Line 1806 of yacc.c  */
#line 11768 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1801:

/* Line 1806 of yacc.c  */
#line 11770 "sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1802:

/* Line 1806 of yacc.c  */
#line 11777 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1803:

/* Line 1806 of yacc.c  */
#line 11778 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1804:

/* Line 1806 of yacc.c  */
#line 11780 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1805:

/* Line 1806 of yacc.c  */
#line 11787 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1806:

/* Line 1806 of yacc.c  */
#line 11793 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1807:

/* Line 1806 of yacc.c  */
#line 11799 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1808:

/* Line 1806 of yacc.c  */
#line 11805 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1809:

/* Line 1806 of yacc.c  */
#line 11811 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1810:

/* Line 1806 of yacc.c  */
#line 11840 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1811:

/* Line 1806 of yacc.c  */
#line 11867 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1812:

/* Line 1806 of yacc.c  */
#line 11868 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1813:

/* Line 1806 of yacc.c  */
#line 11869 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1814:

/* Line 1806 of yacc.c  */
#line 11874 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1815:

/* Line 1806 of yacc.c  */
#line 11884 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1816:

/* Line 1806 of yacc.c  */
#line 11894 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1817:

/* Line 1806 of yacc.c  */
#line 11900 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1818:

/* Line 1806 of yacc.c  */
#line 11909 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1819:

/* Line 1806 of yacc.c  */
#line 11923 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1820:

/* Line 1806 of yacc.c  */
#line 11924 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1821:

/* Line 1806 of yacc.c  */
#line 11929 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1822:

/* Line 1806 of yacc.c  */
#line 11938 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1823:

/* Line 1806 of yacc.c  */
#line 11953 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1824:

/* Line 1806 of yacc.c  */
#line 11958 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1825:

/* Line 1806 of yacc.c  */
#line 12004 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1826:

/* Line 1806 of yacc.c  */
#line 12009 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1827:

/* Line 1806 of yacc.c  */
#line 12026 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1828:

/* Line 1806 of yacc.c  */
#line 12031 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1829:

/* Line 1806 of yacc.c  */
#line 12110 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1830:

/* Line 1806 of yacc.c  */
#line 12135 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1831:

/* Line 1806 of yacc.c  */
#line 12165 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1832:

/* Line 1806 of yacc.c  */
#line 12167 "sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1833:

/* Line 1806 of yacc.c  */
#line 12183 "sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1834:

/* Line 1806 of yacc.c  */
#line 12192 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1835:

/* Line 1806 of yacc.c  */
#line 12197 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1836:

/* Line 1806 of yacc.c  */
#line 12203 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1837:

/* Line 1806 of yacc.c  */
#line 12209 "sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1838:

/* Line 1806 of yacc.c  */
#line 12219 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1839:

/* Line 1806 of yacc.c  */
#line 12225 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1840:

/* Line 1806 of yacc.c  */
#line 12234 "sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1841:

/* Line 1806 of yacc.c  */
#line 12243 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1842:

/* Line 1806 of yacc.c  */
#line 12245 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1843:

/* Line 1806 of yacc.c  */
#line 12275 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1844:

/* Line 1806 of yacc.c  */
#line 12291 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1845:

/* Line 1806 of yacc.c  */
#line 12307 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1846:

/* Line 1806 of yacc.c  */
#line 12323 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1847:

/* Line 1806 of yacc.c  */
#line 12325 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1848:

/* Line 1806 of yacc.c  */
#line 12335 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1849:

/* Line 1806 of yacc.c  */
#line 12337 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1850:

/* Line 1806 of yacc.c  */
#line 12347 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1851:

/* Line 1806 of yacc.c  */
#line 12348 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1852:

/* Line 1806 of yacc.c  */
#line 12349 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1853:

/* Line 1806 of yacc.c  */
#line 12354 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1854:

/* Line 1806 of yacc.c  */
#line 12371 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 1855:

/* Line 1806 of yacc.c  */
#line 12393 "sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 1856:

/* Line 1806 of yacc.c  */
#line 12407 "sql_yacc.yy"
    {}
    break;

  case 1857:

/* Line 1806 of yacc.c  */
#line 12408 "sql_yacc.yy"
    {}
    break;

  case 1858:

/* Line 1806 of yacc.c  */
#line 12409 "sql_yacc.yy"
    {}
    break;

  case 1859:

/* Line 1806 of yacc.c  */
#line 12410 "sql_yacc.yy"
    {}
    break;

  case 1860:

/* Line 1806 of yacc.c  */
#line 12411 "sql_yacc.yy"
    {}
    break;

  case 1861:

/* Line 1806 of yacc.c  */
#line 12412 "sql_yacc.yy"
    {}
    break;

  case 1862:

/* Line 1806 of yacc.c  */
#line 12413 "sql_yacc.yy"
    {}
    break;

  case 1863:

/* Line 1806 of yacc.c  */
#line 12414 "sql_yacc.yy"
    {}
    break;

  case 1864:

/* Line 1806 of yacc.c  */
#line 12415 "sql_yacc.yy"
    {}
    break;

  case 1865:

/* Line 1806 of yacc.c  */
#line 12416 "sql_yacc.yy"
    {}
    break;

  case 1866:

/* Line 1806 of yacc.c  */
#line 12417 "sql_yacc.yy"
    {}
    break;

  case 1867:

/* Line 1806 of yacc.c  */
#line 12418 "sql_yacc.yy"
    {}
    break;

  case 1868:

/* Line 1806 of yacc.c  */
#line 12419 "sql_yacc.yy"
    {}
    break;

  case 1869:

/* Line 1806 of yacc.c  */
#line 12420 "sql_yacc.yy"
    {}
    break;

  case 1870:

/* Line 1806 of yacc.c  */
#line 12421 "sql_yacc.yy"
    {}
    break;

  case 1871:

/* Line 1806 of yacc.c  */
#line 12422 "sql_yacc.yy"
    {}
    break;

  case 1872:

/* Line 1806 of yacc.c  */
#line 12423 "sql_yacc.yy"
    {}
    break;

  case 1873:

/* Line 1806 of yacc.c  */
#line 12424 "sql_yacc.yy"
    {}
    break;

  case 1874:

/* Line 1806 of yacc.c  */
#line 12425 "sql_yacc.yy"
    {}
    break;

  case 1875:

/* Line 1806 of yacc.c  */
#line 12426 "sql_yacc.yy"
    {}
    break;

  case 1876:

/* Line 1806 of yacc.c  */
#line 12427 "sql_yacc.yy"
    {}
    break;

  case 1877:

/* Line 1806 of yacc.c  */
#line 12428 "sql_yacc.yy"
    {}
    break;

  case 1878:

/* Line 1806 of yacc.c  */
#line 12429 "sql_yacc.yy"
    {}
    break;

  case 1879:

/* Line 1806 of yacc.c  */
#line 12430 "sql_yacc.yy"
    {}
    break;

  case 1880:

/* Line 1806 of yacc.c  */
#line 12431 "sql_yacc.yy"
    {}
    break;

  case 1881:

/* Line 1806 of yacc.c  */
#line 12432 "sql_yacc.yy"
    {}
    break;

  case 1882:

/* Line 1806 of yacc.c  */
#line 12433 "sql_yacc.yy"
    {}
    break;

  case 1883:

/* Line 1806 of yacc.c  */
#line 12434 "sql_yacc.yy"
    {}
    break;

  case 1884:

/* Line 1806 of yacc.c  */
#line 12435 "sql_yacc.yy"
    {}
    break;

  case 1885:

/* Line 1806 of yacc.c  */
#line 12436 "sql_yacc.yy"
    {}
    break;

  case 1886:

/* Line 1806 of yacc.c  */
#line 12437 "sql_yacc.yy"
    {}
    break;

  case 1887:

/* Line 1806 of yacc.c  */
#line 12438 "sql_yacc.yy"
    {}
    break;

  case 1888:

/* Line 1806 of yacc.c  */
#line 12439 "sql_yacc.yy"
    {}
    break;

  case 1889:

/* Line 1806 of yacc.c  */
#line 12440 "sql_yacc.yy"
    {}
    break;

  case 1890:

/* Line 1806 of yacc.c  */
#line 12441 "sql_yacc.yy"
    {}
    break;

  case 1891:

/* Line 1806 of yacc.c  */
#line 12442 "sql_yacc.yy"
    {}
    break;

  case 1892:

/* Line 1806 of yacc.c  */
#line 12443 "sql_yacc.yy"
    {}
    break;

  case 1893:

/* Line 1806 of yacc.c  */
#line 12444 "sql_yacc.yy"
    {}
    break;

  case 1894:

/* Line 1806 of yacc.c  */
#line 12445 "sql_yacc.yy"
    {}
    break;

  case 1895:

/* Line 1806 of yacc.c  */
#line 12446 "sql_yacc.yy"
    {}
    break;

  case 1896:

/* Line 1806 of yacc.c  */
#line 12447 "sql_yacc.yy"
    {}
    break;

  case 1897:

/* Line 1806 of yacc.c  */
#line 12448 "sql_yacc.yy"
    {}
    break;

  case 1898:

/* Line 1806 of yacc.c  */
#line 12449 "sql_yacc.yy"
    {}
    break;

  case 1899:

/* Line 1806 of yacc.c  */
#line 12450 "sql_yacc.yy"
    {}
    break;

  case 1900:

/* Line 1806 of yacc.c  */
#line 12451 "sql_yacc.yy"
    {}
    break;

  case 1901:

/* Line 1806 of yacc.c  */
#line 12452 "sql_yacc.yy"
    {}
    break;

  case 1902:

/* Line 1806 of yacc.c  */
#line 12453 "sql_yacc.yy"
    {}
    break;

  case 1903:

/* Line 1806 of yacc.c  */
#line 12454 "sql_yacc.yy"
    {}
    break;

  case 1904:

/* Line 1806 of yacc.c  */
#line 12455 "sql_yacc.yy"
    {}
    break;

  case 1905:

/* Line 1806 of yacc.c  */
#line 12456 "sql_yacc.yy"
    {}
    break;

  case 1906:

/* Line 1806 of yacc.c  */
#line 12466 "sql_yacc.yy"
    {}
    break;

  case 1907:

/* Line 1806 of yacc.c  */
#line 12467 "sql_yacc.yy"
    {}
    break;

  case 1908:

/* Line 1806 of yacc.c  */
#line 12468 "sql_yacc.yy"
    {}
    break;

  case 1909:

/* Line 1806 of yacc.c  */
#line 12469 "sql_yacc.yy"
    {}
    break;

  case 1910:

/* Line 1806 of yacc.c  */
#line 12470 "sql_yacc.yy"
    {}
    break;

  case 1911:

/* Line 1806 of yacc.c  */
#line 12471 "sql_yacc.yy"
    {}
    break;

  case 1912:

/* Line 1806 of yacc.c  */
#line 12472 "sql_yacc.yy"
    {}
    break;

  case 1913:

/* Line 1806 of yacc.c  */
#line 12473 "sql_yacc.yy"
    {}
    break;

  case 1914:

/* Line 1806 of yacc.c  */
#line 12474 "sql_yacc.yy"
    {}
    break;

  case 1915:

/* Line 1806 of yacc.c  */
#line 12475 "sql_yacc.yy"
    {}
    break;

  case 1916:

/* Line 1806 of yacc.c  */
#line 12476 "sql_yacc.yy"
    {}
    break;

  case 1917:

/* Line 1806 of yacc.c  */
#line 12477 "sql_yacc.yy"
    {}
    break;

  case 1918:

/* Line 1806 of yacc.c  */
#line 12478 "sql_yacc.yy"
    {}
    break;

  case 1919:

/* Line 1806 of yacc.c  */
#line 12479 "sql_yacc.yy"
    {}
    break;

  case 1920:

/* Line 1806 of yacc.c  */
#line 12480 "sql_yacc.yy"
    {}
    break;

  case 1921:

/* Line 1806 of yacc.c  */
#line 12481 "sql_yacc.yy"
    {}
    break;

  case 1922:

/* Line 1806 of yacc.c  */
#line 12482 "sql_yacc.yy"
    {}
    break;

  case 1923:

/* Line 1806 of yacc.c  */
#line 12483 "sql_yacc.yy"
    {}
    break;

  case 1924:

/* Line 1806 of yacc.c  */
#line 12484 "sql_yacc.yy"
    {}
    break;

  case 1925:

/* Line 1806 of yacc.c  */
#line 12485 "sql_yacc.yy"
    {}
    break;

  case 1926:

/* Line 1806 of yacc.c  */
#line 12486 "sql_yacc.yy"
    {}
    break;

  case 1927:

/* Line 1806 of yacc.c  */
#line 12487 "sql_yacc.yy"
    {}
    break;

  case 1928:

/* Line 1806 of yacc.c  */
#line 12488 "sql_yacc.yy"
    {}
    break;

  case 1929:

/* Line 1806 of yacc.c  */
#line 12489 "sql_yacc.yy"
    {}
    break;

  case 1930:

/* Line 1806 of yacc.c  */
#line 12490 "sql_yacc.yy"
    {}
    break;

  case 1931:

/* Line 1806 of yacc.c  */
#line 12491 "sql_yacc.yy"
    {}
    break;

  case 1932:

/* Line 1806 of yacc.c  */
#line 12492 "sql_yacc.yy"
    {}
    break;

  case 1933:

/* Line 1806 of yacc.c  */
#line 12493 "sql_yacc.yy"
    {}
    break;

  case 1934:

/* Line 1806 of yacc.c  */
#line 12494 "sql_yacc.yy"
    {}
    break;

  case 1935:

/* Line 1806 of yacc.c  */
#line 12495 "sql_yacc.yy"
    {}
    break;

  case 1936:

/* Line 1806 of yacc.c  */
#line 12496 "sql_yacc.yy"
    {}
    break;

  case 1937:

/* Line 1806 of yacc.c  */
#line 12497 "sql_yacc.yy"
    {}
    break;

  case 1938:

/* Line 1806 of yacc.c  */
#line 12498 "sql_yacc.yy"
    {}
    break;

  case 1939:

/* Line 1806 of yacc.c  */
#line 12499 "sql_yacc.yy"
    {}
    break;

  case 1940:

/* Line 1806 of yacc.c  */
#line 12500 "sql_yacc.yy"
    {}
    break;

  case 1941:

/* Line 1806 of yacc.c  */
#line 12501 "sql_yacc.yy"
    {}
    break;

  case 1942:

/* Line 1806 of yacc.c  */
#line 12502 "sql_yacc.yy"
    {}
    break;

  case 1943:

/* Line 1806 of yacc.c  */
#line 12503 "sql_yacc.yy"
    {}
    break;

  case 1944:

/* Line 1806 of yacc.c  */
#line 12504 "sql_yacc.yy"
    {}
    break;

  case 1945:

/* Line 1806 of yacc.c  */
#line 12505 "sql_yacc.yy"
    {}
    break;

  case 1946:

/* Line 1806 of yacc.c  */
#line 12506 "sql_yacc.yy"
    {}
    break;

  case 1947:

/* Line 1806 of yacc.c  */
#line 12507 "sql_yacc.yy"
    {}
    break;

  case 1948:

/* Line 1806 of yacc.c  */
#line 12508 "sql_yacc.yy"
    {}
    break;

  case 1949:

/* Line 1806 of yacc.c  */
#line 12509 "sql_yacc.yy"
    {}
    break;

  case 1950:

/* Line 1806 of yacc.c  */
#line 12510 "sql_yacc.yy"
    {}
    break;

  case 1951:

/* Line 1806 of yacc.c  */
#line 12511 "sql_yacc.yy"
    {}
    break;

  case 1952:

/* Line 1806 of yacc.c  */
#line 12512 "sql_yacc.yy"
    {}
    break;

  case 1953:

/* Line 1806 of yacc.c  */
#line 12513 "sql_yacc.yy"
    {}
    break;

  case 1954:

/* Line 1806 of yacc.c  */
#line 12514 "sql_yacc.yy"
    {}
    break;

  case 1955:

/* Line 1806 of yacc.c  */
#line 12515 "sql_yacc.yy"
    {}
    break;

  case 1956:

/* Line 1806 of yacc.c  */
#line 12516 "sql_yacc.yy"
    {}
    break;

  case 1957:

/* Line 1806 of yacc.c  */
#line 12517 "sql_yacc.yy"
    {}
    break;

  case 1958:

/* Line 1806 of yacc.c  */
#line 12518 "sql_yacc.yy"
    {}
    break;

  case 1959:

/* Line 1806 of yacc.c  */
#line 12519 "sql_yacc.yy"
    {}
    break;

  case 1960:

/* Line 1806 of yacc.c  */
#line 12520 "sql_yacc.yy"
    {}
    break;

  case 1961:

/* Line 1806 of yacc.c  */
#line 12521 "sql_yacc.yy"
    {}
    break;

  case 1962:

/* Line 1806 of yacc.c  */
#line 12522 "sql_yacc.yy"
    {}
    break;

  case 1963:

/* Line 1806 of yacc.c  */
#line 12523 "sql_yacc.yy"
    {}
    break;

  case 1964:

/* Line 1806 of yacc.c  */
#line 12524 "sql_yacc.yy"
    {}
    break;

  case 1965:

/* Line 1806 of yacc.c  */
#line 12525 "sql_yacc.yy"
    {}
    break;

  case 1966:

/* Line 1806 of yacc.c  */
#line 12526 "sql_yacc.yy"
    {}
    break;

  case 1967:

/* Line 1806 of yacc.c  */
#line 12527 "sql_yacc.yy"
    {}
    break;

  case 1968:

/* Line 1806 of yacc.c  */
#line 12528 "sql_yacc.yy"
    {}
    break;

  case 1969:

/* Line 1806 of yacc.c  */
#line 12529 "sql_yacc.yy"
    {}
    break;

  case 1970:

/* Line 1806 of yacc.c  */
#line 12530 "sql_yacc.yy"
    {}
    break;

  case 1971:

/* Line 1806 of yacc.c  */
#line 12531 "sql_yacc.yy"
    {}
    break;

  case 1972:

/* Line 1806 of yacc.c  */
#line 12532 "sql_yacc.yy"
    {}
    break;

  case 1973:

/* Line 1806 of yacc.c  */
#line 12533 "sql_yacc.yy"
    {}
    break;

  case 1974:

/* Line 1806 of yacc.c  */
#line 12534 "sql_yacc.yy"
    {}
    break;

  case 1975:

/* Line 1806 of yacc.c  */
#line 12535 "sql_yacc.yy"
    {}
    break;

  case 1976:

/* Line 1806 of yacc.c  */
#line 12536 "sql_yacc.yy"
    {}
    break;

  case 1977:

/* Line 1806 of yacc.c  */
#line 12537 "sql_yacc.yy"
    {}
    break;

  case 1978:

/* Line 1806 of yacc.c  */
#line 12538 "sql_yacc.yy"
    {}
    break;

  case 1979:

/* Line 1806 of yacc.c  */
#line 12539 "sql_yacc.yy"
    {}
    break;

  case 1980:

/* Line 1806 of yacc.c  */
#line 12540 "sql_yacc.yy"
    {}
    break;

  case 1981:

/* Line 1806 of yacc.c  */
#line 12541 "sql_yacc.yy"
    {}
    break;

  case 1982:

/* Line 1806 of yacc.c  */
#line 12542 "sql_yacc.yy"
    {}
    break;

  case 1983:

/* Line 1806 of yacc.c  */
#line 12543 "sql_yacc.yy"
    {}
    break;

  case 1984:

/* Line 1806 of yacc.c  */
#line 12544 "sql_yacc.yy"
    {}
    break;

  case 1985:

/* Line 1806 of yacc.c  */
#line 12545 "sql_yacc.yy"
    {}
    break;

  case 1986:

/* Line 1806 of yacc.c  */
#line 12546 "sql_yacc.yy"
    {}
    break;

  case 1987:

/* Line 1806 of yacc.c  */
#line 12547 "sql_yacc.yy"
    {}
    break;

  case 1988:

/* Line 1806 of yacc.c  */
#line 12548 "sql_yacc.yy"
    {}
    break;

  case 1989:

/* Line 1806 of yacc.c  */
#line 12549 "sql_yacc.yy"
    {}
    break;

  case 1990:

/* Line 1806 of yacc.c  */
#line 12550 "sql_yacc.yy"
    {}
    break;

  case 1991:

/* Line 1806 of yacc.c  */
#line 12551 "sql_yacc.yy"
    {}
    break;

  case 1992:

/* Line 1806 of yacc.c  */
#line 12552 "sql_yacc.yy"
    {}
    break;

  case 1993:

/* Line 1806 of yacc.c  */
#line 12553 "sql_yacc.yy"
    {}
    break;

  case 1994:

/* Line 1806 of yacc.c  */
#line 12554 "sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1806 of yacc.c  */
#line 12555 "sql_yacc.yy"
    {}
    break;

  case 1996:

/* Line 1806 of yacc.c  */
#line 12556 "sql_yacc.yy"
    {}
    break;

  case 1997:

/* Line 1806 of yacc.c  */
#line 12557 "sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1806 of yacc.c  */
#line 12558 "sql_yacc.yy"
    {}
    break;

  case 1999:

/* Line 1806 of yacc.c  */
#line 12559 "sql_yacc.yy"
    {}
    break;

  case 2000:

/* Line 1806 of yacc.c  */
#line 12560 "sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1806 of yacc.c  */
#line 12561 "sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1806 of yacc.c  */
#line 12562 "sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1806 of yacc.c  */
#line 12563 "sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1806 of yacc.c  */
#line 12564 "sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1806 of yacc.c  */
#line 12565 "sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1806 of yacc.c  */
#line 12566 "sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1806 of yacc.c  */
#line 12567 "sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1806 of yacc.c  */
#line 12568 "sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1806 of yacc.c  */
#line 12569 "sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1806 of yacc.c  */
#line 12570 "sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1806 of yacc.c  */
#line 12571 "sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1806 of yacc.c  */
#line 12572 "sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1806 of yacc.c  */
#line 12573 "sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1806 of yacc.c  */
#line 12574 "sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1806 of yacc.c  */
#line 12575 "sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1806 of yacc.c  */
#line 12576 "sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1806 of yacc.c  */
#line 12577 "sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1806 of yacc.c  */
#line 12578 "sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1806 of yacc.c  */
#line 12579 "sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1806 of yacc.c  */
#line 12580 "sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1806 of yacc.c  */
#line 12581 "sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1806 of yacc.c  */
#line 12582 "sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1806 of yacc.c  */
#line 12583 "sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1806 of yacc.c  */
#line 12584 "sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1806 of yacc.c  */
#line 12585 "sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1806 of yacc.c  */
#line 12586 "sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1806 of yacc.c  */
#line 12587 "sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1806 of yacc.c  */
#line 12588 "sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1806 of yacc.c  */
#line 12589 "sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1806 of yacc.c  */
#line 12590 "sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1806 of yacc.c  */
#line 12591 "sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1806 of yacc.c  */
#line 12592 "sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1806 of yacc.c  */
#line 12593 "sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1806 of yacc.c  */
#line 12594 "sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1806 of yacc.c  */
#line 12595 "sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1806 of yacc.c  */
#line 12596 "sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1806 of yacc.c  */
#line 12597 "sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1806 of yacc.c  */
#line 12598 "sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1806 of yacc.c  */
#line 12599 "sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1806 of yacc.c  */
#line 12600 "sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1806 of yacc.c  */
#line 12601 "sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1806 of yacc.c  */
#line 12602 "sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1806 of yacc.c  */
#line 12603 "sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1806 of yacc.c  */
#line 12604 "sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1806 of yacc.c  */
#line 12605 "sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1806 of yacc.c  */
#line 12606 "sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1806 of yacc.c  */
#line 12607 "sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1806 of yacc.c  */
#line 12608 "sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1806 of yacc.c  */
#line 12609 "sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1806 of yacc.c  */
#line 12610 "sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1806 of yacc.c  */
#line 12611 "sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1806 of yacc.c  */
#line 12612 "sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1806 of yacc.c  */
#line 12613 "sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1806 of yacc.c  */
#line 12614 "sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1806 of yacc.c  */
#line 12615 "sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1806 of yacc.c  */
#line 12616 "sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1806 of yacc.c  */
#line 12617 "sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1806 of yacc.c  */
#line 12618 "sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1806 of yacc.c  */
#line 12619 "sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1806 of yacc.c  */
#line 12620 "sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1806 of yacc.c  */
#line 12621 "sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1806 of yacc.c  */
#line 12622 "sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1806 of yacc.c  */
#line 12623 "sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1806 of yacc.c  */
#line 12624 "sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1806 of yacc.c  */
#line 12625 "sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1806 of yacc.c  */
#line 12626 "sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1806 of yacc.c  */
#line 12627 "sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1806 of yacc.c  */
#line 12628 "sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1806 of yacc.c  */
#line 12629 "sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1806 of yacc.c  */
#line 12630 "sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1806 of yacc.c  */
#line 12631 "sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1806 of yacc.c  */
#line 12632 "sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1806 of yacc.c  */
#line 12633 "sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1806 of yacc.c  */
#line 12634 "sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1806 of yacc.c  */
#line 12635 "sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1806 of yacc.c  */
#line 12636 "sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1806 of yacc.c  */
#line 12637 "sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1806 of yacc.c  */
#line 12638 "sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1806 of yacc.c  */
#line 12639 "sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1806 of yacc.c  */
#line 12640 "sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1806 of yacc.c  */
#line 12641 "sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1806 of yacc.c  */
#line 12642 "sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1806 of yacc.c  */
#line 12643 "sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1806 of yacc.c  */
#line 12644 "sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1806 of yacc.c  */
#line 12645 "sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1806 of yacc.c  */
#line 12646 "sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1806 of yacc.c  */
#line 12647 "sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1806 of yacc.c  */
#line 12648 "sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1806 of yacc.c  */
#line 12649 "sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1806 of yacc.c  */
#line 12650 "sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1806 of yacc.c  */
#line 12651 "sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1806 of yacc.c  */
#line 12652 "sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1806 of yacc.c  */
#line 12653 "sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1806 of yacc.c  */
#line 12654 "sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1806 of yacc.c  */
#line 12655 "sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1806 of yacc.c  */
#line 12656 "sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1806 of yacc.c  */
#line 12657 "sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1806 of yacc.c  */
#line 12658 "sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1806 of yacc.c  */
#line 12659 "sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1806 of yacc.c  */
#line 12660 "sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1806 of yacc.c  */
#line 12661 "sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1806 of yacc.c  */
#line 12662 "sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1806 of yacc.c  */
#line 12663 "sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1806 of yacc.c  */
#line 12664 "sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1806 of yacc.c  */
#line 12665 "sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1806 of yacc.c  */
#line 12666 "sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1806 of yacc.c  */
#line 12667 "sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1806 of yacc.c  */
#line 12668 "sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1806 of yacc.c  */
#line 12669 "sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1806 of yacc.c  */
#line 12670 "sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1806 of yacc.c  */
#line 12671 "sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1806 of yacc.c  */
#line 12672 "sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1806 of yacc.c  */
#line 12673 "sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1806 of yacc.c  */
#line 12674 "sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1806 of yacc.c  */
#line 12675 "sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1806 of yacc.c  */
#line 12676 "sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1806 of yacc.c  */
#line 12677 "sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1806 of yacc.c  */
#line 12678 "sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1806 of yacc.c  */
#line 12679 "sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1806 of yacc.c  */
#line 12680 "sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1806 of yacc.c  */
#line 12681 "sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1806 of yacc.c  */
#line 12682 "sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1806 of yacc.c  */
#line 12683 "sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1806 of yacc.c  */
#line 12684 "sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1806 of yacc.c  */
#line 12685 "sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1806 of yacc.c  */
#line 12686 "sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1806 of yacc.c  */
#line 12687 "sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1806 of yacc.c  */
#line 12688 "sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1806 of yacc.c  */
#line 12689 "sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1806 of yacc.c  */
#line 12690 "sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1806 of yacc.c  */
#line 12691 "sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1806 of yacc.c  */
#line 12692 "sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1806 of yacc.c  */
#line 12693 "sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1806 of yacc.c  */
#line 12694 "sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1806 of yacc.c  */
#line 12695 "sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1806 of yacc.c  */
#line 12696 "sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1806 of yacc.c  */
#line 12697 "sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1806 of yacc.c  */
#line 12698 "sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1806 of yacc.c  */
#line 12699 "sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1806 of yacc.c  */
#line 12700 "sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1806 of yacc.c  */
#line 12701 "sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1806 of yacc.c  */
#line 12702 "sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1806 of yacc.c  */
#line 12703 "sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1806 of yacc.c  */
#line 12704 "sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1806 of yacc.c  */
#line 12705 "sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1806 of yacc.c  */
#line 12706 "sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1806 of yacc.c  */
#line 12707 "sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1806 of yacc.c  */
#line 12708 "sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1806 of yacc.c  */
#line 12709 "sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1806 of yacc.c  */
#line 12710 "sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1806 of yacc.c  */
#line 12711 "sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1806 of yacc.c  */
#line 12712 "sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1806 of yacc.c  */
#line 12713 "sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1806 of yacc.c  */
#line 12714 "sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1806 of yacc.c  */
#line 12715 "sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1806 of yacc.c  */
#line 12716 "sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1806 of yacc.c  */
#line 12717 "sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1806 of yacc.c  */
#line 12718 "sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1806 of yacc.c  */
#line 12719 "sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1806 of yacc.c  */
#line 12720 "sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1806 of yacc.c  */
#line 12721 "sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1806 of yacc.c  */
#line 12722 "sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1806 of yacc.c  */
#line 12723 "sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1806 of yacc.c  */
#line 12724 "sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1806 of yacc.c  */
#line 12725 "sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1806 of yacc.c  */
#line 12726 "sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1806 of yacc.c  */
#line 12727 "sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1806 of yacc.c  */
#line 12728 "sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1806 of yacc.c  */
#line 12729 "sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1806 of yacc.c  */
#line 12730 "sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1806 of yacc.c  */
#line 12731 "sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1806 of yacc.c  */
#line 12732 "sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1806 of yacc.c  */
#line 12733 "sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1806 of yacc.c  */
#line 12734 "sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1806 of yacc.c  */
#line 12735 "sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1806 of yacc.c  */
#line 12736 "sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1806 of yacc.c  */
#line 12737 "sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1806 of yacc.c  */
#line 12738 "sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1806 of yacc.c  */
#line 12739 "sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1806 of yacc.c  */
#line 12740 "sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1806 of yacc.c  */
#line 12741 "sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1806 of yacc.c  */
#line 12742 "sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1806 of yacc.c  */
#line 12743 "sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1806 of yacc.c  */
#line 12744 "sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1806 of yacc.c  */
#line 12751 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
          }
    break;

  case 2186:

/* Line 1806 of yacc.c  */
#line 12761 "sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1806 of yacc.c  */
#line 12765 "sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1806 of yacc.c  */
#line 12766 "sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1806 of yacc.c  */
#line 12775 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              /*
                If we are in SP we want have own LEX for each assignment.
                This is mostly because it is hard for several sp_instr_set
                and sp_instr_set_trigger instructions share one LEX.
                (Well, it is theoretically possible but adds some extra
                overhead on preparation for execution stage and IMO less
                robust).

                QQ: May be we should simply prohibit group assignments in SP?
              */
              lex->sphead->reset_lex(thd);
              lex= thd->lex;

              /* Set new LEX as if we at start of set rule. */
              lex->sql_command= SQLCOM_SET_OPTION;
              mysql_init_select(lex);
              lex->option_type=OPT_SESSION;
              lex->var_list.empty();
              lex->one_shot_set= 0;
              lex->autocommit= 0;
              lex->sphead->m_tmp_query= lip->get_tok_start();
            }
          }
    break;

  case 2192:

/* Line 1806 of yacc.c  */
#line 12806 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              sp_head *sp= lex->sphead;

              if (!lex->var_list.is_empty())
              {
                /*
                  We have assignment to user or system variable or
                  option setting, so we should construct sp_instr_stmt
                  for it.
                */
                LEX_STRING qbuff;
                sp_instr_stmt *i;

                if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                           lex)))
                  MYSQL_YYABORT;

                /*
                  Extract the query statement from the tokenizer.  The
                  end is either lip->ptr, if there was no lookahead,
                  lip->tok_end otherwise.
                */
                if (yychar == YYEMPTY)
                  qbuff.length= lip->get_ptr() - sp->m_tmp_query;
                else
                  qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

                if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                                    qbuff.length + 5)))
                  MYSQL_YYABORT;

                strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
                        qbuff.length);
                qbuff.length+= 4;
                i->m_query= qbuff;
                if (sp->add_instr(i))
                  MYSQL_YYABORT;
              }
              if (lex->sphead->restore_lex(thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2193:

/* Line 1806 of yacc.c  */
#line 12857 "sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1806 of yacc.c  */
#line 12858 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2195:

/* Line 1806 of yacc.c  */
#line 12859 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2196:

/* Line 1806 of yacc.c  */
#line 12860 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2197:

/* Line 1806 of yacc.c  */
#line 12864 "sql_yacc.yy"
    { (yyval.num)= OPT_DEFAULT; }
    break;

  case 2198:

/* Line 1806 of yacc.c  */
#line 12865 "sql_yacc.yy"
    { Lex->one_shot_set= 1; (yyval.num)= OPT_SESSION; }
    break;

  case 2199:

/* Line 1806 of yacc.c  */
#line 12869 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2200:

/* Line 1806 of yacc.c  */
#line 12870 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2201:

/* Line 1806 of yacc.c  */
#line 12871 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2202:

/* Line 1806 of yacc.c  */
#line 12872 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2203:

/* Line 1806 of yacc.c  */
#line 12876 "sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2204:

/* Line 1806 of yacc.c  */
#line 12877 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2205:

/* Line 1806 of yacc.c  */
#line 12878 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2206:

/* Line 1806 of yacc.c  */
#line 12879 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2209:

/* Line 1806 of yacc.c  */
#line 12889 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            LEX_STRING *name= &(yyvsp[(2) - (4)].variable).base_name;

            if ((yyvsp[(2) - (4)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              if (set_trigger_new_row(YYTHD, name, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(2) - (4)].variable).var)
            {
              if ((yyvsp[(1) - (4)].var_type))
                lex->option_type= (yyvsp[(1) - (4)].var_type);

              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(2) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable_t *spv= spc->find_variable(name);

              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2210:

/* Line 1806 of yacc.c  */
#line 12931 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            lex->option_type= (yyvsp[(1) - (5)].var_type);
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(5) - (5)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2211:

/* Line 1806 of yacc.c  */
#line 12950 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2212:

/* Line 1806 of yacc.c  */
#line 12961 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2213:

/* Line 1806 of yacc.c  */
#line 12974 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2214:

/* Line 1806 of yacc.c  */
#line 12988 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2215:

/* Line 1806 of yacc.c  */
#line 13003 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2216:

/* Line 1806 of yacc.c  */
#line 13022 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2217:

/* Line 1806 of yacc.c  */
#line 13049 "sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2218:

/* Line 1806 of yacc.c  */
#line 13062 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable_t *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2219:

/* Line 1806 of yacc.c  */
#line 13089 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2220:

/* Line 1806 of yacc.c  */
#line 13132 "sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2221:

/* Line 1806 of yacc.c  */
#line 13145 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2222:

/* Line 1806 of yacc.c  */
#line 13146 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2223:

/* Line 1806 of yacc.c  */
#line 13147 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2224:

/* Line 1806 of yacc.c  */
#line 13148 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2225:

/* Line 1806 of yacc.c  */
#line 13152 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2226:

/* Line 1806 of yacc.c  */
#line 13154 "sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? YYTHD->variables.old_passwords ?
              Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2227:

/* Line 1806 of yacc.c  */
#line 13163 "sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str,
                                                          (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2228:

/* Line 1806 of yacc.c  */
#line 13174 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2229:

/* Line 1806 of yacc.c  */
#line 13175 "sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2230:

/* Line 1806 of yacc.c  */
#line 13177 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2231:

/* Line 1806 of yacc.c  */
#line 13183 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2232:

/* Line 1806 of yacc.c  */
#line 13189 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2233:

/* Line 1806 of yacc.c  */
#line 13200 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2234:

/* Line 1806 of yacc.c  */
#line 13211 "sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1806 of yacc.c  */
#line 13226 "sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2240:

/* Line 1806 of yacc.c  */
#line 13238 "sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2241:

/* Line 1806 of yacc.c  */
#line 13239 "sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2242:

/* Line 1806 of yacc.c  */
#line 13240 "sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2243:

/* Line 1806 of yacc.c  */
#line 13241 "sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2244:

/* Line 1806 of yacc.c  */
#line 13246 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2245:

/* Line 1806 of yacc.c  */
#line 13257 "sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1806 of yacc.c  */
#line 13266 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2247:

/* Line 1806 of yacc.c  */
#line 13278 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2248:

/* Line 1806 of yacc.c  */
#line 13290 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2249:

/* Line 1806 of yacc.c  */
#line 13309 "sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2250:

/* Line 1806 of yacc.c  */
#line 13322 "sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2251:

/* Line 1806 of yacc.c  */
#line 13323 "sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2252:

/* Line 1806 of yacc.c  */
#line 13327 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2253:

/* Line 1806 of yacc.c  */
#line 13328 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2254:

/* Line 1806 of yacc.c  */
#line 13332 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2255:

/* Line 1806 of yacc.c  */
#line 13333 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2256:

/* Line 1806 of yacc.c  */
#line 13334 "sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2257:

/* Line 1806 of yacc.c  */
#line 13335 "sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2258:

/* Line 1806 of yacc.c  */
#line 13337 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2259:

/* Line 1806 of yacc.c  */
#line 13345 "sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1806 of yacc.c  */
#line 13349 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2261:

/* Line 1806 of yacc.c  */
#line 13350 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2262:

/* Line 1806 of yacc.c  */
#line 13351 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2263:

/* Line 1806 of yacc.c  */
#line 13352 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2264:

/* Line 1806 of yacc.c  */
#line 13353 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2265:

/* Line 1806 of yacc.c  */
#line 13360 "sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1806 of yacc.c  */
#line 13365 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2267:

/* Line 1806 of yacc.c  */
#line 13371 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2268:

/* Line 1806 of yacc.c  */
#line 13382 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2269:

/* Line 1806 of yacc.c  */
#line 13393 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2270:

/* Line 1806 of yacc.c  */
#line 13397 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2271:

/* Line 1806 of yacc.c  */
#line 13407 "sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1806 of yacc.c  */
#line 13413 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2273:

/* Line 1806 of yacc.c  */
#line 13420 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2274:

/* Line 1806 of yacc.c  */
#line 13432 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2275:

/* Line 1806 of yacc.c  */
#line 13443 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2278:

/* Line 1806 of yacc.c  */
#line 13457 "sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1806 of yacc.c  */
#line 13459 "sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2284:

/* Line 1806 of yacc.c  */
#line 13477 "sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2285:

/* Line 1806 of yacc.c  */
#line 13478 "sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1806 of yacc.c  */
#line 13480 "sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2287:

/* Line 1806 of yacc.c  */
#line 13481 "sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1806 of yacc.c  */
#line 13483 "sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2289:

/* Line 1806 of yacc.c  */
#line 13484 "sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1806 of yacc.c  */
#line 13486 "sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2291:

/* Line 1806 of yacc.c  */
#line 13487 "sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1806 of yacc.c  */
#line 13488 "sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2293:

/* Line 1806 of yacc.c  */
#line 13489 "sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1806 of yacc.c  */
#line 13490 "sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2295:

/* Line 1806 of yacc.c  */
#line 13491 "sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2296:

/* Line 1806 of yacc.c  */
#line 13492 "sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2297:

/* Line 1806 of yacc.c  */
#line 13493 "sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2298:

/* Line 1806 of yacc.c  */
#line 13494 "sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2299:

/* Line 1806 of yacc.c  */
#line 13495 "sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2300:

/* Line 1806 of yacc.c  */
#line 13496 "sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2301:

/* Line 1806 of yacc.c  */
#line 13497 "sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2302:

/* Line 1806 of yacc.c  */
#line 13498 "sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2303:

/* Line 1806 of yacc.c  */
#line 13499 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2304:

/* Line 1806 of yacc.c  */
#line 13500 "sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2305:

/* Line 1806 of yacc.c  */
#line 13501 "sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2306:

/* Line 1806 of yacc.c  */
#line 13502 "sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2307:

/* Line 1806 of yacc.c  */
#line 13503 "sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2308:

/* Line 1806 of yacc.c  */
#line 13504 "sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2309:

/* Line 1806 of yacc.c  */
#line 13505 "sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2310:

/* Line 1806 of yacc.c  */
#line 13506 "sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2311:

/* Line 1806 of yacc.c  */
#line 13507 "sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2312:

/* Line 1806 of yacc.c  */
#line 13508 "sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2313:

/* Line 1806 of yacc.c  */
#line 13509 "sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2314:

/* Line 1806 of yacc.c  */
#line 13510 "sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2315:

/* Line 1806 of yacc.c  */
#line 13511 "sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2316:

/* Line 1806 of yacc.c  */
#line 13512 "sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2317:

/* Line 1806 of yacc.c  */
#line 13513 "sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2318:

/* Line 1806 of yacc.c  */
#line 13517 "sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1806 of yacc.c  */
#line 13518 "sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1806 of yacc.c  */
#line 13528 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2323:

/* Line 1806 of yacc.c  */
#line 13538 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2324:

/* Line 1806 of yacc.c  */
#line 13548 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2325:

/* Line 1806 of yacc.c  */
#line 13561 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2326:

/* Line 1806 of yacc.c  */
#line 13576 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2327:

/* Line 1806 of yacc.c  */
#line 13589 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2328:

/* Line 1806 of yacc.c  */
#line 13602 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2329:

/* Line 1806 of yacc.c  */
#line 13614 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2330:

/* Line 1806 of yacc.c  */
#line 13619 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2331:

/* Line 1806 of yacc.c  */
#line 13627 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2332:

/* Line 1806 of yacc.c  */
#line 13632 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2333:

/* Line 1806 of yacc.c  */
#line 13640 "sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords)
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2334:

/* Line 1806 of yacc.c  */
#line 13669 "sql_yacc.yy"
    { 
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
          }
    break;

  case 2335:

/* Line 1806 of yacc.c  */
#line 13676 "sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2336:

/* Line 1806 of yacc.c  */
#line 13684 "sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2337:

/* Line 1806 of yacc.c  */
#line 13692 "sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2338:

/* Line 1806 of yacc.c  */
#line 13697 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2342:

/* Line 1806 of yacc.c  */
#line 13711 "sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2344:

/* Line 1806 of yacc.c  */
#line 13740 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2345:

/* Line 1806 of yacc.c  */
#line 13744 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2346:

/* Line 1806 of yacc.c  */
#line 13748 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2347:

/* Line 1806 of yacc.c  */
#line 13752 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2348:

/* Line 1806 of yacc.c  */
#line 13758 "sql_yacc.yy"
    {}
    break;

  case 2350:

/* Line 1806 of yacc.c  */
#line 13763 "sql_yacc.yy"
    {}
    break;

  case 2351:

/* Line 1806 of yacc.c  */
#line 13764 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2352:

/* Line 1806 of yacc.c  */
#line 13768 "sql_yacc.yy"
    {}
    break;

  case 2353:

/* Line 1806 of yacc.c  */
#line 13769 "sql_yacc.yy"
    {}
    break;

  case 2354:

/* Line 1806 of yacc.c  */
#line 13773 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2355:

/* Line 1806 of yacc.c  */
#line 13775 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2356:

/* Line 1806 of yacc.c  */
#line 13781 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2357:

/* Line 1806 of yacc.c  */
#line 13787 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2358:

/* Line 1806 of yacc.c  */
#line 13793 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2359:

/* Line 1806 of yacc.c  */
#line 13802 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2360:

/* Line 1806 of yacc.c  */
#line 13807 "sql_yacc.yy"
    {}
    break;

  case 2361:

/* Line 1806 of yacc.c  */
#line 13811 "sql_yacc.yy"
    {}
    break;

  case 2362:

/* Line 1806 of yacc.c  */
#line 13812 "sql_yacc.yy"
    {}
    break;

  case 2363:

/* Line 1806 of yacc.c  */
#line 13817 "sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2364:

/* Line 1806 of yacc.c  */
#line 13818 "sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2365:

/* Line 1806 of yacc.c  */
#line 13819 "sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2366:

/* Line 1806 of yacc.c  */
#line 13824 "sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2367:

/* Line 1806 of yacc.c  */
#line 13825 "sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2368:

/* Line 1806 of yacc.c  */
#line 13826 "sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2369:

/* Line 1806 of yacc.c  */
#line 13830 "sql_yacc.yy"
    {}
    break;

  case 2370:

/* Line 1806 of yacc.c  */
#line 13831 "sql_yacc.yy"
    {}
    break;

  case 2371:

/* Line 1806 of yacc.c  */
#line 13836 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2372:

/* Line 1806 of yacc.c  */
#line 13848 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2373:

/* Line 1806 of yacc.c  */
#line 13858 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2374:

/* Line 1806 of yacc.c  */
#line 13867 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2375:

/* Line 1806 of yacc.c  */
#line 13876 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2376:

/* Line 1806 of yacc.c  */
#line 13889 "sql_yacc.yy"
    {}
    break;

  case 2378:

/* Line 1806 of yacc.c  */
#line 13895 "sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2379:

/* Line 1806 of yacc.c  */
#line 13900 "sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2380:

/* Line 1806 of yacc.c  */
#line 13910 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2381:

/* Line 1806 of yacc.c  */
#line 13911 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2382:

/* Line 1806 of yacc.c  */
#line 13912 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2385:

/* Line 1806 of yacc.c  */
#line 13921 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2386:

/* Line 1806 of yacc.c  */
#line 13937 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2389:

/* Line 1806 of yacc.c  */
#line 13950 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2390:

/* Line 1806 of yacc.c  */
#line 13951 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2391:

/* Line 1806 of yacc.c  */
#line 13952 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2392:

/* Line 1806 of yacc.c  */
#line 13957 "sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2393:

/* Line 1806 of yacc.c  */
#line 13961 "sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2395:

/* Line 1806 of yacc.c  */
#line 13970 "sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2396:

/* Line 1806 of yacc.c  */
#line 13976 "sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2397:

/* Line 1806 of yacc.c  */
#line 13985 "sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2398:

/* Line 1806 of yacc.c  */
#line 13991 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2399:

/* Line 1806 of yacc.c  */
#line 14012 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2404:

/* Line 1806 of yacc.c  */
#line 14040 "sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2405:

/* Line 1806 of yacc.c  */
#line 14042 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2406:

/* Line 1806 of yacc.c  */
#line 14049 "sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2407:

/* Line 1806 of yacc.c  */
#line 14050 "sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2408:

/* Line 1806 of yacc.c  */
#line 14051 "sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2409:

/* Line 1806 of yacc.c  */
#line 14053 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2410:

/* Line 1806 of yacc.c  */
#line 14059 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2411:

/* Line 1806 of yacc.c  */
#line 14064 "sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2412:

/* Line 1806 of yacc.c  */
#line 14075 "sql_yacc.yy"
    {}
    break;

  case 2413:

/* Line 1806 of yacc.c  */
#line 14077 "sql_yacc.yy"
    {}
    break;

  case 2414:

/* Line 1806 of yacc.c  */
#line 14079 "sql_yacc.yy"
    {}
    break;

  case 2428:

/* Line 1806 of yacc.c  */
#line 14112 "sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2429:

/* Line 1806 of yacc.c  */
#line 14126 "sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2430:

/* Line 1806 of yacc.c  */
#line 14139 "sql_yacc.yy"
    {}
    break;

  case 2431:

/* Line 1806 of yacc.c  */
#line 14141 "sql_yacc.yy"
    {}
    break;

  case 2432:

/* Line 1806 of yacc.c  */
#line 14143 "sql_yacc.yy"
    {}
    break;

  case 2433:

/* Line 1806 of yacc.c  */
#line 14148 "sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2434:

/* Line 1806 of yacc.c  */
#line 14153 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2435:

/* Line 1806 of yacc.c  */
#line 14155 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2436:

/* Line 1806 of yacc.c  */
#line 14157 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2437:

/* Line 1806 of yacc.c  */
#line 14162 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2438:

/* Line 1806 of yacc.c  */
#line 14164 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2439:

/* Line 1806 of yacc.c  */
#line 14166 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2440:

/* Line 1806 of yacc.c  */
#line 14171 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2442:

/* Line 1806 of yacc.c  */
#line 14188 "sql_yacc.yy"
    {}
    break;

  case 2444:

/* Line 1806 of yacc.c  */
#line 14194 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2445:

/* Line 1806 of yacc.c  */
#line 14199 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2446:

/* Line 1806 of yacc.c  */
#line 14206 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2447:

/* Line 1806 of yacc.c  */
#line 14215 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2450:

/* Line 1806 of yacc.c  */
#line 14237 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2451:

/* Line 1806 of yacc.c  */
#line 14239 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2452:

/* Line 1806 of yacc.c  */
#line 14241 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2453:

/* Line 1806 of yacc.c  */
#line 14243 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2454:

/* Line 1806 of yacc.c  */
#line 14260 "sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2455:

/* Line 1806 of yacc.c  */
#line 14266 "sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2456:

/* Line 1806 of yacc.c  */
#line 14271 "sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2457:

/* Line 1806 of yacc.c  */
#line 14301 "sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2458:

/* Line 1806 of yacc.c  */
#line 14335 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2459:

/* Line 1806 of yacc.c  */
#line 14353 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2460:

/* Line 1806 of yacc.c  */
#line 14376 "sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2461:

/* Line 1806 of yacc.c  */
#line 14408 "sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2462:

/* Line 1806 of yacc.c  */
#line 14412 "sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2463:

/* Line 1806 of yacc.c  */
#line 14420 "sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2464:

/* Line 1806 of yacc.c  */
#line 14443 "sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2465:

/* Line 1806 of yacc.c  */
#line 14452 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2466:

/* Line 1806 of yacc.c  */
#line 14508 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2467:

/* Line 1806 of yacc.c  */
#line 14532 "sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2468:

/* Line 1806 of yacc.c  */
#line 14541 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2469:

/* Line 1806 of yacc.c  */
#line 14549 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2470:

/* Line 1806 of yacc.c  */
#line 14557 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2471:

/* Line 1806 of yacc.c  */
#line 14571 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2472:

/* Line 1806 of yacc.c  */
#line 14575 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2473:

/* Line 1806 of yacc.c  */
#line 14579 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2474:

/* Line 1806 of yacc.c  */
#line 14583 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2475:

/* Line 1806 of yacc.c  */
#line 14587 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2476:

/* Line 1806 of yacc.c  */
#line 14591 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2477:

/* Line 1806 of yacc.c  */
#line 14598 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2478:

/* Line 1806 of yacc.c  */
#line 14605 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2479:

/* Line 1806 of yacc.c  */
#line 14612 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2480:

/* Line 1806 of yacc.c  */
#line 14621 "sql_yacc.yy"
    {}
    break;

  case 2481:

/* Line 1806 of yacc.c  */
#line 14622 "sql_yacc.yy"
    {}
    break;

  case 2482:

/* Line 1806 of yacc.c  */
#line 14626 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2483:

/* Line 1806 of yacc.c  */
#line 14627 "sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2484:

/* Line 1806 of yacc.c  */
#line 14628 "sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2485:

/* Line 1806 of yacc.c  */
#line 14632 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2486:

/* Line 1806 of yacc.c  */
#line 14633 "sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2487:

/* Line 1806 of yacc.c  */
#line 14638 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2488:

/* Line 1806 of yacc.c  */
#line 14640 "sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2490:

/* Line 1806 of yacc.c  */
#line 14645 "sql_yacc.yy"
    {}
    break;

  case 2491:

/* Line 1806 of yacc.c  */
#line 14646 "sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2492:

/* Line 1806 of yacc.c  */
#line 14651 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2493:

/* Line 1806 of yacc.c  */
#line 14661 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;



/* Line 1806 of yacc.c  */
#line 37526 "sql_yacc.tab.cc"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



